openapi: 3.0.3
info:
  title: Waylay Function Registry
  version: 2.12.4
  x-visibility: stable
  description: >-
    V2 API to build and deploy Waylay functions (plugs, webscripts, BYOML
    models).
  x-visiblity:
    status: stable
    title: Since v2.8.0
components:
  securitySchemes:
    waylayApiKeySecret:
      type: http
      description: >-
        Waylay apiKey/apiSecret basic authentication. All endpoints support also
        Waylay JWT Bearer authentication.
      scheme: basic
  responses:
    '400':
      description: Bad Request
    '401':
      description: Unauthorized
    '404':
      description: Resource Not Found
    '415':
      description: Unsupported Media Type
  schemas:
    JobReferenceParams:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/JobType'
        id:
          type: string
      required:
        - type
        - id
      additionalProperties: false
    JobType:
      type: string
      enum:
        - build
        - deploy
        - verify
        - undeploy
        - batch
        - scale
        - cleanup
        - other
    JobEventsFilterQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/JobType'
          description: The type of the job.
        id:
          type: string
          description: The id of the job.
        children:
          type: boolean
          description: >-
            If set to <code>true</code>, the event stream will include events of
            the job's dependants. E.g., when subscribing to a verify job with
            `children=true`, you will also receive the events of the underlying
            build and deploy jobs. Defaults to <code>false</code>.
      additionalProperties: false
    Name:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
      required:
        - name
    FunctionType:
      type: string
      enum:
        - plugs
        - webscripts
        - kfserving
      description: Type of functions supported by the registry service.
    NameAndVersion:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
        - name
        - version
    SemanticVersion:
      type: string
      description: >-
        A semantic version with _exactly_ a `major`, `minor` and `patch`
        specifier. No `pre-release` or `build` identifiers are allowed. See
        https://semver.org
      pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
    RebuildPolicy:
      type: string
      enum:
        - patch
        - minor
        - major
        - same
      description: >-
        The policy to select a new <em>runtime</em> version when a rebuild is
        issued.
    RebuildQueryParams:
      type: object
      properties:
        upgrade:
          $ref: '#/components/schemas/RebuildPolicy'
          description: >-
            If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b>
            version.   This should only include backward compatible upgrades. 
            </li>  <li><code>minor</code> <b>major</b> version.   This might
            include an upgrade of e.g. the language runtime and/or provided  
            dependencies that could break compatiblity with the function. .</li>
            </ul>
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, checks whether rebuild jobs are needed,
            but do not start any jobs.
        forceVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: >-
            If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade`
            parameter.
        ignoreChecks:
          type: boolean
          description: >-
            If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option
        scaleToZero:
          type: boolean
          description: >-
            Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to
            zero only if it was not active before this command.
        skipRebuild:
          type: boolean
          description: >-
            If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
      additionalProperties: false
    LimitQuery:
      type: object
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
      additionalProperties: false
    PagingQuery:
      type: object
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
      additionalProperties: false
    StatusInclude:
      type: string
      enum:
        - registered
        - running
        - pending
        - deployed
        - unhealthy
        - failed
        - undeploying
        - undeployed
      description: Inlude a status as a filter.
      example: running
    StatusExclude:
      type: string
      description: >-
        Any status value with a `-` postfix appended, excludes that status as a
        filter.
      pattern: >-
        ^(registered|pending|deployed|unhealthy|failed|running|undeploying|undeployed)-$
      example: running-
    StatusAny:
      type: string
      description: Includes *all* statuses (including `undeployed`) as a filter
      enum:
        - any
    StatusFilter:
      anyOf:
        - $ref: '#/components/schemas/StatusInclude'
        - $ref: '#/components/schemas/StatusExclude'
        - $ref: '#/components/schemas/StatusAny'
      description: Inclusion or exclusion filter on the `status` property.
    FunctionEntityQuery:
      type: object
      properties:
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      additionalProperties: false
      description: >-
        Filter on function attributes that do not change across function
        versions.
    ArchiveFormat:
      type: string
      enum:
        - node
        - python
        - golang
        - byoml
        - native
    Runtime:
      type: string
    FunctionVersionQuery:
      type: object
      properties:
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
      additionalProperties: false
      description: >-
        Filter on function attributes that can change across function versions.
        When these query parameters are used, the query is considered a
        _function version_ listing and no HAL links to latest (_draft_,
        _published_) versions are included.
    SemanticVersionRange:
      anyOf:
        - type: string
        - $ref: '#/components/schemas/SemanticVersion'
      description: A range of semantic versions. See https://devhints.io/semver
    TimestampSpec:
      anyOf:
        - $ref: '#/components/schemas/TimestampAge'
        - $ref: '#/components/schemas/TimestampAbsolute'
      description: A timestamp specification.
    TimestampAge:
      anyOf:
        - $ref: '#/components/schemas/SO8601Period'
        - $ref: '#/components/schemas/DurationSpec'
      description: A timestamp expressed as a age relative to now
    SO8601Period:
      type: string
      description: An ISO8601 period expression
      pattern: P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d+)S))?
      format: duration
    DurationSpec:
      type: string
      description: >-
        An duration expression. A numeric value without unit is interpreted as
        milliseconds.
      pattern: \d+([ybwdhms])?
    TimestampAbsolute:
      anyOf:
        - $ref: '#/components/schemas/SO8601DateTime'
        - $ref: '#/components/schemas/SO8601Date'
      description: An absolute timestamp as an ISO8601 string
    SO8601DateTime:
      type: string
      description: An ISO8601 date-time expression.
      pattern: \d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}(:\d{2})?(Z|([+-]\d\d:\d\d))?
      format: date-time
    SO8601Date:
      type: string
      description: An ISO8601 date expression.
      pattern: \d{4}-\d{2}-\d{2}(Z|([+-]\d\d:\d\d))?
      format: date
    DeprecatedDraftFilter:
      type: object
      properties:
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
      additionalProperties: false
    DeployAttributesFilter:
      type: object
      properties:
        endpoint:
          type: string
          description: >-
            Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        imageName:
          type: string
          description: >-
            Filter on the container image name. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        storageLocation:
          type: string
          description: >-
            Filter on the storageLocation. This is case-insensitive and supports
            wild-cards `?` (any one character) and `*` (any sequence of
            characters).
      additionalProperties: false
    VersionIncludes:
      type: object
      properties:
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
      additionalProperties: false
    NamedVersionsFilter:
      type: object
      properties:
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
      additionalProperties: false
    NamedVersion:
      type: string
      description: A function reference represented by `name@version`.
      pattern: ^.*@(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
    LatestFunctionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: >-
        Request to list latest function versions per named function. A request
        that only uses these query parameters will include links to the _latest_
        draft/published versions.
    LatestFunctionVersionsQuery:
      type: object
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
        latest:
          type: boolean
          description: >-
            When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be
            returned. Defaults to `true`, except when specific versions are
            selected with the `nameVersion` filter.
      additionalProperties: false
      description: Latest function versions listing query.
    NamedFunctionVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Named function versions listing query.
    VersionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        endpoint:
          type: string
          description: >-
            Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        imageName:
          type: string
          description: >-
            Filter on the container image name. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        storageLocation:
          type: string
          description: >-
            Filter on the storageLocation. This is case-insensitive and supports
            wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Function versions paged query
    PlugTypeQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PlugType'
          description: If set, filters on the type of plug.
      additionalProperties: false
    PlugType:
      type: string
      enum:
        - sensor
        - actuator
        - transformer
    LatestPlugsQuery:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/PlugType'
          description: If set, filters on the type of plug.
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: >-
        Latest plug versions listing query with latest links. A request that
        only uses these query parameters will include links to the _latest_
        draft/published versions of the plug.
    LatestPlugVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        type:
          $ref: '#/components/schemas/PlugType'
          description: If set, filters on the type of plug.
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
        latest:
          type: boolean
          description: >-
            When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be
            returned. Defaults to `true`, except when specific versions are
            selected with the `nameVersion` filter.
      description: Plug versions listing query.
    TagsQuery:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
      additionalProperties: false
    TagsFilter:
      anyOf:
        - type: array
          items:
            type: string
        - type: string
    TagQuery:
      type: object
      properties:
        name:
          type: string
          description: >-
            If set, filters on the <code>name</code> of a tag. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          example: '*-demo-??'
        color:
          type: string
          description: >-
            If set, filters on the <code>color</code> of a tag. Uses an exact
            match.
          example: '#4153ea'
      additionalProperties: false
    FunctionDeleteQuery:
      type: object
      properties:
        force:
          type: boolean
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
        undeploy:
          type: boolean
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
      additionalProperties: false
    PlugDeleteForceQuery:
      type: object
      properties:
        force:
          type: boolean
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
      additionalProperties: false
    PlugDeleteQuery:
      type: object
      properties:
        force:
          type: boolean
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
        undeploy:
          type: boolean
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no
            longer available for invocation.

            * does NOT remove the plug from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the plug can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains
            active but is removed from the default listings.   This also applies
            to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
      additionalProperties: false
    AsyncQueryDefaultFalse:
      type: object
      properties:
        async:
          type: boolean
          description: >-
            If this is set to <code>true</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until
            the job actions are completed, or a timeout occurs.
          default: false
      additionalProperties: false
    AsyncQueryDefaultTrue:
      type: object
      properties:
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
      additionalProperties: false
    AsyncVerifyQuery:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: >-
            Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero
            only if it was not active before this command.
      additionalProperties: false
    UpdateComment:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    AsyncDeployQuery:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          default: false
      additionalProperties: false
    DryRunQuery:
      type: object
      properties:
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
      additionalProperties: false
    DeprecatePreviousQuery:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
      additionalProperties: false
    DeprecatePreviousPolicy:
      type: string
      enum:
        - none
        - all
        - patch
        - minor
    JobQuery:
      type: object
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        type:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
          description: Filter on job type
        state:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
          description: Filter on job state
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/FunctionType'
          description: Filter on function type
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on jobs that created before the given timestamp or age
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on jobs that created after the given timestamp or age
      additionalProperties: false
    JobTypeSchema:
      anyOf:
        - $ref: '#/components/schemas/JobTypeBuild'
        - $ref: '#/components/schemas/JobTypeDeploy'
        - $ref: '#/components/schemas/JobTypeVerify'
        - $ref: '#/components/schemas/JobTypeUndeploy'
        - $ref: '#/components/schemas/JobTypeScale'
        - $ref: '#/components/schemas/JobTypeBatch'
    JobTypeBuild:
      type: string
      description: Build
      enum:
        - build
    JobTypeDeploy:
      type: string
      description: A job that deploys a function image to the openfaas runtime.
      enum:
        - deploy
    JobTypeVerify:
      type: string
      description: A job that checks the health of a deployed function.
      enum:
        - verify
    JobTypeUndeploy:
      type: string
      description: >-
        A job that undeploys a deployed function and removes it from the
        registry.
      enum:
        - undeploy
    JobTypeScale:
      type: string
      description: A job that scales a function to a target.
      enum:
        - scale
    JobTypeBatch:
      type: string
      description: A job that groups other jobs as a parent.
      enum:
        - batch
    JobStateResult:
      anyOf:
        - $ref: '#/components/schemas/JobState'
        - $ref: '#/components/schemas/JobStateUnknown'
      description: All reported job states
    JobState:
      anyOf:
        - $ref: '#/components/schemas/JobStateFinished'
        - $ref: '#/components/schemas/JobStateActive'
        - $ref: '#/components/schemas/JobStateDelayed'
        - $ref: '#/components/schemas/JobStateWaiting'
        - $ref: '#/components/schemas/JobStateWaitingChildren'
      description: Allowed job states
    JobStateFinished:
      anyOf:
        - $ref: '#/components/schemas/JobStateCompleted'
        - $ref: '#/components/schemas/JobStateFailed'
      description: The job completed successfully or with failure.
    JobStateCompleted:
      type: string
      description: The job has completed successfully.
      enum:
        - completed
    JobStateFailed:
      type: string
      description: The job failed in execution.
      enum:
        - failed
    JobStateActive:
      type: string
      description: The job is running.
      enum:
        - active
    JobStateDelayed:
      type: string
      description: The job has been delayed for retry after a failure.
      enum:
        - delayed
    JobStateWaiting:
      type: string
      description: >-
        The job has been queued for execution, but might be waiting because of
        rate limiting.
      enum:
        - waiting
    JobStateWaitingChildren:
      type: string
      description: The job is waiting for child jobs to be completed.
      enum:
        - waiting-children
    JobStateUnknown:
      type: string
      description: The job state is unknown (undocument or inconsistent).
      enum:
        - unknown
    RuntimeNameQuery:
      type: object
      properties:
        name:
          type: string
          description: >-
            If set, filters on the <code>name</code> of a runtime. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          example: node*
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/FunctionType'
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          example: plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          example: node
      additionalProperties: false
    RuntimeVersionQuery:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: >-
            If set, filters on the level of latest versions that will be
            included in the query.

            * `major`: include at most one latest version per name and major
            release.

            * `minor`: include at most one latest version per name and minor
            release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.
          default: minor
          example: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: false
      additionalProperties: false
    LatestVersionLevel:
      type: string
      enum:
        - major
        - minor
        - patch
        - 'true'
        - 'false'
      description: Level of latest versions that should be included.
    RuntimeQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: >-
            If set, filters on the level of latest versions that will be
            included in the query.

            * `major`: include at most one latest version per name and major
            release.

            * `minor`: include at most one latest version per name and minor
            release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.
          default: minor
          example: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: false
        name:
          type: string
          description: >-
            If set, filters on the <code>name</code> of a runtime. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          example: node*
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/FunctionType'
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          example: plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          example: node
    GetRuntimeByNameQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: false
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/FunctionType'
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          example: plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          example: node
    GetRuntimeVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: >-
            If set, filters on the level of latest versions that will be
            included in the query.

            * `major`: include at most one latest version per name and major
            release.

            * `minor`: include at most one latest version per name and minor
            release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.
          default: minor
          example: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: false
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/FunctionType'
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          example: plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          example: node
    GetRuntimeByNameAndVersionQuery:
      type: object
      properties:
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: true
      additionalProperties: false
    GetRuntimeExampleQuery:
      type: object
      additionalProperties: false
      properties:
        ls:
          type: boolean
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          default: false
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the query.
          default: true
    ContentQueryV2:
      type: object
      properties:
        ls:
          type: boolean
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          default: false
      additionalProperties: false
    RuntimeParams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Runtime'
          description: The name of a <em>runtime</em>
      required:
        - name
      additionalProperties: false
    RuntimeVersionParams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Runtime'
          description: The name of a <em>runtime</em>
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: A version range for a <em>runtime</em>
      required:
        - name
        - version
      additionalProperties: false
    RuntimeVersionAndPathParams:
      type: object
      additionalProperties: false
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
        name:
          $ref: '#/components/schemas/Runtime'
          description: The name of a <em>runtime</em>
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: A version range for a <em>runtime</em>
      required:
        - '*'
        - name
        - version
    AssetPathParamsV2:
      type: object
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
      required:
        - '*'
      additionalProperties: false
    LatestPlugVersionsQueryV2:
      anyOf:
        - $ref: '#/components/schemas/LatestPlugVersionsQuery'
        - $ref: '#/components/schemas/LatestPlugsQuery'
      description: Latest plug versions listing query.
    LatestPlugVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/PlugType'
          description: If set, filters on the type of plug.
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
      description: Latest named plug version listing query
    NamedPlugVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Named plug version listing query
    KFServingLatestVersionsQueryV2:
      anyOf:
        - $ref: '#/components/schemas/LatestFunctionVersionsQuery'
        - $ref: '#/components/schemas/LatestFunctionsQuery'
      description: Latest model versions listing query.
    KFServingLatestVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
      description: Named Model latest version query.
    NamedKFServingVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Named Model versions query.
    KFServingDeleteQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        force:
          type: boolean
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
        undeploy:
          type: boolean
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
    VersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        endpoint:
          type: string
          description: >-
            Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        imageName:
          type: string
          description: >-
            Filter on the container image name. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        storageLocation:
          type: string
          description: >-
            Filter on the storageLocation. This is case-insensitive and supports
            wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Function versions paged query
    WebscriptLatestVersionsQueryV2:
      anyOf:
        - $ref: '#/components/schemas/LatestFunctionVersionsQuery'
        - $ref: '#/components/schemas/LatestFunctionsQuery'
      description: Webscript lastest versions listing query.
    WebscriptLatestVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
      description: Webscript latest named version query.
    NamedWebscriptVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Webscript named versions listing query.
    RebuildQueryV2:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, checks whether rebuild jobs are needed,
            but do not start any jobs.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        upgrade:
          $ref: '#/components/schemas/RebuildPolicy'
          description: >-
            If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b>
            version.   This should only include backward compatible upgrades. 
            </li>  <li><code>minor</code> <b>major</b> version.   This might
            include an upgrade of e.g. the language runtime and/or provided  
            dependencies that could break compatiblity with the function. .</li>
            </ul>
        forceVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: >-
            If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade`
            parameter.
        ignoreChecks:
          type: boolean
          description: >-
            If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option
        scaleToZero:
          type: boolean
          description: >-
            Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to
            zero only if it was not active before this command.
        skipRebuild:
          type: boolean
          description: >-
            If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
      additionalProperties: false
    RemovePlugQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        force:
          type: boolean
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
        undeploy:
          type: boolean
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no
            longer available for invocation.

            * does NOT remove the plug from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the plug can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains
            active but is removed from the default listings.   This also applies
            to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
    RemoveFunctionQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        force:
          type: boolean
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
        undeploy:
          type: boolean
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
    UpdateMetadataRequestV2:
      type: object
      additionalProperties: false
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: >-
            A category for this function (Deprecated: use tags to categorise
            your functions)
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this function.
          example:
            - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
    UserPlugMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: >-
            A category for this function (Deprecated: use tags to categorise
            your functions)
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this function.
          example:
            - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
      description: Plug metadata that the user can update as `metadata`
    FunctionMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: >-
            A category for this function (Deprecated: use tags to categorise
            your functions)
          deprecated: true
    Tag:
      type: object
      properties:
        name:
          type: string
          description: Name of the tag
        color:
          type: string
          description: Color associated with the tag in an UI.
      required:
        - name
        - color
      description: >-
        One or more tags can be assigned to a function entity to facilitate
        grouping and searching.
    GetContentParamsV2:
      type: object
      additionalProperties: false
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
        - '*'
        - name
        - version
    GetInvokableWebscriptQuery:
      type: object
      properties:
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, filters on the `version` of the webscript. Supports [version
            ranges](https://devhints.io/semver)
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: If set, filters on the `status` of the webscript.
          default:
            - running
            - deployed
            - unhealthy
      additionalProperties: false
    CreateFunctionQueryV2:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          default: false
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            If set, the function version will be an increment of the latest
            existing version that satisfies the `version` range. Note that this
            increment always takes precedence over an explicit `version` in the
            function manifest.
        name:
          type: string
          description: >-
            If set, the value will be used as the function name instead of the
            one specified in the manifest.
        draft:
          type: boolean
          description: >-
            If set, the created function will be a draft function and its assets
            are still mutable. A build and deploy is initiated only in the case
            when all necessary assets are present and valid.
          default: false
      additionalProperties: false
    PublishFunctionQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
    PatchMetadataQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    PatchInterfaceQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    SchemaParams:
      type: object
      properties:
        functionType:
          $ref: '#/components/schemas/FunctionType'
          description: Function type
        role:
          $ref: '#/components/schemas/AssetRole'
          description: Asset role
      required:
        - functionType
        - role
      additionalProperties: false
    AssetRole:
      type: string
      enum:
        - manifest
        - project
        - main
        - lib
        - script
        - other
      description: Classification of assets with regard to their role.
    SchemaByIdParams:
      type: object
      properties:
        schemaId:
          type: string
          description: Schema id
      required:
        - schemaId
      additionalProperties: false
    UpdateDraftQuery:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        chown:
          type: boolean
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          default: false
      required:
        - chown
      additionalProperties: false
    LatestPlugQuery:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
        type:
          $ref: '#/components/schemas/PlugType'
          description: Filter on the type of the plug.
      required:
        - type
      additionalProperties: false
    LegacyPlugQuery:
      type: object
      properties:
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
      additionalProperties: false
    LegacyPlugRequest:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          type: object
          additionalProperties: false
          properties:
            requiredProperties:
              $ref: '#/components/schemas/LegacyRequiredProperties'
            supportedStates:
              type: array
              items:
                type: string
            rawData:
              type: array
              items:
                type: object
                properties:
                  parameter:
                    type: string
                  dataType:
                    $ref: '#/components/schemas/PlugPropertyDataType'
                required:
                  - parameter
                additionalProperties: false
            configuration:
              $ref: '#/components/schemas/LegacyConfiguration'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            iconURL:
              type: string
            friendlyName:
              type: string
            documentation:
              anyOf:
                - type: object
                  properties:
                    supportedStates:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                    configuration:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                    rawData:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                  additionalProperties: false
                - $ref: '#/components/schemas/Documentation'
            documentationURL:
              type: string
        type:
          $ref: '#/components/schemas/PlugType'
      required:
        - metadata
        - name
        - script
        - type
        - version
      additionalProperties: false
    LegacyPlugDependencies:
      type: object
      additionalProperties:
        type: string
    LegacyPlugMetaRequest:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        iconURL:
          type: string
        friendlyName:
          type: string
        documentation:
          anyOf:
            - type: object
              properties:
                supportedStates:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                configuration:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                rawData:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
              additionalProperties: false
            - $ref: '#/components/schemas/Documentation'
        documentationURL:
          type: string
      additionalProperties: false
    LegacyFunctionMeta:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        iconURL:
          type: string
        friendlyName:
          type: string
    DocumentationProperty:
      type: object
      properties:
        name:
          type: string
          description: Name of the documented property.
        description:
          type: string
          description: Documentation of the property.
      required:
        - name
        - description
    Documentation:
      type: object
      properties:
        description:
          type: string
        states:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
          description: Documentation of the plug states.
        input:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
          description: Documentation of the plug input parameters.
        output:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
          description: Documentation of the plug response parameters.
    PlugPropertyDataType:
      type: string
      enum:
        - string
        - integer
        - long
        - float
        - double
        - boolean
        - object
      description: Datatype supported in plug input or output properties.
    LegacyConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/LegacyConfigurationObject'
    LegacyConfigurationObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/PlugPropertyDataType'
        mandatory:
          type: boolean
        format:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/PlugPropertyFormatType'
            values:
              type: array
              items:
                $ref: '#/components/schemas/EnumValue'
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
      required:
        - name
        - type
    PlugPropertyFormatType:
      type: string
      enum:
        - enum
        - resource
        - vault
        - duration
        - code
        - url
        - date
        - template
      description: Value domain for a plug input or output property.
    EnumValue: {}
    DefaultValue: {}
    LegacyRequiredProperties:
      type: array
      items:
        anyOf:
          - type: string
          - $ref: '#/components/schemas/LegacyRequiredPropertyObject'
    LegacyRequiredPropertyObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/PlugPropertyDataType'
        mandatory:
          type: boolean
        sensitive:
          type: boolean
      required:
        - name
        - type
        - mandatory
        - sensitive
    LegacyPlugCreateRequest:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          type: object
          additionalProperties: false
          properties:
            requiredProperties:
              $ref: '#/components/schemas/LegacyRequiredProperties'
            supportedStates:
              type: array
              items:
                type: string
            rawData:
              type: array
              items:
                type: object
                properties:
                  parameter:
                    type: string
                  dataType:
                    $ref: '#/components/schemas/PlugPropertyDataType'
                required:
                  - parameter
                additionalProperties: false
            configuration:
              $ref: '#/components/schemas/LegacyConfiguration'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            iconURL:
              type: string
            friendlyName:
              type: string
            documentation:
              anyOf:
                - type: object
                  properties:
                    supportedStates:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                    configuration:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                    rawData:
                      type: array
                      items:
                        $ref: '#/components/schemas/DocumentationProperty'
                  additionalProperties: false
                - $ref: '#/components/schemas/Documentation'
            documentationURL:
              type: string
        type:
          $ref: '#/components/schemas/PlugType'
      additionalProperties: false
      required:
        - metadata
        - name
        - script
        - version
    NamedParameters_typeof_isNotLegacy_:
      type: object
      properties:
        documentation:
          anyOf:
            - type: object
              properties:
                supportedStates:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                configuration:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                rawData:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
              additionalProperties: false
            - $ref: '#/components/schemas/Documentation'
      additionalProperties: false
    NamedParameters_typeof_fromLegacyDocumentation_:
      type: object
      properties:
        legacyDocumentation:
          anyOf:
            - type: object
              properties:
                supportedStates:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                configuration:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
                rawData:
                  type: array
                  items:
                    $ref: '#/components/schemas/DocumentationProperty'
              additionalProperties: false
            - $ref: '#/components/schemas/Documentation'
        currentInterface:
          $ref: '#/components/schemas/PlugInterface'
      additionalProperties: false
    PlugInterface:
      type: object
      properties:
        states:
          type: array
          items:
            type: string
          description: The states of a plug as implemented in the plug code.
        input:
          type: array
          items:
            $ref: '#/components/schemas/PlugProperty'
          description: The named input parameters of a plug
        output:
          type: array
          items:
            $ref: '#/components/schemas/PlugProperty'
          description: The named output parameters of a plug
    PlugProperty:
      type: object
      properties:
        name:
          type: string
          description: The name of a plug input or output property.
        dataType:
          $ref: '#/components/schemas/PlugPropertyDataType'
          description: The datatype of the property
        mandatory:
          type: boolean
          description: If <code>true</code> this property is required.
          example: true
        format:
          $ref: '#/components/schemas/PlugPropertyFormat'
          description: If present, refines the value domain of the property.
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
          description: Default value assumed to be used when no value is given.
      required:
        - name
      description: Interface specification of a plug property.
    PlugPropertyFormat:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PlugPropertyFormatType'
          description: The value domain type for a plug property.
          example: enum
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnumValue'
          description: The enumerated value domain when <code>type="enum"</code>
          example:
            - low
            - high
    NamedParameters_typeof_fromLegacy_:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/LegacyPlugMetaRequest'
        currentInterface:
          $ref: '#/components/schemas/PlugInterface'
      required:
        - metadata
      additionalProperties: false
    LegacyDocumentationRequest:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
        supportedStates:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
        rawData:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
      required:
        - configuration
        - rawData
        - supportedStates
    LegacyDocumentation:
      type: object
      properties:
        supportedStates:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
        rawData:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationProperty'
      required:
        - supportedStates
        - configuration
        - rawData
    LegacyDebugPlugRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PlugType'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
      required:
        - script
      additionalProperties: false
    LegacyDebugPlugManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        tenant:
          $ref: '#/components/schemas/TenantId'
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        script:
          type: string
      required:
        - metadata
        - name
        - runtime
        - script
        - tenant
        - version
      additionalProperties: false
    FunctionManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
      required:
        - metadata
        - name
        - runtime
        - version
    FunctionSpec:
      type: object
      properties:
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
      required:
        - name
        - runtime
        - version
    FunctionNameVersion:
      type: object
      properties:
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
      required:
        - name
        - version
    FunctionDeployOverrides:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
    FunctionDeployOverridesType:
      type: object
      properties:
        envVars:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        limits:
          $ref: '#/components/schemas/ResourceLimits'
        requests:
          $ref: '#/components/schemas/ResourceLimits'
    ResourceLimits:
      type: object
      properties:
        memory:
          type: string
        cpu:
          type: string
      required:
        - memory
        - cpu
    TenantId:
      type: string
    LegacyPlugCreateQuery:
      type: object
      properties:
        async:
          type: boolean
          description: >-
            If this is set to <code>true</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until
            the job actions are completed, or a timeout occurs.
          default: false
        dryRun:
          type: boolean
          description: If set to <code>true</true>, only validates the incoming request.
        scaleToZero:
          type: boolean
          description: >-
            If set to <code>true</true>, scales the function to zero after
            successful deployment.
      additionalProperties: false
    KFServingLatestVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Model listing query
    KFServingVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Named model versions query
    KFServingDeleteQueryV1:
      type: object
      additionalProperties: false
      properties:
        async:
          type: boolean
          description: >-
            If this is set to <code>true</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until
            the job actions are completed, or a timeout occurs.
          default: false
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
    WebscriptLatestVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
        includeDeprecated:
          type: boolean
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
        version:
          type: string
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/StatusFilter'
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          example: '@me'
        updatedBy:
          type: string
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          example: '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
        name:
          type: string
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
          description: Filter on the runtime of the function.
      description: Webscript lastest versions listing query
    ForceDeleteQueryV1:
      type: object
      additionalProperties: false
      properties:
        async:
          type: boolean
          description: >-
            If this is set to <code>true</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until
            the job actions are completed, or a timeout occurs.
          default: false
        force:
          type: boolean
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
    UpdateMetadataRequestV1:
      type: object
      additionalProperties: false
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: >-
            A category for this function (Deprecated: use tags to categorise
            your functions)
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this function.
          example:
            - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
    PatchPlugRequestV1:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/UserPlugMeta'
      required:
        - metadata
      additionalProperties: false
    VerifyQueryV1:
      type: object
      properties:
        scaleToZero:
          type: boolean
          description: >-
            Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero
            only if it was not active before this command.
      additionalProperties: false
    AsyncDeployQueryV1:
      type: object
      additionalProperties: false
      properties:
        scaleToZero:
          type: boolean
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          default: false
        async:
          type: boolean
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          default: true
        dryRun:
          type: boolean
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    Operation:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        name:
          type: string
          deprecated: true
        type:
          $ref: '#/components/schemas/JobType'
      required:
        - id
        - description
        - name
        - type
    OperationStatus:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        name:
          type: string
          deprecated: true
        type:
          $ref: '#/components/schemas/JobType'
        done:
          type: boolean
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
            stack:
              type: string
            code:
              type: string
          required:
            - code
            - message
            - name
      required:
        - description
        - done
        - id
        - name
        - type
    JobSubmittedResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
      required:
        - _links
        - message
    JobHALLinks:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/HALLink'
          description: Link to an SSE stream of job events for the submitted job(s).
          example:
            href: >-
              https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
        job:
          $ref: '#/components/schemas/HALLink'
          description: Link to the job status page for the related entity.
          example:
            href: >-
              https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
      description: HAL links to related actions.
    JobStatusHALLink:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/HALLink'
          description: Link to the job status page for the related entity.
          example:
            href: >-
              https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
      description: HAL links to related actions.
    HALLink:
      type: object
      properties:
        href:
          type: string
      required:
        - href
    JobEventsHALLink:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/HALLink'
          description: Link to an SSE stream of job events for the submitted job(s).
          example:
            href: >-
              https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
      description: HAL links to related actions.
    RebuildSubmittedResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
      required:
        - _links
        - causes
        - message
      description: Rebuild Initiated
    JobCauses:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/JobCause'
        deploy:
          $ref: '#/components/schemas/JobCause'
        verify:
          $ref: '#/components/schemas/JobCause'
        undeploy:
          $ref: '#/components/schemas/JobCause'
        scale:
          $ref: '#/components/schemas/JobCause'
      description: >-
        The motivations for including or excluding a job in response to a
        <em>rebuild</em> request.
    JobCause:
      type: object
      properties:
        changed:
          type: boolean
          description: >-
            If <code>true</code>, the argument configuration for this job has
            changed in comparison to the previous job execution. A
            <code>false</code> will prevent the job to be run. Use
            <code>forceVersion</code> or <code>upgrade</code> parameter to force
            a rebuild.
        reason:
          type: string
          description: Human readable message describing the cause.
        backoff:
          type: boolean
          description: >-
            If <code>true</code>, recent failures of the job prevented the
            re-execution. Use <code>forceVersion</code> or <code>upgrade</code>
            parameter to force a rebuild.
        newValue:
          type: string
          description: The new configuration value that causes the change.
        oldValue:
          type: string
          description: The old configuration value used by the last succeeded job.
      required:
        - changed
        - reason
      description: >-
        The motivation for including or excluding a job (<em>build</em>,
        <em>deploy</em>, <em>verify</em>, ...) in response to a <em>rebuild</em>
        request.
    RebuildComputedResponse:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
      required:
        - causes
        - message
      description: Rebuild Ignored
    RootPageResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the service.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: Semantic version of the service.
        enabled:
          type: object
          description: Description of the features enabled on this service deployment.
        revision:
          type: string
          description: Revision of the service source code.
      required:
        - name
        - version
        - enabled
        - revision
      description: Status Page
    PlugHtmlResponse:
      type: string
      description: Successful Response
    RuntimeSummaryAttrs:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Runtime'
        title:
          type: string
        description:
          type: string
        functionType:
          $ref: '#/components/schemas/FunctionType'
        archiveFormat:
          $ref: '#/components/schemas/ArchiveFormat'
      required:
        - name
        - title
        - functionType
        - archiveFormat
    RuntimeSummary:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Runtime'
        title:
          type: string
        description:
          type: string
        functionType:
          $ref: '#/components/schemas/FunctionType'
        archiveFormat:
          $ref: '#/components/schemas/ArchiveFormat'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeVersionInfo'
      required:
        - archiveFormat
        - functionType
        - name
        - title
        - versions
      description: A summary representation of the runtime, and (selected) versions of it.
    RuntimeVersionInfo:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: >-
            If true, a newer runtime for this function is available using the
            `rebuild` API.
        version:
          $ref: '#/components/schemas/SemanticVersion'
        title:
          type: string
        description:
          type: string
      required:
        - deprecated
        - title
        - upgradable
        - version
      description: A summary of a selected version for a runtime
    RuntimeVersionStatus:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: >-
            If true, a newer runtime for this function is available using the
            `rebuild` API.
      required:
        - deprecated
        - upgradable
    RuntimeVersionSummary:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: >-
            If true, a newer runtime for this function is available using the
            `rebuild` API.
        version:
          $ref: '#/components/schemas/SemanticVersion'
        title:
          type: string
        description:
          type: string
        name:
          $ref: '#/components/schemas/Runtime'
        functionType:
          $ref: '#/components/schemas/FunctionType'
        archiveFormat:
          $ref: '#/components/schemas/ArchiveFormat'
      required:
        - archiveFormat
        - deprecated
        - functionType
        - name
        - title
        - upgradable
        - version
    RuntimeSummaryResponse:
      type: object
      properties:
        runtimes:
          type: array
          items:
            $ref: '#/components/schemas/RuntimeSummary'
      required:
        - runtimes
      description: Runtimes Found
    RuntimeVersionResponse:
      type: object
      properties:
        runtime:
          $ref: '#/components/schemas/CompiledRuntimeVersion'
      required:
        - runtime
      description: ': Runtime Version Found'
    CompiledRuntimeVersion:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
        upgradable:
          type: boolean
          description: >-
            If true, a newer runtime for this function is available using the
            `rebuild` API.
        name:
          type: string
        functionType:
          $ref: '#/components/schemas/FunctionType'
        archiveFormat:
          $ref: '#/components/schemas/ArchiveFormat'
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        title:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
      required:
        - archiveFormat
        - deprecated
        - functionType
        - name
        - title
        - upgradable
        - version
      description: >-
        Compiled build and deployment information for a runtime version.
        Contains all defaults applied on the _global_, _functionType_,
        _archiveFormat_, _runtime_ and _runtime version_ level.
    RuntimeVersionSpecification:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
        title:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
      required:
        - title
        - version
    RuntimeSpecification:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
      description: |-
        Runtime (version) specification that says
        * what assets are required/allowed to build the function
        * what build parameters are used
        * what deployment parameters are used
        * which dependencies are provided by the runtime
    BuildSpec:
      type: object
      properties:
        context:
          type: string
        args:
          type: object
          additionalProperties:
            type: string
      required:
        - context
        - args
    DeploySpec:
      type: object
      properties:
        openfaasSpec:
          type: object
          properties:
            service:
              type: string
            image:
              type: string
            namespace:
              type: string
            envProcess:
              type: string
            network:
              type: string
            envVars:
              type: object
              additionalProperties:
                type: string
            constraints:
              type: array
              items:
                type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            secrets:
              type: array
              items:
                type: string
            registryAuth:
              type: string
            limits:
              $ref: '#/components/schemas/ResourceLimits'
            requests:
              $ref: '#/components/schemas/ResourceLimits'
            readOnlyRootFilesystem:
              type: boolean
          description: >-
            If specified, it overrides the properties in `default`.
            Non-specified properties are taken from `default`
    LanguageRelease:
      type: object
      properties:
        name:
          type: string
          description: Short technical name of the language or framework used.
        version:
          type: string
          description: Release version of the language or framework.
        title:
          type: string
          description: Display title.
        description:
          type: string
      required:
        - name
        - version
        - title
      description: >-
        Description of the language or framework release used by a runtime
        (version).
    ProvidedDependency:
      type: object
      properties:
        name:
          type: string
          description: Name of a provided dependency.
        title:
          type: string
          description: Optional display title.
        description:
          type: string
          description: Optional description.
        version:
          type: string
          description: Versions specification of a provided dependency
        deprecated:
          type: boolean
          description: >-
            If true, this provided dependency is scheduled for removal (or
            incompatible upgrade) in a next runtime version.
          default: false
        removed:
          type: boolean
          description: If true, this dependency has been removed from the runtime (version)
          default: false
        globals:
          type: array
          items:
            type: string
          description: >-
            Global variables that expose this library to the user code. As the
            usage of these globals is deprecated, any usage of such global will
            pose issues in an next runtime version.
        native:
          type: boolean
          description: >-
            If true, the library is provided natively by the runtime: e.g. node
            for javascript.
      required:
        - name
      description: Library dependency that is provided by this runtime.
    AssetsConditions:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/AssetCondition'
          description: >-
            All files in a function archive are checked against these
            conditions. A file that is not matched is ignored.
        maxSize:
          type: string
          description: The maximum size of the archive (in bytes, unless unit is provided)
      description: Describes the assets that are required/allowed/supported for a function.
    AssetCondition:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/AssetRole'
          description: Role in the function deployment
        pattern:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          description: Pattern that selects a file in a function archive
        contentType:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          description: Allowed content type(s) of matching files.
        min:
          type: number
          description: >-
            The minimal number of files that must match this pattern. Use `0`
            for an optional file.
          example: 0
        max:
          type: number
          description: >-
            The maximal number of files that can match this pattern. Use `0` for
            a disallowed file. This condition only raises an error if there are
            no other conditions that
          example: 1
        maxSize:
          type: string
          description: >-
            The maximum size for each file matching this pattern (in bytes,
            unless unit is provided)
        schema:
          description: >-
            The json schema validator that applies (in case of
            `application/json` entries).
      required:
        - role
        - pattern
      description: Describes conditions on the set of files that match a file pattern.
    RuntimeInfo:
      type: object
      properties:
        name:
          type: string
        functionType:
          $ref: '#/components/schemas/FunctionType'
        archiveFormat:
          $ref: '#/components/schemas/ArchiveFormat'
      required:
        - name
        - functionType
        - archiveFormat
      description: Runtime attributes that are the same for all versions of a runtime.
    PlugResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
          description: >-
            The audit logs corresponding to the latest modifying operations on
            this entity.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        runtime:
          $ref: '#/components/schemas/RuntimeAttributes'
          description: >-
            Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: >-
            If <code>true</code> this plug is removed from regular listings, as
            a result of a <code>DELETE</code> with <code>force=false</code>.
        draft:
          type: boolean
          description: >-
            If <code>true</code> this function is a draft function and it's
            assets are still mutable.
        plug:
          $ref: '#/components/schemas/PlugManifest'
          description: >-
            The plug specification as provided by the <code>plug.json</code>
            asset.
      required:
        - createdAt
        - createdBy
        - deprecated
        - draft
        - plug
        - runtime
        - status
        - updatedAt
        - updatedBy
        - updates
    WithEntityAttributes:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
          description: >-
            The audit logs corresponding to the latest modifying operations on
            this entity.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        runtime:
          $ref: '#/components/schemas/RuntimeAttributes'
          description: >-
            Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: >-
            If <code>true</code> this function is deprecated and removed from
            regular listings.
        draft:
          type: boolean
          description: >-
            If <code>true</code> this function is a draft function and it's
            assets are still mutable.
      required:
        - createdBy
        - createdAt
        - updatedBy
        - updatedAt
        - updates
        - status
        - runtime
        - deprecated
        - draft
    UpdateRecord:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        operation:
          $ref: '#/components/schemas/RequestOperation'
          description: The type of modifying operation.
        jobs:
          type: array
          items:
            type: string
          description: The job id's of the corresponding jobs, if applicable.
        at:
          type: string
          format: date-time
        by:
          type: string
          description: The user that initiated this operation.
      required:
        - at
        - by
        - operation
      description: >-
        An update report corresponding to a modifying operation initiated by a
        user/administrator on the entity.
    RequestOperation:
      type: string
      enum:
        - create
        - metadata-update
        - assets-update
        - rebuild
        - verify
        - publish
        - deprecate
        - undeploy
      description: A modifying operation on the function.
    Status:
      type: string
      enum:
        - registered
        - running
        - pending
        - deployed
        - unhealthy
        - killed
        - failed
        - undeploying
        - undeployed
      description: Status for a deployed function.
    FailureReason:
      type: object
      properties:
        log:
          type: array
          items:
            type: string
          description: Log lines associated with this failure.
        events:
          type: array
          items:
            type: string
          description: Events associated with this failure.
        cause:
          type: string
          description: Main cause for the failure.
      required:
        - log
        - events
    RuntimeAttributes:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: >-
            If true, a newer runtime for this function is available using the
            `rebuild` API.
        name:
          $ref: '#/components/schemas/Runtime'
          description: The name of a runtime
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of a runtime
      required:
        - deprecated
        - name
        - upgradable
        - version
    RuntimeReference:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Runtime'
          description: The name of a runtime
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of a runtime
      required:
        - name
        - version
      description: Reference to a runtime version.
    PlugManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/PlugMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be patched for the deployed plug, as long it does not
            affect the runtime behaviour.
        type:
          $ref: '#/components/schemas/PlugType'
          description: Type of the plug.
        interface:
          $ref: '#/components/schemas/PlugInterface'
          description: >-
            Description of the user interface of the plug, as visible to
            end-users when configuring plug nodes in the rule engine.
      required:
        - interface
        - metadata
        - name
        - runtime
        - type
        - version
    PlugMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: >-
            A category for this function (Deprecated: use tags to categorise
            your functions)
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this function.
          example:
            - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
        documentation:
          $ref: '#/components/schemas/Documentation'
          description: Documentation of the plug interface.
    KfservingResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
          description: >-
            The audit logs corresponding to the latest modifying operations on
            this entity.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        runtime:
          $ref: '#/components/schemas/RuntimeAttributes'
          description: >-
            Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: >-
            If <code>true</code> this function is deprecated and removed from
            regular listings.
        draft:
          type: boolean
          description: >-
            If <code>true</code> this function is a draft function and it's
            assets are still mutable.
        model:
          $ref: '#/components/schemas/KFServingManifest'
          description: >-
            The model specification as provided by the <code>model.json</code>
            asset.
      required:
        - createdAt
        - createdBy
        - deprecated
        - draft
        - model
        - runtime
        - status
        - updatedAt
        - updatedBy
        - updates
    KFServingManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
      required:
        - metadata
        - name
        - runtime
        - version
    WebscriptResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
          description: >-
            The audit logs corresponding to the latest modifying operations on
            this entity.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        runtime:
          $ref: '#/components/schemas/RuntimeAttributes'
          description: >-
            Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: >-
            If <code>true</code> this function is deprecated and removed from
            regular listings.
        draft:
          type: boolean
          description: >-
            If <code>true</code> this function is a draft function and it's
            assets are still mutable.
        webscript:
          $ref: '#/components/schemas/WebscriptManifest'
          description: >-
            The webscript specification as provided by the
            <code>webscript.json</code> asset.
        secret:
          type: string
          description: >-
            The secret for this webscript deployment. This is <code>null</code>
            when <code>allowHmac=false</code> in the webscript specificaton.
      required:
        - createdAt
        - createdBy
        - deprecated
        - draft
        - runtime
        - status
        - updatedAt
        - updatedBy
        - updates
        - webscript
    WebscriptManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        private:
          type: boolean
          description: If <code>true</code> this webscript will require authentication.
        allowHmac:
          type: boolean
          description: >-
            If <code>true</code> this webscript will support authentication with
            a <em>HMAC</em> key, available as the <code>secret</code> attribute
            of the deployed webscript entity.
      required:
        - allowHmac
        - metadata
        - name
        - private
        - runtime
        - version
    WebscriptResponseWithInvokeLinkV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
          description: >-
            The audit logs corresponding to the latest modifying operations on
            this entity.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        runtime:
          $ref: '#/components/schemas/RuntimeAttributes'
          description: >-
            Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: >-
            If <code>true</code> this function is deprecated and removed from
            regular listings.
        draft:
          type: boolean
          description: >-
            If <code>true</code> this function is a draft function and it's
            assets are still mutable.
        webscript:
          $ref: '#/components/schemas/WebscriptManifest'
          description: >-
            The webscript specification as provided by the
            <code>webscript.json</code> asset.
        secret:
          type: string
          description: >-
            The secret for this webscript deployment. This is <code>null</code>
            when <code>allowHmac=false</code> in the webscript specificaton.
        _links:
          $ref: '#/components/schemas/InvokeHALLink'
          description: HAL links to related actions.
      required:
        - createdAt
        - createdBy
        - deprecated
        - draft
        - runtime
        - status
        - updatedAt
        - updatedBy
        - updates
        - webscript
    InvokeHALLink:
      type: object
      properties:
        invoke:
          $ref: '#/components/schemas/HALLink'
          description: HAL link to the endpoint where the webscript is exposed.
          example:
            href: https://api-aws-dev.waylay.io/functions/v1/<TENANT>/myWebscript
    UndeploySubmittedResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SemanticVersion'
          description: The versions for which undeployment and/or removal is initiated.
      required:
        - _links
        - message
        - versions
      description: Undeployment Initiated
    UndeployedResponseV2:
      type: object
      properties:
        message:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SemanticVersion'
          description: The versions that where deprecated, undeployed and/or removed.
      required:
        - message
        - versions
      description: Undeployed
    ContentValidationListing:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetSummaryWithHALLink'
      required:
        - assets
      description: Content listing
    AssetSummaryWithHALLink:
      type: object
      properties:
        _links:
          type: object
          properties:
            asset:
              $ref: '#/components/schemas/HALLink'
              description: Link to the asset content page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/plugs/myPlug/versions/1.0.0/content/index.js
          required:
            - asset
          description: HAL links to the asset
        name:
          type: string
          description: File name
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/AssetRole'
      required:
        - _links
        - name
    AssetSummary:
      type: object
      properties:
        name:
          type: string
          description: File name
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/AssetRole'
      required:
        - name
    WithAssetHALLink:
      type: object
      properties:
        _links:
          type: object
          properties:
            asset:
              $ref: '#/components/schemas/HALLink'
              description: Link to the asset content page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/plugs/myPlug/versions/1.0.0/content/index.js
          required:
            - asset
          description: HAL links to the asset
      required:
        - _links
    GetPlugResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            draft:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                    - true
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
                - deprecated
                - draft
                - href
                - version
              description: Link to the lastest draft version.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.0.1
                draft: true
                deprecated: false
            published:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                    - false
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
                - deprecated
                - draft
                - href
                - version
              description: Link to the lastest published version.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.2.0
                draft: false
                deprecated: false
            jobs:
              $ref: '#/components/schemas/HALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related jobs and plugs
      required:
        - _links
        - entity
      description: Plug Found
    JobsHALLink:
      type: object
      properties:
        jobs:
          $ref: '#/components/schemas/HALLink'
          description: HAL link to all active jobs for this function (if any)
    AltVersionHALLink:
      type: object
      properties:
        draft:
          type: object
          properties:
            draft:
              type: boolean
              enum:
                - true
            href:
              type: string
            version:
              type: string
            deprecated:
              type: boolean
          required:
            - deprecated
            - draft
            - href
            - version
          description: Link to the lastest draft version.
          example:
            href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
            version: 1.0.1
            draft: true
            deprecated: false
        published:
          type: object
          properties:
            draft:
              type: boolean
              enum:
                - false
            href:
              type: string
            version:
              type: string
            deprecated:
              type: boolean
          required:
            - deprecated
            - draft
            - href
            - version
          description: Link to the lastest published version.
          example:
            href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
            version: 1.2.0
            draft: false
            deprecated: false
    LatestPlugsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/AltVersionHALLink'
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateRecord'
                description: >-
                  The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/Status'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: >-
                  A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/RuntimeAttributes'
                description: >-
                  Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: >-
                  If <code>true</code> this plug is removed from regular
                  listings, as a result of a <code>DELETE</code> with
                  <code>force=false</code>.
              draft:
                type: boolean
                description: >-
                  If <code>true</code> this function is a draft function and
                  it's assets are still mutable.
              plug:
                $ref: '#/components/schemas/PlugManifest'
                description: >-
                  The plug specification as provided by the
                  <code>plug.json</code> asset.
            required:
              - _links
              - createdAt
              - createdBy
              - deprecated
              - draft
              - plug
              - runtime
              - status
              - updatedAt
              - updatedBy
              - updates
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Plugs Found
    WithPaging:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
      required:
        - count
    WithLimit:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
    PlugVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/PlugResponseV2'
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Plugs Versions Found
    PostPlugJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was initiated.
      required:
        - _links
        - entity
        - message
      description: Plug Deployment Initiated
    PostPlugJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
      required:
        - entity
        - message
      description: Plug Deployed
    RebuildPlugAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild jobs were initiated.
      required:
        - _links
        - causes
        - entity
        - message
      description: Plug Rebuild Initiated
    RebuildPlugSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild status is computed.
      required:
        - causes
        - entity
        - message
      description: Plug Rebuild Ignored
    VerifyPlugSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/PlugResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
        result:
          $ref: '#/components/schemas/VerifyResult'
      required:
        - entity
        - message
        - result
      description: Plug Health Verified
    VerifyResult:
      type: object
      properties:
        healthy:
          type: boolean
          description: If true, the deployment check succeeded.
        replicas:
          type: number
          description: >-
            The number of replicas this function was running at the time of the
            check.
      required:
        - healthy
      description: The result data for a completed verification job.
    JobsForPlugResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: >-
            Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was
            archived on the entity.
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            plug:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
        - function
        - jobs
      description: Plug Jobs Found
    AnyJobForFunction:
      anyOf:
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              type: string
              description: The type of the background task.
              enum:
                - build
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              $ref: '#/components/schemas/BuildArgs'
              description: The request that initiated this job.
            result:
              $ref: '#/components/schemas/BuildResult'
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
          title: Build
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              type: string
              description: The type of the background task.
              enum:
                - deploy
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              $ref: '#/components/schemas/DeployArgs'
              description: The request that initiated this job.
            result:
              $ref: '#/components/schemas/DeployResult'
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
          title: Deploy
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              type: string
              description: The type of the background task.
              enum:
                - verify
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              $ref: '#/components/schemas/VerifyArgs'
              description: The request that initiated this job.
            result:
              $ref: '#/components/schemas/VerifyResult'
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
          title: Verify
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              type: string
              description: The type of the background task.
              enum:
                - undeploy
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              $ref: '#/components/schemas/UndeployArgs'
              description: The request that initiated this job.
            result:
              $ref: '#/components/schemas/UndeployResult'
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
          title: Undeploy
        - type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              type: string
              description: The type of the background task.
              enum:
                - scale
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              $ref: '#/components/schemas/ScaleArgs'
              description: The request that initiated this job.
            result:
              $ref: '#/components/schemas/ScaleResult'
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
          title: Scale
    BuildArgs:
      type: object
      properties:
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        storageLocation:
          type: string
          description: Location of the function assets.
        imageName:
          type: string
          description: Provided (or defaulted) image name to publish the function image.
        args:
          type: object
          additionalProperties:
            type: string
          description: Parameters to the runtime configuration.
      required:
        - args
        - imageName
        - runtimeName
        - runtimeVersion
        - storageLocation
      description: Input arguments to a job that builds a function.
    FunctionJobArgs:
      type: object
      properties:
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
      required:
        - runtimeName
        - runtimeVersion
      description: Job arguments shared by all function jobs
    BuildResult:
      type: object
      properties:
        digest:
          type: string
          description: SHA digest of the built image.
        log:
          type: array
          items:
            type: string
          description: Detailed logs of the build steps.
        status:
          type: string
          description: Outcome of the build.
      required:
        - digest
    FunctionRef:
      type: object
      properties:
        functionType:
          $ref: '#/components/schemas/FunctionType'
          description: Function type
        name:
          type: string
          description: The logical name for the function.
        version:
          type: string
          description: The semantic version of the function (all versions if undefined)
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: Runtime id
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Runtime version
      required:
        - functionType
        - name
    JobStatus:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        progress:
          anyOf:
            - type: number
            - type: object
        attemptsMade:
          type: number
        finishedOn:
          type: string
          format: date-time
        processedOn:
          type: string
          format: date-time
        failedReason:
          type: string
        parent:
          $ref: '#/components/schemas/ParentKeys'
        delay:
          type: number
      required:
        - id
        - name
        - progress
        - attemptsMade
    ParentKeys:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    DeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        imageName:
          type: string
          description: The image name to use for deploying this function
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        deploySpecOverrides:
          type: object
          properties:
            service:
              type: string
            image:
              type: string
            namespace:
              type: string
            envProcess:
              type: string
            network:
              type: string
            envVars:
              type: object
              additionalProperties:
                type: string
            constraints:
              type: array
              items:
                type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            secrets:
              type: array
              items:
                type: string
            registryAuth:
              type: string
            limits:
              $ref: '#/components/schemas/ResourceLimits'
            requests:
              $ref: '#/components/schemas/ResourceLimits'
            readOnlyRootFilesystem:
              type: boolean
          description: Overrides on the deployment specification.
      required:
        - deploySpecOverrides
        - endpoint
        - imageName
        - namespace
        - runtimeName
        - runtimeVersion
      description: Input argument to an (openfaas) deployment job for a function.
    OpenfaasDeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        imageName:
          type: string
          description: The image name to use for deploying this function
      required:
        - endpoint
        - imageName
        - namespace
    OpenfaasFunctionRef:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
      required:
        - namespace
        - endpoint
    DeployResult:
      type: object
      properties:
        deploySpec:
          $ref: '#/components/schemas/ExposedOpenfaasDeploySpec'
          description: The deployment parameters used for this function deployment.
      required:
        - deploySpec
      description: The result data for a completed deployment job.
    ExposedOpenfaasDeploySpec:
      type: object
      properties:
        service:
          type: string
        image:
          type: string
        namespace:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        limits:
          $ref: '#/components/schemas/ResourceLimits'
        requests:
          $ref: '#/components/schemas/ResourceLimits'
      required:
        - image
        - namespace
        - service
    VerifyArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
      required:
        - endpoint
        - namespace
        - runtimeName
        - runtimeVersion
      description: Input arguments for an (openfaas) deployment verification job.
    UndeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        isNativePlug:
          type: boolean
          description: If true, the function is not expected to be deployed on openfaas.
        deleteEntity:
          type: boolean
      required:
        - deleteEntity
        - endpoint
        - isNativePlug
        - namespace
        - runtimeName
        - runtimeVersion
      description: Input argument to an (openfaas) undeployment job for a function.
    UndeployResult:
      type: object
      properties:
        deployment:
          type: boolean
        assets:
          type: boolean
        registration:
          type: boolean
      required:
        - deployment
        - assets
        - registration
      description: The result data for a completed undeployment job.
    ScaleArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/Runtime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        replicas:
          type: number
          description: Number of target replicas
      required:
        - endpoint
        - namespace
        - replicas
        - runtimeName
        - runtimeVersion
      description: Input argument to an (openfaas) scale job for a function.
    ScaleResult:
      type: object
      description: The result data for a completed scale job.
    GetModelResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            draft:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                    - true
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
                - deprecated
                - draft
                - href
                - version
              description: Link to the lastest draft version.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.0.1
                draft: true
                deprecated: false
            published:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                    - false
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
                - deprecated
                - draft
                - href
                - version
              description: Link to the lastest published version.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.2.0
                draft: false
                deprecated: false
            jobs:
              $ref: '#/components/schemas/HALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related jobs and plugs
      required:
        - _links
        - entity
      description: Model Found
    LatestModelsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/AltVersionHALLink'
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateRecord'
                description: >-
                  The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/Status'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: >-
                  A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/RuntimeAttributes'
                description: >-
                  Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: >-
                  If <code>true</code> this function is deprecated and removed
                  from regular listings.
              draft:
                type: boolean
                description: >-
                  If <code>true</code> this function is a draft function and
                  it's assets are still mutable.
              model:
                $ref: '#/components/schemas/KFServingManifest'
                description: >-
                  The model specification as provided by the
                  <code>model.json</code> asset.
            required:
              - _links
              - createdAt
              - createdBy
              - deprecated
              - draft
              - model
              - runtime
              - status
              - updatedAt
              - updatedBy
              - updates
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Models Found
    ModelVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/KfservingResponseV2'
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Model Versions Found
    PostModelJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was initiated.
      required:
        - _links
        - entity
        - message
      description: Model Deployment Initiated
    PostModelJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
      required:
        - entity
        - message
      description: Model Deployed
    RebuildModelAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild jobs were initiated.
      required:
        - _links
        - causes
        - entity
        - message
      description: Model Rebuild Initiated
    RebuildModelSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild status is computed.
      required:
        - causes
        - entity
        - message
      description: Model Rebuild Ignored
    VerifyModelSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/KfservingResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
        result:
          $ref: '#/components/schemas/VerifyResult'
      required:
        - entity
        - message
        - result
      description: Model Health Verified
    JobsForModelResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: >-
            Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was
            archived on the entity.
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            model:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
        - function
        - jobs
      description: Model Jobs Found
    GetWebscriptResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            invoke:
              $ref: '#/components/schemas/HALLink'
              description: HAL link to the endpoint where the webscript is exposed.
              example:
                href: >-
                  https://api-aws-dev.waylay.io/functions/v1/<TENANT>/myWebscript
            jobs:
              $ref: '#/components/schemas/HALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related actions.
      required:
        - _links
        - entity
      description: Webscript Found
    LatestWebscriptsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/InvokeHALLink'
                description: HAL links to related actions.
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateRecord'
                description: >-
                  The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/Status'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: >-
                  A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/RuntimeAttributes'
                description: >-
                  Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: >-
                  If <code>true</code> this function is deprecated and removed
                  from regular listings.
              draft:
                type: boolean
                description: >-
                  If <code>true</code> this function is a draft function and
                  it's assets are still mutable.
              webscript:
                $ref: '#/components/schemas/WebscriptManifest'
                description: >-
                  The webscript specification as provided by the
                  <code>webscript.json</code> asset.
              secret:
                type: string
                description: >-
                  The secret for this webscript deployment. This is
                  <code>null</code> when <code>allowHmac=false</code> in the
                  webscript specificaton.
            required:
              - _links
              - createdAt
              - createdBy
              - deprecated
              - draft
              - runtime
              - status
              - updatedAt
              - updatedBy
              - updates
              - webscript
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Webscripts Found
    WebscriptVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/WebscriptResponseWithInvokeLinkV2'
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Webscript Versions Found
    PostWebscriptJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was initiated.
      required:
        - _links
        - entity
        - message
      description: Webscript Deployment Initiated
    PostWebscriptJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
      required:
        - entity
        - message
      description: Webscript Deployed
    RebuildWebscriptAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild jobs were initiated.
      required:
        - _links
        - causes
        - entity
        - message
      description: Webscript Rebuild Initiated
    RebuildWebscriptSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: >-
            The specification and deployment status of the function for which
            rebuild status is computed.
      required:
        - causes
        - entity
        - message
      description: Webscript Rebuild Ignored
    VerifyWebscriptSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/WebscriptResponseV2'
          description: >-
            The specification and deployment status of the function for which a
            task was completed.
        result:
          $ref: '#/components/schemas/VerifyResult'
      required:
        - entity
        - message
        - result
      description: Webscript Health Verified
    JobsForWebscriptResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: >-
            Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was
            archived on the entity.
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            webscript:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
        - function
        - jobs
      description: Webscript Jobs Found
    InvokableWebscriptResponse:
      type: object
      properties:
        entity:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
            draft:
              type: boolean
            webscript:
              type: object
              properties:
                name:
                  type: string
                version:
                  $ref: '#/components/schemas/SemanticVersion'
                private:
                  type: boolean
                allowHmac:
                  type: boolean
              required:
                - name
                - version
                - private
                - allowHmac
            secret:
              type: string
          required:
            - status
            - draft
            - webscript
        _links:
          $ref: '#/components/schemas/InvokeInternalHALLink'
      required:
        - entity
        - _links
      description: Webscript Found
    InvokeInternalHALLink:
      type: object
      properties:
        invoke-internal:
          $ref: '#/components/schemas/HALLink'
          description: HAL link to the Openfaas endpoint.
          example:
            href: >-
              openfaas:/functions/web-a7420ffdf5ffe5b573a57f766aed38552a4e1421.openfaas-fn-740799ef-d515-4704-8718-903851c9899e
    UnhealthyInvokableWebscriptError:
      type: object
      properties:
        entity:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
            draft:
              type: boolean
            webscript:
              type: object
              properties:
                name:
                  type: string
                version:
                  $ref: '#/components/schemas/SemanticVersion'
                private:
                  type: boolean
                allowHmac:
                  type: boolean
              required:
                - name
                - version
                - private
                - allowHmac
            secret:
              type: string
          required:
            - status
            - draft
            - webscript
        _links:
          $ref: '#/components/schemas/InvokeInternalHALLink'
        error:
          type: string
        code:
          type: string
      required:
        - _links
        - code
        - entity
        - error
      description: Webscript Not Healthy
    AnyFunctionResponse:
      anyOf:
        - $ref: '#/components/schemas/PlugResponseV2'
        - $ref: '#/components/schemas/KfservingResponseV2'
        - $ref: '#/components/schemas/WebscriptResponseV2'
    VersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/AnyFunctionResponse'
          description: The specification and deployment status of the queried functions
      required:
        - count
        - entities
      description: Version Listing Response
    NamedParameters_typeof_asJobReference_:
      type: object
      properties:
        jobStatus:
          type: object
          properties:
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: Links to events if the job is still active.
            type:
              description: The type of the background task.
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              description: The request that initiated this job.
            result:
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be missing for
                batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
            - createdAt
            - createdBy
            - operation
            - state
            - type
      required:
        - jobStatus
      additionalProperties: false
    BuildJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - build
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/BuildArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/BuildResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    DeployJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - deploy
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/DeployArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/DeployResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    VerifyJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - verify
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/VerifyArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/VerifyResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    UndeployJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - undeploy
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/UndeployArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/UndeployResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    ScaleJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - scale
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/ScaleArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/ScaleResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    BatchJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
            - batch
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/BatchArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/BatchResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: >-
            The function entity that this job acts on, will be missing for batch
            jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
        - createdAt
        - createdBy
        - job
        - operation
        - request
        - state
        - type
    BatchArgs:
      type: object
      properties:
        plugName:
          type: string
        functionType:
          $ref: '#/components/schemas/FunctionType'
        childType:
          type: string
      required:
        - plugName
        - functionType
    BatchResult:
      type: object
      properties:
        jobCount:
          type: number
    AnyJobStatus:
      anyOf:
        - $ref: '#/components/schemas/BuildJobStatus'
        - $ref: '#/components/schemas/DeployJobStatus'
        - $ref: '#/components/schemas/VerifyJobStatus'
        - $ref: '#/components/schemas/UndeployJobStatus'
        - $ref: '#/components/schemas/ScaleJobStatus'
        - $ref: '#/components/schemas/BatchJobStatus'
    JobResponse:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/AnyJobStatus'
          description: Information about the job.
        _links:
          $ref: '#/components/schemas/JobEventsAndFunctionHALLink'
      required:
        - job
        - _links
      description: Job Found
    JobEventsAndFunctionHALLink:
      anyOf:
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            plug:
              $ref: '#/components/schemas/HALLink'
              description: Link to the plug.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
          required:
            - plug
          title: Plug
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            webscript:
              $ref: '#/components/schemas/HALLink'
              description: Link to the webscript.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
          required:
            - webscript
          title: Webscript
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            model:
              $ref: '#/components/schemas/HALLink'
              description: Link to the model.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
          required:
            - model
          title: Model
        - $ref: '#/components/schemas/JobEventsHALLink'
          title: No Function
      description: HAL links to related actions.
    AnyJobStatusSummary:
      anyOf:
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - build
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobAndFunctionHALLink'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Build
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - deploy
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobAndFunctionHALLink'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Deploy
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - verify
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobAndFunctionHALLink'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Verify
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - undeploy
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobAndFunctionHALLink'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Undeploy
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - scale
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobAndFunctionHALLink'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Scale
        - type: object
          properties:
            type:
              type: string
              description: The type of the background task.
              enum:
                - batch
            operation:
              type: string
              description: The operation name for the background task.
            id:
              type: string
              description: The id of the background job, or the constant `_unknown_`
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            createdAt:
              type: string
              format: date-time
              description: The creation time of this job
            createdBy:
              type: string
              description: The user that initiated this job
            function:
              $ref: '#/components/schemas/FunctionRef'
              description: >-
                The function entity that this job acts on, will be `undefined`
                for batch jobs.
            _links:
              $ref: '#/components/schemas/JobHALLinks'
              description: >-
                HAL links to related the job status, SSE stream, and function
                entity if relevant.
          required:
            - _links
            - createdAt
            - createdBy
            - id
            - operation
            - state
            - type
          title: Batch
    JobAndFunctionHALLink:
      anyOf:
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            plug:
              $ref: '#/components/schemas/HALLink'
              description: Link to the plug.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
          required:
            - plug
          title: Plug
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            webscript:
              $ref: '#/components/schemas/HALLink'
              description: Link to the webscript.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
          required:
            - webscript
          title: Webscript
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/HALLink'
              description: Link to an SSE stream of job events for the submitted job(s).
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            model:
              $ref: '#/components/schemas/HALLink'
              description: Link to the model.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
          required:
            - model
          title: Model
        - $ref: '#/components/schemas/JobHALLinks'
          title: No Function
      description: HAL links to related actions.
    JobsResponse:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobStatusSummary'
          description: Listing of jobs that satisfy the query.
      required:
        - jobs
      description: Jobs Found
    EventAck:
      type: string
      enum:
        - ack
    EventClose:
      type: string
      enum:
        - close
    EventKeepAlive:
      type: string
      enum:
        - keep-alive
    EventTypeSSE:
      anyOf:
        - $ref: '#/components/schemas/SupportedEvents'
        - $ref: '#/components/schemas/EventAck'
        - $ref: '#/components/schemas/EventClose'
        - $ref: '#/components/schemas/EventKeepAlive'
    SupportedEvents:
      type: string
      enum:
        - completed
        - failed
        - active
        - delayed
        - waiting
        - waiting-children
    ActiveEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - active
        data:
          $ref: '#/components/schemas/JobEventResponse_ActiveEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_ActiveEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/ActiveEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_ActiveEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/ActiveEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    JobReference:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/JobType'
        id:
          type: string
      required:
        - type
    ActiveEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/QueueEvents'
          description: The previous state of the job
    QueueEvents:
      type: string
      enum:
        - completed
        - failed
        - active
        - delayed
        - waiting
        - waiting-children
        - added
        - cleaned
        - drained
        - error
        - paused
        - progress
        - removed
        - resumed
        - retries-exhausted
        - stalled
    JobStatusAndEntityHALLinks:
      anyOf:
        - type: object
          properties:
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            plug:
              $ref: '#/components/schemas/HALLink'
              description: Link to the plug.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
          required:
            - plug
          title: Plug
        - type: object
          properties:
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            webscript:
              $ref: '#/components/schemas/HALLink'
              description: Link to the webscript.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
          required:
            - webscript
          title: Webscript
        - type: object
          properties:
            job:
              $ref: '#/components/schemas/HALLink'
              description: Link to the job status page for the related entity.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
            model:
              $ref: '#/components/schemas/HALLink'
              description: Link to the model.
              example:
                href: >-
                  https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
          required:
            - model
          title: Model
        - $ref: '#/components/schemas/JobStatusHALLink'
          title: No Function
      description: HAL links to related actions.
    CompletedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - completed
        data:
          $ref: '#/components/schemas/JobEventResponse_CompletedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_CompletedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/CompletedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_CompletedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/CompletedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    CompletedEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/QueueEvents'
          description: The previous state of the job
        returnValue:
          $ref: '#/components/schemas/AnyJobResult'
          description: The return value of the job
      required:
        - returnValue
    AnyJobResult:
      anyOf:
        - $ref: '#/components/schemas/BuildResult'
        - $ref: '#/components/schemas/DeployResult'
        - $ref: '#/components/schemas/VerifyResult'
        - $ref: '#/components/schemas/UndeployResult'
        - $ref: '#/components/schemas/ScaleResult'
        - $ref: '#/components/schemas/BatchResult'
        - $ref: '#/components/schemas/CleanupResult'
    CleanupResult:
      type: object
      properties:
        scheduledJob:
          $ref: '#/components/schemas/JobReference'
      description: The result data for a completed cleanup job.
    FailedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - failed
        data:
          $ref: '#/components/schemas/JobEventResponse_FailedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_FailedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/FailedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_FailedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/FailedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    FailedEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/QueueEvents'
          description: The previous state of the job
        failedReason:
          type: string
          description: The failure reason of the job
      required:
        - failedReason
    DelayedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - delayed
        data:
          $ref: '#/components/schemas/JobEventResponse_DelayedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_DelayedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/DelayedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_DelayedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/DelayedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    DelayedEventData:
      type: object
      properties:
        delay:
          type: number
      required:
        - delay
    WaitingEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - waiting
        data:
          $ref: '#/components/schemas/JobEventResponse_WaitingEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_WaitingEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_WaitingEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    WaitingEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/QueueEvents'
          description: The previous state of the job
    WaitingChildrenEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
            - waiting-children
        data:
          $ref: '#/components/schemas/JobEventResponse_WaitingChildrenEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
        - event
        - data
      description: A message that notifies a state change in a background job.
    JobEventResponse_WaitingChildrenEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/JobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingChildrenEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/FunctionRef'
          description: Information of entity for which this job is executing .
      required:
        - _links
        - data
        - function
        - job
        - timestamp
      description: Event object describing a state change of a background job.
    JobEventPayload_WaitingChildrenEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingChildrenEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
        - job
        - data
        - timestamp
    WaitingChildrenEventData:
      type: object
    JobEventSSE:
      anyOf:
        - $ref: '#/components/schemas/ActiveEventSSE'
        - $ref: '#/components/schemas/CompletedEventSSE'
        - $ref: '#/components/schemas/FailedEventSSE'
        - $ref: '#/components/schemas/DelayedEventSSE'
        - $ref: '#/components/schemas/WaitingEventSSE'
        - $ref: '#/components/schemas/WaitingChildrenEventSSE'
    KeepAliveEventSSE:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventKeepAlive'
        data:
          type: string
          description: A text message acknowledging that events will be forwarded.
      required:
        - event
      description: A message that acknowledges that the stream is still alive.
    EventSSE:
      anyOf:
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/EventAck'
            data:
              type: string
              description: A text message acknowledging what events will be forwarded.
          required:
            - event
            - data
          description: >-
            A message that acknowledges that the server will sent job state
            changes.
          title: Stream Ready
        - $ref: '#/components/schemas/JobEventSSE'
        - $ref: '#/components/schemas/KeepAliveEventSSE'
      description: SSE stream events without closing protocol
    EventWithCloseSSE:
      anyOf:
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/EventAck'
            data:
              type: string
              description: A text message acknowledging what events will be forwarded.
          required:
            - event
            - data
          description: >-
            A message that acknowledges that the server will sent job state
            changes.
          title: Stream Ready
        - $ref: '#/components/schemas/JobEventSSE'
        - $ref: '#/components/schemas/KeepAliveEventSSE'
        - type: object
          properties:
            event:
              $ref: '#/components/schemas/EventClose'
            data:
              type: string
              description: A text message describing the cause for closing the stream.
          required:
            - event
            - data
          description: >-
            A message that notifies that the server will not send more events,
            and that the client should close.
          title: Stream Closing
      description: SSE stream events with closing protocol
    LegacyPlugCreateResponse:
      type: object
      properties:
        statusCode:
          type: number
        uri:
          type: string
        entity:
          $ref: '#/components/schemas/LegacyPlugScriptResponse'
      required:
        - entity
        - statusCode
        - uri
    StatusResponse:
      type: object
      properties:
        statusCode:
          type: number
      required:
        - statusCode
    LegacyPlugScriptResponse:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        type:
          $ref: '#/components/schemas/PlugType'
        script:
          type: string
        metadata:
          $ref: '#/components/schemas/LegacyPlugScriptMeta'
        dependencies:
          type: object
      required:
        - name
        - version
        - type
        - script
        - metadata
        - dependencies
    LegacyPlugScriptMeta:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        iconURL:
          type: string
        friendlyName:
          type: string
        supportedStates:
          type: array
          items:
            type: string
        rawData:
          type: array
          items:
            type: object
            properties:
              parameter:
                type: string
              dataType:
                type: string
            required:
              - parameter
        requiredProperties:
          $ref: '#/components/schemas/LegacyRequiredProperties'
      required:
        - supportedStates
        - rawData
    LegacyPlugResponse:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        author:
          type: string
        category:
          type: string
        iconURL:
          type: string
        documentationURL:
          type: string
        isDeprecated:
          type: boolean
        description:
          type: string
        states:
          type: array
          items:
            type: string
        rawData:
          type: array
          items:
            type: object
        mediaType:
          $ref: '#/components/schemas/MediaType'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/LegacyConfigurationResponseObject'
        commands:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status'
        failureReason:
          $ref: '#/components/schemas/FailureReason'
        metadata:
          type: object
          properties:
            documentation:
              $ref: '#/components/schemas/LegacyDocumentation'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            iconURL:
              type: string
            friendlyName:
              type: string
      required:
        - name
        - version
        - isDeprecated
        - mediaType
        - commands
        - status
        - metadata
    MediaType:
      type: string
      enum:
        - application/javascript
        - application/java-vm
        - text/x-python
        - text/x-golang
    LegacyConfigurationResponseObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/PlugPropertyDataType'
        mandatory:
          type: boolean
        format:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/PlugPropertyFormatType'
            values:
              type: array
              items:
                $ref: '#/components/schemas/EnumValue'
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
        sensitive:
          type: boolean
      required:
        - name
        - type
    LegacyPlugHtmlResponse:
      type: string
      description: The documentation html of a plug.
    LegacyCreateDebugResponse:
      type: object
      properties:
        functionName:
          type: string
      required:
        - functionName
    MessageAndStatusResponse:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
      required:
        - message
        - statusCode
    ErrorAndStatusResponse:
      type: object
      properties:
        error:
          type: string
        statusCode:
          type: number
      required:
        - error
        - statusCode
    EntityResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/JobHALLinks'
          description: Links to related entities.
      required:
        - createdAt
        - createdBy
        - metadata
        - name
        - runtime
        - status
        - updatedAt
        - updatedBy
        - version
    PlugResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/JobHALLinks'
          description: Links to related entities.
        isDeprecated:
          type: boolean
      required:
        - createdAt
        - createdBy
        - isDeprecated
        - metadata
        - name
        - runtime
        - status
        - updatedAt
        - updatedBy
        - version
    PlugListingResponse:
      type: object
      properties:
        plugs:
          type: array
          items:
            $ref: '#/components/schemas/PlugResponse'
      required:
        - plugs
      description: Successful Response
    PagingResponse:
      type: object
      properties:
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        limit:
          type: number
          description: The page size used for this query result.
        page:
          type: number
          description: The page number of a paged query result.
    PlugListingAndQueryResponse:
      type: object
      properties:
        count:
          type: number
          description: >-
            The total count of matching items, from which this result is one
            page.
        limit:
          type: number
          description: The page size used for this query result.
        page:
          type: number
          description: The page number of a paged query result.
        plugs:
          type: array
          items:
            $ref: '#/components/schemas/PlugResponse'
      required:
        - plugs
      description: Successful Response
    CreatePlugAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/PlugManifest'
      required:
        - _links
        - entity
        - message
      description: Successful Response
    WebscriptResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/JobHALLinks'
          description: Links to related entities.
        secret:
          type: string
          nullable: true
      required:
        - createdAt
        - createdBy
        - metadata
        - name
        - runtime
        - secret
        - status
        - updatedAt
        - updatedBy
        - version
      description: Successful Response
    CreateWebscriptAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/WebscriptManifest'
      required:
        - _links
        - entity
        - message
      description: Successful Response
    KFServingResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-
            The runtime that specifies how this function should be built and
            deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: >-
            An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build
            and deployment. When set, the latest available <em>patch</em>
            version with the same <code>minor</code> version is used. Note that,
            after deployment, this runtime version can become obsolete with a
            <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/FunctionMeta'
          description: >-
            Metadata describing the function. Note that, after deployment, this
            metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/Status'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/JobHALLinks'
          description: Links to related entities.
      required:
        - createdAt
        - createdBy
        - metadata
        - name
        - runtime
        - status
        - updatedAt
        - updatedBy
        - version
      description: Successful Response
    KFServingModelsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/KFServingResponse'
        paging:
          $ref: '#/components/schemas/PagingResponse'
      required:
        - models
      description: Successful Response
    CreateKFServingAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        entity:
          $ref: '#/components/schemas/KFServingManifest'
      required:
        - _links
        - entity
        - message
      description: Model Deployment Initiated
    KFServingDeleteMultipleResponse:
      type: object
      properties:
        name:
          type: string
        versions:
          type: array
          items:
            type: string
      required:
        - name
        - versions
      description: Models Deleted
    KFServingDeleteMultipleWithJobResponse:
      type: object
      properties:
        name:
          type: string
        versions:
          type: array
          items:
            type: string
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
      required:
        - _links
        - message
        - name
        - versions
      description: Model Deletions Initiated
    KFServingDeleteResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
        - name
        - version
      description: Model Deleted
    KFServingDeleteWithJobResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/JobHALLinks'
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
        - _links
        - message
        - name
        - version
      description: Model Delete Initiated
paths:
  /registry/v2/:
    get:
      summary: Version
      description: Get the version of this function registry deployment.
      x-version: v2
      responses:
        default:
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootPageResponse'
      operationId: get_registry_v2
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/jobs/:
    get:
      operationId: list_jobs
      summary: List Jobs
      tags:
        - Jobs
      description: List all background jobs for the users tenant.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobTypeSchema'
          in: query
          name: type
          required: false
          description: Filter on job type
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStateResult'
          in: query
          name: state
          required: false
          description: Filter on job state
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          in: query
          name: functionType
          required: false
          description: Filter on function type
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: Filter on jobs that created before the given timestamp or age
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: Filter on jobs that created after the given timestamp or age
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: list
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/jobs/{type}/{id}:
    get:
      operationId: get_jobs
      summary: Get Job
      tags:
        - Jobs
      description: Get a background job by type and id.
      parameters:
        - schema:
            $ref: '#/components/schemas/JobType'
          in: path
          name: type
          required: true
          x-showExample: true
        - schema:
            type: string
          in: path
          name: id
          required: true
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/jobs/events:
    get:
      operationId: events_jobs
      summary: Stream Events
      tags:
        - Jobs
      description: |-
        Get an SSE stream of all job events for the users tenant.
         The stream can be filtered on job type or on a specific job id.

         When filtering on job id, the server will send a <code>close</code> event
         upon completion of the job. The client should handle this event by closing the stream.
         
      parameters:
        - schema:
            $ref: '#/components/schemas/JobType'
          in: query
          name: type
          required: false
          description: The type of the job.
          x-showExample: true
        - schema:
            type: string
          in: query
          name: id
          required: false
          description: The id of the job.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: children
          required: false
          description: >-
            If set to <code>true</code>, the event stream will include events of
            the job's dependants. E.g., when subscribing to a verify job with
            `children=true`, you will also receive the events of the underlying
            build and deploy jobs. Defaults to <code>false</code>.
          x-showExample: true
      x-version: v2
      responses:
        '200':
          description: Events Streaming
          content:
            text/eventstream:
              schema:
                $ref: '#/components/schemas/EventWithCloseSSE'
          x-is-event-stream: true
      security:
        - waylayApiKeySecret: []
      x-py-method: events
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
      x-produces-event-stream: true
  /registry/v2/runtimes/:
    get:
      operationId: list_runtimes
      summary: List Runtimes
      tags:
        - Runtimes
      description: List the runtimes that function registry supports.
      parameters:
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
            default: '*'
          in: query
          name: version
          required: false
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/LatestVersionLevel'
            default: minor
          example: minor
          in: query
          name: latest
          required: false
          description: >-
            If set, filters on the level of latest versions that will be
            included in the query.

            * `major`: include at most one latest version per name and major
            release.

            * `minor`: include at most one latest version per name and minor
            release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.
          x-example: '''minor'''
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            type: string
          example: node*
          in: query
          name: name
          required: false
          description: >-
            If set, filters on the <code>name</code> of a runtime. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          x-example: '''node*'''
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          example: plugs
          in: query
          name: functionType
          required: false
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          x-example: '''plugs'''
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          example: node
          in: query
          name: archiveFormat
          required: false
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          x-example: '''node'''
          x-showExample: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeSummaryResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: list
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/runtimes/{name}:
    get:
      operationId: getLatest_runtimes
      summary: Get Latest Runtime Version
      tags:
        - Runtimes
      description: Get a representation of the default runtime version by name.
      parameters:
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
            default: '*'
          in: query
          name: version
          required: false
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          example: plugs
          in: query
          name: functionType
          required: false
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          x-example: '''plugs'''
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          example: node
          in: query
          name: archiveFormat
          required: false
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          x-example: '''node'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/Runtime'
          in: path
          name: name
          required: true
          description: The name of a <em>runtime</em>
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeVersionResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_latest
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/runtimes/{name}/versions:
    get:
      operationId: listVersions_runtimes
      summary: List Runtime Versions
      tags:
        - Runtimes
      description: List the supported versions of a specific runtime.
      parameters:
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
            default: '*'
          in: query
          name: version
          required: false
          description: >-
            If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/LatestVersionLevel'
            default: minor
          example: minor
          in: query
          name: latest
          required: false
          description: >-
            If set, filters on the level of latest versions that will be
            included in the query.

            * `major`: include at most one latest version per name and major
            release.

            * `minor`: include at most one latest version per name and minor
            release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.
          x-example: '''minor'''
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          example: plugs
          in: query
          name: functionType
          required: false
          description: >-
            If set, filters on the <code>functionType</code> of a runtime. Uses
            an exact match.
          x-example: '''plugs'''
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          example: node
          in: query
          name: archiveFormat
          required: false
          description: >-
            If set, filters on the <code>archiveFormat</code> of a runtime. Uses
            an exact match.
          x-example: '''node'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/Runtime'
          in: path
          name: name
          required: true
          description: The name of a <em>runtime</em>
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeSummaryResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: list_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/runtimes/{name}/versions/{version}:
    get:
      operationId: get_runtimes
      summary: Get Runtime Version
      tags:
        - Runtimes
      description: Get a representation of the default runtime version by name.
      parameters:
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/Runtime'
          in: path
          name: name
          required: true
          description: The name of a <em>runtime</em>
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: path
          name: version
          required: true
          description: A version range for a <em>runtime</em>
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeVersionResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/runtimes/{name}/versions/{version}/example:
    get:
      operationId: exampleArchive_runtimes
      summary: Get Runtime Example Archive
      tags:
        - Runtimes
      description: Get an example of the specification archive of the runtime.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/Runtime'
          in: path
          name: name
          required: true
          description: The name of a <em>runtime</em>
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: path
          name: version
          required: true
          description: A version range for a <em>runtime</em>
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: example_archive
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/runtimes/{name}/versions/{version}/example/{wildcard}:
    get:
      operationId: getExampleAsset_runtimes
      summary: Get File From Runtime Example Archive
      tags:
        - Runtimes
      description: Get a file from the example specification archive of the runtime.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: includeDeprecated
          required: false
          description: If set to `true`, deprecated runtimes will be included in the query.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/Runtime'
          in: path
          name: name
          required: true
          description: The name of a <em>runtime</em>
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: path
          name: version
          required: true
          description: A version range for a <em>runtime</em>
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_example_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/:
    post:
      operationId: create_webscript_functions
      summary: Create Webscript Version
      tags:
        - Webscript Functions
      description: |-
        Creates a new <em>webscript</em> function by uploading its assets.
          
          The assets for a <em>webscript</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>
          
          The required <code>webscript.json</code> json file contains the function metadata,
          and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
          (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

          For each <em>runtime</em> other files will be required or supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>webscript.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>webscript</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>
            
            The required <code>webscript.json</code> json file contains the function metadata,
            and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
            (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).

            For each <em>runtime</em> other files will be required or supported.
      parameters:
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: patch
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: scaleToZero
          required: false
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: version
          required: false
          description: >-
            If set, the function version will be an increment of the latest
            existing version that satisfies the `version` range. Note that this
            increment always takes precedence over an explicit `version` in the
            function manifest.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            If set, the value will be used as the function name instead of the
            one specified in the manifest.
          x-showExample: false
        - schema:
            type: boolean
            default: false
          in: query
          name: draft
          required: false
          description: >-
            If set, the created function will be a draft function and its assets
            are still mutable. A build and deploy is initiated only in the case
            when all necessary assets are present and valid.
          x-showExample: true
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: create
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    get:
      operationId: list_webscript_functions
      summary: List Webscripts
      tags:
        - Webscript Functions
      description: >
        List the (latest) versions of available <em>webscripts</em>.


        ### List Latest Webscript Versions

        By default, the result includes the latest non-deprecated, non-draft
        version for each <em>webscript</em> name.

        If there is no such version, the latest _deprecated_ or the latest
        _draft_ version is included, with the former taking precedence.


          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


        As long as no _version filters_ are used, each listed <em>webscript
        version</em> item will contain a HAL **link to the 

        latest** _draft_ (`entities[]._links.draft`) or latest _published_
        (`entities[]._links.publisned`) version (if existing and different).


        ### List Latest Webscript Versions (with filter)

        When any of the _version filter_ query parameters are used, the response
        contains

        the _latest_ version per named <em>webscript</em> that satisfy the
        filters, but **without links**.


        ### List All Webscript Versions

        When using `latest=false` (default when using the `namedVersion`
        filter), the listing contains _all_ 

        <em>webscripts</em> versions that satisfy the query, possibly multiple
        versions per named <em>webscripts</em>.

        No HAL links are provided.


        #### Filter on _status_

        By default <em>webscript versions</em> with status  `undeployed` are
        **excluded** in all cases.

        Use the _version filter_ `status` to include/exclude a status from the
        results.

        By example, 

        > `?status=any&includeDeprecated=true&includeDraft=true&latest=false`


        will list _ALL_ versions known to the function registry.


        #### Version filter parameters

        The following query parameters are _version filters_ for the
        <em>webscript</em> listing:

        > `version`, `status`, `runtimeVersion`, `createdBy`, `createdBefore`,
        `createdAfter`, `updatedBy`, `updatedBefore`, `updatedAfter`,
        `nameVersion`, `deprecated`, `draft`
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/NamedVersion'
          in: query
          name: nameVersion
          required: false
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: latest
          required: false
          description: >-
            When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be
            returned. Defaults to `true`, except when specific versions are
            selected with the `nameVersion` filter.
          x-showExample: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestWebscriptsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions:
    get:
      operationId: listVersions_webscript_functions
      summary: List Webscript Versions
      tags:
        - Webscript Functions
      description: List all deployed versions of a webscript.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebscriptVersionsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}:
    get:
      operationId: get_webscript_functions
      summary: Get Webscript Version
      tags:
        - Webscript Functions
      description: Get the webscript version.
      parameters:
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebscriptResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersion_webscript_functions
      summary: Remove Webscript Version
      tags:
        - Webscript Functions
      description: |
        Deprecate, undeploy and/or remove a <em>webscript</em> version.

          By default, a `DELETE` 
          * _deprecates_ the webscript version(s): they are no longer included in listings by default.
          * _undeploys_ the webscript version(s) with delay: the function can no longer be invoked, the small delay allows
            other services to discover the removal.
          * _removes_ the version(s) from the plug registry.

          Use `?force=true` to immediately _undeploy_ and _remove_ without delay.

          Use `?undeploy=true` to undeploy, but keep the webscript version registered in a `undeployed` state.
          An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_version
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_webscript_functions
      summary: Rebuild Webscript
      tags:
        - Webscript Functions
      description: Rebuild and deploy a webscript with the original or updated base image.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, checks whether rebuild jobs are needed,
            but do not start any jobs.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/RebuildPolicy'
          in: query
          name: upgrade
          required: false
          description: >-
            If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b>
            version.   This should only include backward compatible upgrades. 
            </li>  <li><code>minor</code> <b>major</b> version.   This might
            include an upgrade of e.g. the language runtime and/or provided  
            dependencies that could break compatiblity with the function. .</li>
            </ul>
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: query
          name: forceVersion
          required: false
          description: >-
            If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade`
            parameter.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: ignoreChecks
          required: false
          description: >-
            If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to
            zero only if it was not active before this command.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: skipRebuild
          required: false
          description: >-
            If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildWebscriptSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildWebscriptAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: rebuild
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}:
    get:
      operationId: getLatest_webscript_functions
      summary: Get Latest Webscript Version
      tags:
        - Webscript Functions
      description: |-
        Fetch the latest version of a <em>webscript</em>.

          By default, the result shows the latest non-deprecated, non-draft version.
          If there is no such version, the latest deprecated or the latest draft version is returned, with the former taking precedence.

          
          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


          The returned <em>webscript version</em> will contain a link to its
          latest _draft_ or latest _published_ version (if existing and different).
          
      parameters:
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebscriptResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_latest
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersions_webscript_functions
      summary: Remove Webscript
      tags:
        - Webscript Functions
      description: >
        Deprecate, undeploy and/or remove all versions of this named
        <em>webscript</em>.

          By default, a `DELETE` 
          * _deprecates_ the webscript version(s): they are no longer included in listings by default.
          * _undeploys_ the webscript version(s) with delay: the function can no longer be invoked, the small delay allows
            other services to discover the removal.
          * _removes_ the version(s) from the plug registry.

          Use `?force=true` to immediately _undeploy_ and _remove_ without delay.

          Use `?undeploy=true` to undeploy, but keep the webscript version registered in a `undeployed` state.
          An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_webscript_functions
      summary: Patch Webscript Metadata
      tags:
        - Webscript Functions
      description: Patch the metadata of a webscript version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionMeta'
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebscriptResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: patch_metadata
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: true
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/content:
    get:
      operationId: getArchive_webscript_functions
      summary: Get Webscript Archive
      tags:
        - Webscript Functions
      description: Get the specification archive of a webscript.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_archive
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAssets_webscript_functions
      summary: Update Webscript Assets
      tags:
        - Webscript Functions
      description: |-
        Update a draft <em>webscript</em> function by updating its assets.
          
          The assets for a <em>webscript</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>

          The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
          replacing any existing assets with the same name.

          Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
           <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Webscript Function Assets
              description: >
                The assets for a <em>webscript</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>webscript</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>

            The provided assets will be added to the <em>webscript</em> function's collection of existing assets,
            replacing any existing assets with the same name.

            Please note that it is not allowed to update the webscript.json</code> json file with a changed value for any of the
             <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

            For each <em>runtime</em> other files are supported.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_assets
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
  /registry/v2/webscripts/{name}/versions/{version}/content/{wildcard}:
    get:
      operationId: getAsset_webscript_functions
      summary: Get File From Webscript Archive
      tags:
        - Webscript Functions
      description: Get a file from the specification archive of a webscript.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAsset_webscript_functions
      summary: Update Webscript Asset
      tags:
        - Webscript Functions
      description: >-
        The provided asset will be added to the <em>webscript</em> function's
        collection of existing assets,
          replacing any existing asset with the same name.

          Please note that it is not allowed to update the webscript.json json file with a changed value for any of the
            <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.
          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    delete:
      operationId: deleteAsset_webscript_functions
      summary: Delete Webscript Asset
      tags:
        - Webscript Functions
      description: Delete an asset from the webscript's collection of existing assets.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: delete_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/publish:
    post:
      operationId: publish_webscript_functions
      summary: Publish Draft Webscript
      tags:
        - Webscript Functions
      description: >-
        Mark the <em>webscript</em> to be ready and stable, taking it out of
        draft mode.,

          Typically, the <em>webscript</em> should be in the <code>running</code> status, 
          such that publishing becomes a simple operation where the existing deployment can be re-used.
          In other statuses, plug-registry may need to initiate a new build and deployment procedure.
          
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: patch
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Webscript Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobSyncResponseV2'
                description: Webscript Published
        '202':
          description: Webscript Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
                description: Webscript Published And Deploy Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: publish
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_webscript_functions
      summary: List Webscript Jobs
      tags:
        - Webscript Functions
      description: List the ongoing and completed operations on a specific webscript.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobTypeSchema'
          in: query
          name: type
          required: false
          description: Filter on job type
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStateResult'
          in: query
          name: state
          required: false
          description: Filter on job state
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          in: query
          name: functionType
          required: false
          description: Filter on function type
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: Filter on jobs that created before the given timestamp or age
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: Filter on jobs that created after the given timestamp or age
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsForWebscriptResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: jobs
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/webscripts/{name}/versions/{version}/verify:
    post:
      operationId: verify_webscript_functions
      summary: Verify Health Of Webscript
      tags:
        - Webscript Functions
      description: Verify health of webscript deployed on openfaas.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero
            only if it was not active before this command.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyWebscriptSyncResponseV2'
        '202':
          description: Webscript Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWebscriptJobAsyncResponseV2'
                description: Webscript Verification Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: verify
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/schemas/{functionType}/{role}/schema:
    get:
      operationId: getByRole_schemas
      summary: Get Asset Schema
      tags:
        - Schemas
      description: Get the JSON schema that is used to validate the asset.
      parameters:
        - schema:
            $ref: '#/components/schemas/FunctionType'
          in: path
          name: functionType
          required: true
          description: Function type
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/AssetRole'
          in: path
          name: role
          required: true
          description: Asset role
          x-showExample: true
      deprecated: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      security:
        - waylayApiKeySecret: []
      x-py-method: get_by_role
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/schemas/{schemaId}:
    get:
      operationId: get_schemas
      summary: Get Asset Schema
      tags:
        - Schemas
      description: Get the JSON schema that is used to validate an asset.
      parameters:
        - schema:
            type: string
          in: path
          name: schemaId
          required: true
          description: Schema id
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/:
    post:
      operationId: create_plug_functions
      summary: Create Plug
      tags:
        - Plug Functions
      description: |-
        Creates a new <em>plug</em> function by uploading its assets.
          
          The assets for a <em>plug</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>
          
          The required <code>plug.json</code> json file contains the function metadata,
          and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
          (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

          For each <em>runtime</em> other files will be required or supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>plug.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>plug</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>
            
            The required <code>plug.json</code> json file contains the function metadata,
            and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
            (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).

            For each <em>runtime</em> other files will be required or supported.
      parameters:
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: none
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: scaleToZero
          required: false
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: version
          required: false
          description: >-
            If set, the function version will be an increment of the latest
            existing version that satisfies the `version` range. Note that this
            increment always takes precedence over an explicit `version` in the
            function manifest.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            If set, the value will be used as the function name instead of the
            one specified in the manifest.
          x-showExample: false
        - schema:
            type: boolean
            default: false
          in: query
          name: draft
          required: false
          description: >-
            If set, the created function will be a draft function and its assets
            are still mutable. A build and deploy is initiated only in the case
            when all necessary assets are present and valid.
          x-showExample: true
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: create
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    get:
      operationId: list_plug_functions
      summary: List Plugs
      tags:
        - Plug Functions
      description: >
        List the (latest) versions of available <em>plugs</em>.


        ### List Latest Plug Versions

        By default, the result includes the latest non-deprecated, non-draft
        version for each <em>plug</em> name.

        If there is no such version, the latest _deprecated_ or the latest
        _draft_ version is included, with the former taking precedence.


          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


        As long as no _version filters_ are used, each listed <em>plug
        version</em> item will contain a HAL **link to the 

        latest** _draft_ (`entities[]._links.draft`) or latest _published_
        (`entities[]._links.publisned`) version (if existing and different).


        ### List Latest Plug Versions (with filter)

        When any of the _version filter_ query parameters are used, the response
        contains

        the _latest_ version per named <em>plug</em> that satisfy the filters,
        but **without links**.


        ### List All Plug Versions

        When using `latest=false` (default when using the `namedVersion`
        filter), the listing contains _all_ 

        <em>plugs</em> versions that satisfy the query, possibly multiple
        versions per named <em>plugs</em>.

        No HAL links are provided.


        #### Filter on _status_

        By default <em>plug versions</em> with status  `undeployed` are
        **excluded** in all cases.

        Use the _version filter_ `status` to include/exclude a status from the
        results.

        By example, 

        > `?status=any&includeDeprecated=true&includeDraft=true&latest=false`


        will list _ALL_ versions known to the function registry.


        #### Version filter parameters

        The following query parameters are _version filters_ for the
        <em>plug</em> listing:

        > `version`, `status`, `runtimeVersion`, `createdBy`, `createdBefore`,
        `createdAfter`, `updatedBy`, `updatedBefore`, `updatedAfter`,
        `nameVersion`, `deprecated`, `draft`, `tags`
      parameters:
        - schema:
            $ref: '#/components/schemas/TagsFilter'
          in: query
          name: tags
          required: false
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/PlugType'
          in: query
          name: type
          required: false
          description: If set, filters on the type of plug.
          x-showExample: true
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/NamedVersion'
          in: query
          name: nameVersion
          required: false
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: latest
          required: false
          description: >-
            When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be
            returned. Defaults to `true`, except when specific versions are
            selected with the `nameVersion` filter.
          x-showExample: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestPlugsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}:
    get:
      operationId: getLatest_plug_functions
      summary: Get Latest Plug Version
      tags:
        - Plug Functions
      description: |-
        Fetch the latest version of a <em>plug</em>.

          By default, the result shows the latest non-deprecated, non-draft version.
          If there is no such version, the latest deprecated or the latest draft version is returned, with the former taking precedence.

          
          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


          The returned <em>plug version</em> will contain a link to its
          latest _draft_ or latest _published_ version (if existing and different).
          
      parameters:
        - schema:
            $ref: '#/components/schemas/PlugType'
          in: query
          name: type
          required: false
          description: If set, filters on the type of plug.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Plug Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlugResponseV2'
            text/html:
              schema:
                $ref: '#/components/schemas/PlugHtmlResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_latest
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersions_plug_functions
      summary: Remove Plug
      tags:
        - Plug Functions
      description: >
        Deprecate, undeploy and/or remove all versions of this named
        <em>plug</em>.


        By default, a `DELETE` 

        * marks _published_ version(s) _deprecated_: they remain active, but are
        no longer included in listings by default.

        * completely removes any _draft_ version(s) (_deprecate_, _undeploy_ and
        _remove_)


        A _deprecated_ plug version will eventually be _undeployed_ (but not
        _removed_) by an external background task, 

        once proven that no waylay rule template or task references it.


        Use `?force=true` to skip the deprecation and immediately remove the
        version(s).


        Use `?undeploy=true` to undeploy the plug version(s), but keep it
        registered in a `undeployed` state.

        An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no
            longer available for invocation.

            * does NOT remove the plug from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the plug can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains
            active but is removed from the default listings.   This also applies
            to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions:
    get:
      operationId: listVersions_plug_functions
      summary: List Plug Versions
      tags:
        - Plug Functions
      description: List all versions of a plug, including deprecated versions or not.
      parameters:
        - schema:
            $ref: '#/components/schemas/TagsFilter'
          in: query
          name: tags
          required: false
          description: >-
            Filter on the tags of the item. Can be a single tag, or a list of
            tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlugVersionsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}:
    get:
      operationId: get_plug_functions
      summary: Get Plug Version
      tags:
        - Plug Functions
      description: Get a specific version of a plug.
      parameters:
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Plug Version Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlugResponseV2'
            text/html:
              schema:
                $ref: '#/components/schemas/PlugHtmlResponse'
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersion_plug_functions
      summary: Remove Plug Version
      tags:
        - Plug Functions
      description: >
        Deprecate, undeploy and/or remove a <em>plug</em> version.


        By default, a `DELETE` 

        * marks _published_ version(s) _deprecated_: they remain active, but are
        no longer included in listings by default.

        * completely removes any _draft_ version(s) (_deprecate_, _undeploy_ and
        _remove_)


        A _deprecated_ plug version will eventually be _undeployed_ (but not
        _removed_) by an external background task, 

        once proven that no waylay rule template or task references it.


        Use `?force=true` to skip the deprecation and immediately remove the
        version(s).


        Use `?undeploy=true` to undeploy the plug version(s), but keep it
        registered in a `undeployed` state.

        An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the plug version(s) will be undeployed and
            removed. Otherwise, the plug version(s) will only be
            <code>deprecated</code>, i.e removed from regular listings.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no
            longer available for invocation.

            * does NOT remove the plug from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the plug can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains
            active but is removed from the default listings.   This also applies
            to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_version
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_plug_functions
      summary: Rebuild Plug
      tags:
        - Plug Functions
      description: Rebuild and deploy a plug with the original or updated base image.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, checks whether rebuild jobs are needed,
            but do not start any jobs.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/RebuildPolicy'
          in: query
          name: upgrade
          required: false
          description: >-
            If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b>
            version.   This should only include backward compatible upgrades. 
            </li>  <li><code>minor</code> <b>major</b> version.   This might
            include an upgrade of e.g. the language runtime and/or provided  
            dependencies that could break compatiblity with the function. .</li>
            </ul>
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: query
          name: forceVersion
          required: false
          description: >-
            If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade`
            parameter.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: ignoreChecks
          required: false
          description: >-
            If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to
            zero only if it was not active before this command.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: skipRebuild
          required: false
          description: >-
            If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildPlugSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildPlugAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: rebuild
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/content:
    get:
      operationId: getArchive_plug_functions
      summary: Get Plug Archive
      tags:
        - Plug Functions
      description: Get the specification archive of a plug.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_archive
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAssets_plug_functions
      summary: Update Plug Assets
      tags:
        - Plug Functions
      description: |-
        Update a draft <em>plug</em> function by updating its assets.
          
          The assets for a <em>plug</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>

          The provided assets will be added to the <em>plug</em> function's collection of existing assets,
          replacing any existing assets with the same name.

          Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
           <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Plug Function Assets
              description: >
                The assets for a <em>plug</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>plug</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>plug</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>

            The provided assets will be added to the <em>plug</em> function's collection of existing assets,
            replacing any existing assets with the same name.

            Please note that it is not allowed to update the plug.json</code> json file with a changed value for any of the
             <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

            For each <em>runtime</em> other files are supported.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_assets
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
  /registry/v2/plugs/{name}/versions/{version}/content/{wildcard}:
    get:
      operationId: getAsset_plug_functions
      summary: Get File From Plug Archive
      tags:
        - Plug Functions
      description: Get a file from the specification archive of a plug.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAsset_plug_functions
      summary: Update Plug Asset
      tags:
        - Plug Functions
      description: >-
        The provided asset will be added to the <em>plug</em> function's
        collection of existing assets,
          replacing any existing asset with the same name.

          Please note that it is not allowed to update the plug.json json file with a changed value for any of the
            <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.
          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    delete:
      operationId: deleteAsset_plug_functions
      summary: Delete Plug Asset
      tags:
        - Plug Functions
      description: Delete an asset from the plug's collection of existing assets.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: delete_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/publish:
    post:
      operationId: publish_plug_functions
      summary: Publish Draft Plug
      tags:
        - Plug Functions
      description: >-
        Mark the <em>plug</em> to be ready and stable, taking it out of draft
        mode.,

          Typically, the <em>plug</em> should be in the <code>running</code> status, 
          such that publishing becomes a simple operation where the existing deployment can be re-used.
          In other statuses, plug-registry may need to initiate a new build and deployment procedure.
          
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: none
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Plug Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobSyncResponseV2'
                description: Plug Published
        '202':
          description: Plug Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
                description: Plug Published And Deploy Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: publish
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/interface:
    patch:
      operationId: patchInterface_plug_functions
      summary: Patch Plug Interface
      tags:
        - Plug Functions
      description: Patch the interface documentation of a plug version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Documentation'
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlugResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: patch_interface
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: true
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_plug_functions
      summary: Patch Plug Metadata
      tags:
        - Plug Functions
      description: Patch the metadata of a plug version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataRequestV2'
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlugResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: patch_metadata
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: true
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_plug_functions
      summary: List Plug Jobs
      tags:
        - Plug Functions
      description: List the ongoing and completed operations on a specific plug.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobTypeSchema'
          in: query
          name: type
          required: false
          description: Filter on job type
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStateResult'
          in: query
          name: state
          required: false
          description: Filter on job state
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          in: query
          name: functionType
          required: false
          description: Filter on function type
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: Filter on jobs that created before the given timestamp or age
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: Filter on jobs that created after the given timestamp or age
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsForPlugResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: jobs
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/plugs/{name}/versions/{version}/verify:
    post:
      operationId: verify_plug_functions
      summary: Verify Health Of Plug
      tags:
        - Plug Functions
      description: Verify health of plug deployed on openfaas.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero
            only if it was not active before this command.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyPlugSyncResponseV2'
        '202':
          description: Plug Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlugJobAsyncResponseV2'
                description: Plug Verification Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: verify
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/:
    post:
      operationId: create_model_functions
      summary: Create Model
      tags:
        - Model Functions
      description: |-
        Creates a new <em>model</em> function by uploading its assets.
          
          The assets for a <em>model</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>
          
          The required <code>model.json</code> json file contains the function metadata,
          and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
          (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

          For each <em>runtime</em> other files will be required or supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>
                  
                  The required <code>model.json</code> json file contains the function metadata,
                  and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
                  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

                  For each <em>runtime</em> other files will be required or supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>model</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>
            
            The required <code>model.json</code> json file contains the function metadata,
            and must have a <code>runtime</code> attribute that is one of the supported <em>runtime</em>s 
            (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).

            For each <em>runtime</em> other files will be required or supported.
      parameters:
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: patch
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: scaleToZero
          required: false
          description: >-
            If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources
            when the function is not to be used immediately.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: version
          required: false
          description: >-
            If set, the function version will be an increment of the latest
            existing version that satisfies the `version` range. Note that this
            increment always takes precedence over an explicit `version` in the
            function manifest.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            If set, the value will be used as the function name instead of the
            one specified in the manifest.
          x-showExample: false
        - schema:
            type: boolean
            default: false
          in: query
          name: draft
          required: false
          description: >-
            If set, the created function will be a draft function and its assets
            are still mutable. A build and deploy is initiated only in the case
            when all necessary assets are present and valid.
          x-showExample: true
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: create
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    get:
      operationId: list_model_functions
      summary: List Models
      tags:
        - Model Functions
      description: >
        List the (latest) versions of available <em>models</em>.


        ### List Latest Model Versions

        By default, the result includes the latest non-deprecated, non-draft
        version for each <em>model</em> name.

        If there is no such version, the latest _deprecated_ or the latest
        _draft_ version is included, with the former taking precedence.


          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


        As long as no _version filters_ are used, each listed <em>model
        version</em> item will contain a HAL **link to the 

        latest** _draft_ (`entities[]._links.draft`) or latest _published_
        (`entities[]._links.publisned`) version (if existing and different).


        ### List Latest Model Versions (with filter)

        When any of the _version filter_ query parameters are used, the response
        contains

        the _latest_ version per named <em>model</em> that satisfy the filters,
        but **without links**.


        ### List All Model Versions

        When using `latest=false` (default when using the `namedVersion`
        filter), the listing contains _all_ 

        <em>models</em> versions that satisfy the query, possibly multiple
        versions per named <em>models</em>.

        No HAL links are provided.


        #### Filter on _status_

        By default <em>model versions</em> with status  `undeployed` are
        **excluded** in all cases.

        Use the _version filter_ `status` to include/exclude a status from the
        results.

        By example, 

        > `?status=any&includeDeprecated=true&includeDraft=true&latest=false`


        will list _ALL_ versions known to the function registry.


        #### Version filter parameters

        The following query parameters are _version filters_ for the
        <em>model</em> listing:

        > `version`, `status`, `runtimeVersion`, `createdBy`, `createdBefore`,
        `createdAfter`, `updatedBy`, `updatedBefore`, `updatedAfter`,
        `nameVersion`, `deprecated`, `draft`
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/NamedVersion'
          in: query
          name: nameVersion
          required: false
          description: >-
            Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the
            same named versions if they are filtered.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: string
          in: query
          name: name
          required: false
          description: >-
            Filter on the name of the function. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of
            characters).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: latest
          required: false
          description: >-
            When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be
            returned. Defaults to `true`, except when specific versions are
            selected with the `nameVersion` filter.
          x-showExample: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestModelsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}:
    get:
      operationId: getLatest_model_functions
      summary: Get Latest Model Version
      tags:
        - Model Functions
      description: |-
        Fetch the latest version of a <em>model</em>.

          By default, the result shows the latest non-deprecated, non-draft version.
          If there is no such version, the latest deprecated or the latest draft version is returned, with the former taking precedence.

          
          Use the boolean query parameters <code>includeDeprecated</code> or <code>includeDraft</code> to change this behaviour:
          <ul>
          <li><code>includeDeprecated=true</code>: do not prefer non-deprecated versions as a latest version: if the latest version is a deprecated one, it will be shown, even if there are older non-deprecated versions.</li>
          <li><code>includeDraft=true</code>: do not prefer non-draft versions as a latest version: if the latest version is a draft, it will be shown, even if there are older non-draft versions.</li>
          </ul>


          The returned <em>model version</em> will contain a link to its
          latest _draft_ or latest _published_ version (if existing and different).
          
      parameters:
        - schema:
            type: boolean
          in: query
          name: includeDraft
          required: false
          description: >-
            Configures the inclusion of _draft_ versions when selecting latest
            versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft
            versions are **included**. If set to `false`, draft versions are
            **excluded**.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: includeDeprecated
          required: false
          description: >-
            Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only
            considered when no other versions are available. If set to `true`,
            deprecated versions are **included**. If set to `false`, deprecated
            versions are **excluded**.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_latest
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersions_model_functions
      summary: Remove Model
      tags:
        - Model Functions
      description: >
        Deprecate, undeploy and/or remove all versions of this named
        <em>model</em>.

          By default, a `DELETE` 
          * _deprecates_ the model version(s): they are no longer included in listings by default.
          * _undeploys_ the model version(s) with delay: the function can no longer be invoked, the small delay allows
            other services to discover the removal.
          * _removes_ the version(s) from the plug registry.

          Use `?force=true` to immediately _undeploy_ and _remove_ without delay.

          Use `?undeploy=true` to undeploy, but keep the model version registered in a `undeployed` state.
          An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions:
    get:
      operationId: listVersions_model_functions
      summary: List Model Versions
      tags:
        - Model Functions
      description: List all deployed versions of a model.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: number
            minimum: 0
          in: query
          name: page
          required: false
          description: The number of pages to skip when returning result to this query.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: deprecated
          required: false
          description: Filter on the deprecation status of the function.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: draft
          required: false
          description: Filter on the draft status of the function.
          x-showExample: true
        - schema:
            type: string
          in: query
          name: version
          required: false
          description: >-
            Filter on the version of the function (case-sensitive, supports
            wildcards).
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/StatusFilter'
          in: query
          name: status
          required: false
          description: >-
            Filter on the status of the plug. Filter values with a `-` postfix
            exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes
            _undeployed_ functions.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersionRange'
          in: query
          name: runtimeVersion
          required: false
          description: Filter on the runtime version.
          x-showExample: false
        - schema:
            type: string
          example: '@me'
          in: query
          name: createdBy
          required: false
          description: >-
            Filter on the user that create the plug. You can use the `@me` token
            to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            type: string
          example: '@me'
          in: query
          name: updatedBy
          required: false
          description: >-
            Filter on the user that last updated the plug. You can use the `@me`
            token to indicate your own plugs.
          x-example: '''@me'''
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: >-
            Filter on funtions that were created before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: >-
            Filter on funtions that were created after the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedBefore
          required: false
          description: >-
            Filter on funtions that were updated before the given timestamp or
            age.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: updatedAfter
          required: false
          description: >-
            Filter on funtions that were updated after the given timestamp or
            age.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/ArchiveFormat'
          in: query
          name: archiveFormat
          required: false
          description: Filter on the archive format of the function.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/Runtime'
          in: query
          name: runtime
          required: false
          description: Filter on the runtime of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionsResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: list_versions
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}:
    get:
      operationId: get_model_functions
      summary: Get Model Version
      tags:
        - Model Functions
      description: Get a model by name and version.
      parameters:
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: get
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    delete:
      operationId: removeVersion_model_functions
      summary: Remove Model Version
      tags:
        - Model Functions
      description: |
        Deprecate, undeploy and/or remove a <em>model</em> version.

          By default, a `DELETE` 
          * _deprecates_ the model version(s): they are no longer included in listings by default.
          * _undeploys_ the model version(s) with delay: the function can no longer be invoked, the small delay allows
            other services to discover the removal.
          * _removes_ the version(s) from the plug registry.

          Use `?force=true` to immediately _undeploy_ and _remove_ without delay.

          Use `?undeploy=true` to undeploy, but keep the model version registered in a `undeployed` state.
          An `undeployed` version can later be restored by a _rebuild_ action.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: force
          required: false
          description: >-
            If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations
            to end. During that period, the function is marked _deprecated_.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: undeploy
          required: false
          description: >-
            If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available
            for invocation.

            * does NOT remove the function from registry: it stays in an
            `undeployed` status.  All assets and definitions are retained, so
            the version can be restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function
            remains active but is removed from the default listings.   This also
            applies to _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UndeploySubmittedResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: remove_version
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/content:
    get:
      operationId: getArchive_model_functions
      summary: Get Model Archive
      tags:
        - Model Functions
      description: Get the specification archive of a model.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_archive
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAssets_model_functions
      summary: Update Model Assets
      tags:
        - Model Functions
      description: |-
        Update a draft <em>model</em> function by updating its assets.
          
          The assets for a <em>model</em> function can be provided as either
          <ul>
            <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
            <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
            <li>separate files in a <code>multipart/form-data</code> request</li>
          </ul>

          The provided assets will be added to the <em>model</em> function's collection of existing assets,
          replacing any existing assets with the same name.

          Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
           <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.

          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Model Function Assets
              description: >
                The assets for a <em>model</em> function can be provided as
                either
                  <ul>
                    <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
                    <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
                    <li>separate files in a <code>multipart/form-data</code> request</li>
                  </ul>

                  The provided assets will be added to the <em>model</em> function's collection of existing assets,
                  replacing any existing assets with the same name.

                  Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
                   <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

                  For each <em>runtime</em> other files are supported.
              anyOf:
                - title: Multipart file upload.
                  description: A multi-part upload containing one or more file assets.
                  type: object
                  properties:
                    filename:
                      type: array
                      items:
                        type: string
                        format: binary
                - title: TAR Achive Upload
                  description: A single file archive containing multiple assets.
        description: |
          The assets for a <em>model</em> function can be provided as either
            <ul>
              <li>a single <em>tar</em> archive (optionally compressed), with one of the content types 
              <code>application/octet-stream</code>, <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>
              <li>separate files in a <code>multipart/form-data</code> request</li>
            </ul>

            The provided assets will be added to the <em>model</em> function's collection of existing assets,
            replacing any existing assets with the same name.

            Please note that it is not allowed to update the model.json</code> json file with a changed value for any of the
             <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

            For each <em>runtime</em> other files are supported.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_assets
      x-consumes-multipart: true
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
  /registry/v2/models/{name}/versions/{version}/content/{wildcard}:
    get:
      operationId: getAsset_model_functions
      summary: Get File From Model Archive
      tags:
        - Model Functions
      description: Get a file from the specification archive of a model.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: ls
          required: false
          description: >-
            If set to `true`, the result will be a listing of the files in the
            asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/ContentValidationListing'
      security:
        - waylayApiKeySecret: []
      x-py-method: get_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
    put:
      operationId: updateAsset_model_functions
      summary: Update Model Asset
      tags:
        - Model Functions
      description: >-
        The provided asset will be added to the <em>model</em> function's
        collection of existing assets,
          replacing any existing asset with the same name.

          Please note that it is not allowed to update the model.json json file with a changed value for any of the
            <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.

          For each <em>runtime</em> other files are supported.
          
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: update_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: true
    delete:
      operationId: deleteAsset_model_functions
      summary: Delete Model Asset
      tags:
        - Model Functions
      description: Delete an asset from the model's collection of existing assets.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
            default: false
          in: query
          name: chown
          required: true
          description: >-
            If set, ownership of the draft function is transferred to the
            current user.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: wildcard
          required: true
          description: Full path or path prefix of the asset within the archive
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: delete_asset
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/publish:
    post:
      operationId: publish_model_functions
      summary: Publish Draft Model
      tags:
        - Model Functions
      description: >-
        Mark the <em>model</em> to be ready and stable, taking it out of draft
        mode.,

          Typically, the <em>model</em> should be in the <code>running</code> status, 
          such that publishing becomes a simple operation where the existing deployment can be re-used.
          In other statuses, plug-registry may need to initiate a new build and deployment procedure.
          
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/DeprecatePreviousPolicy'
            default: patch
          in: query
          name: deprecatePrevious
          required: false
          description: >-
            Set the cleanup policy used to automatically deprecate/delete
            previous versions.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '201':
          description: Model Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobSyncResponseV2'
                description: Model Published
        '202':
          description: Model Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
                description: Model Published And Deploy Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: publish
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_model_functions
      summary: Patch Model Metadata
      tags:
        - Model Functions
      description: Patch the metadata of a model version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionMeta'
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: patch_metadata
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: true
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_model_functions
      summary: List Model Jobs
      tags:
        - Model Functions
      description: List the ongoing and completed operations on a model.
      parameters:
        - schema:
            type: number
            minimum: 0
          in: query
          name: limit
          required: false
          description: >-
            The maximum number of items to be return from this query. Has a
            deployment-defined default and maximum value.
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobTypeSchema'
          in: query
          name: type
          required: false
          description: Filter on job type
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/JobStateResult'
          in: query
          name: state
          required: false
          description: Filter on job state
          x-showExample: false
        - schema:
            type: array
            items:
              $ref: '#/components/schemas/FunctionType'
          in: query
          name: functionType
          required: false
          description: Filter on function type
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdBefore
          required: false
          description: Filter on jobs that created before the given timestamp or age
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/TimestampSpec'
          in: query
          name: createdAfter
          required: false
          description: Filter on jobs that created after the given timestamp or age
          x-showExample: false
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsForModelResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: jobs
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_model_functions
      summary: Rebuild Model
      tags:
        - Model Functions
      description: Rebuild and deploy a model with the original or updated base image.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: dryRun
          required: false
          description: >-
            If set to <code>true</code>, checks whether rebuild jobs are needed,
            but do not start any jobs.
          x-showExample: true
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/RebuildPolicy'
          in: query
          name: upgrade
          required: false
          description: >-
            If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b>
            version.   This should only include backward compatible upgrades. 
            </li>  <li><code>minor</code> <b>major</b> version.   This might
            include an upgrade of e.g. the language runtime and/or provided  
            dependencies that could break compatiblity with the function. .</li>
            </ul>
          x-showExample: true
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: query
          name: forceVersion
          required: false
          description: >-
            If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade`
            parameter.
          x-showExample: false
        - schema:
            type: boolean
          in: query
          name: ignoreChecks
          required: false
          description: >-
            If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to
            zero only if it was not active before this command.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: skipRebuild
          required: false
          description: >-
            If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildModelSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebuildModelAsyncResponseV2'
      security:
        - waylayApiKeySecret: []
      x-py-method: rebuild
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
  /registry/v2/models/{name}/versions/{version}/verify:
    post:
      operationId: verify_model_functions
      summary: Verify Health Of Model
      tags:
        - Model Functions
      description: Verify health of model deployed on openfaas.
      parameters:
        - schema:
            type: string
          in: query
          name: comment
          required: false
          description: An optional user-specified comment corresponding to the operation.
          x-showExample: false
        - schema:
            type: boolean
            default: true
          in: query
          name: async
          required: false
          description: >-
            Unless this is set to <code>false</code>, the server will start the
            required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will
            block until the job actions are completed, or a timeout occurs.
          x-showExample: true
        - schema:
            type: boolean
          in: query
          name: scaleToZero
          required: false
          description: >-
            Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero
            only if it was not active before this command.
          x-showExample: true
        - schema:
            type: string
          in: path
          name: name
          required: true
          description: The name of the function.
          x-showExample: false
        - schema:
            $ref: '#/components/schemas/SemanticVersion'
          in: path
          name: version
          required: true
          description: The version of the function.
          x-showExample: false
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyModelSyncResponseV2'
        '202':
          description: Model Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostModelJobAsyncResponseV2'
                description: Model Verification Initiated
      security:
        - waylayApiKeySecret: []
      x-py-method: verify
      x-consumes-multipart: false
      x-consumes-urlencoded: false
      x-consumes-json: false
      x-consumes-other: false
tags:
  - name: Jobs
    description: >-
      Jobs represent the ongoing asynchronous operations in the function
      registry.
  - name: Runtimes
    description: >-
      Runtimes are the available base infrastructure for functions, and define
      how 
                the plug gets build and deployed.
externalDocs:
  url: https://docs.waylay.io/#/api/registry/
  description: Waylay Documentation
servers:
  - url: https://api.waylay.io
    description: Waylay enterprise gateway
