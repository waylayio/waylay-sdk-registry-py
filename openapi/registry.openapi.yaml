openapi: 3.1.0
info:
  title: Waylay Function Registry
  version: 2.12.4
  x-visibility: stable
  description: V2 API to build and deploy Waylay functions (plugs, webscripts, BYOML
    models).
  x-visiblity:
    status: stable
    title: Since v2.8.0
components:
  securitySchemes:
    waylayApiKeySecret:
      type: http
      description: Waylay apiKey/apiSecret basic authentication. All endpoints support
        also Waylay JWT Bearer authentication.
      scheme: basic
  responses:
    '400':
      description: Bad Request
    '401':
      description: Unauthorized
    '404':
      description: Resource Not Found
    '415':
      description: Unsupported Media Type
  schemas:
    JobReferenceParams:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EJobType'
        id:
          type: string
      required:
      - type
      - id
      additionalProperties: false
    EJobType:
      type: string
      enum:
      - build
      - deploy
      - verify
      - undeploy
      - batch
      - scale
      - cleanup
      - other
    IJobEventsFilterQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EJobType'
          description: The type of the job.
        id:
          type: string
          description: The id of the job.
        children:
          type: boolean
          description: If set to <code>true</code>, the event stream will include
            events of the job's dependants. E.g., when subscribing to a verify job
            with `children=true`, you will also receive the events of the underlying
            build and deploy jobs. Defaults to <code>false</code>.
      additionalProperties: false
    IName:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
      required:
      - name
    IFunctionType:
      type: object
      properties:
        functionType:
          $ref: '#/components/schemas/EFunctionType'
          description: The general type of the function.
      required:
      - functionType
      additionalProperties: false
    EFunctionType:
      type: string
      enum:
      - plugs
      - webscripts
      - kfserving
      description: Type of functions supported by the registry service.
    INameAndVersion:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
      - name
      - version
    SemanticVersion:
      type: string
      description: A semantic version with _exactly_ a `major`, `minor` and `patch`
        specifier. No `pre-release` or `build` identifiers are allowed. See https://semver.org
      pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
    ERebuildPolicy:
      type: string
      enum:
      - patch
      - minor
      - major
      - same
      description: The policy to select a new <em>runtime</em> version when a rebuild
        is issued.
    IRebuildQueryParams:
      type: object
      properties:
        upgrade:
          $ref: '#/components/schemas/ERebuildPolicy'
          description: If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b> version.   This
            should only include backward compatible upgrades.  </li>  <li><code>minor</code>
            <b>major</b> version.   This might include an upgrade of e.g. the language
            runtime and/or provided   dependencies that could break compatiblity with
            the function. .</li> </ul>
        dryRun:
          type: boolean
          description: If set to <code>true</code>, checks whether rebuild jobs are
            needed, but do not start any jobs.
        forceVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade` parameter.
        ignoreChecks:
          type: boolean
          description: 'If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option'
        scaleToZero:
          type: boolean
          description: Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to zero
            only if it was not active before this command.
        skipRebuild:
          type: boolean
          description: If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
      additionalProperties: false
    ILimitQuery:
      type: object
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
      additionalProperties: false
    IPagingQuery:
      type: object
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
      additionalProperties: false
    EStatusInclude:
      type: string
      enum:
      - registered
      - running
      - pending
      - deployed
      - unhealthy
      - failed
      - undeploying
      - undeployed
      description: Inlude a status as a filter.
      examples:
      - running
      title: Status Inclusion Filter
    EStatusExclude:
      type: string
      description: Any status value with a `-` postfix appended, excludes that status
        as a filter.
      examples:
      - running-
      title: Status Exclusion Filter
      pattern: ^(registered|pending|deployed|unhealthy|failed|running|undeploying|undeployed)-$
    EStatusAny:
      type: string
      description: Includes *all* statuses (including `undeployed`) as a filter
      title: Status Wildcard Filter
      enum:
      - any
    EStatusFilter:
      anyOf:
      - $ref: '#/components/schemas/EStatusInclude'
      - $ref: '#/components/schemas/EStatusExclude'
      - $ref: '#/components/schemas/EStatusAny'
      description: Inclusion or exclusion filter on the `status` property.
      title: Status Filter
    IFunctionEntityQuery:
      type: object
      properties:
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      additionalProperties: false
      description: Filter on function attributes that do not change across function
        versions.
    EArchiveFormat:
      type: string
      enum:
      - node
      - python
      - golang
      - byoml
      - native
    ERuntime:
      type: string
    IFunctionVersionQuery:
      type: object
      properties:
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
      additionalProperties: false
      description: Filter on function attributes that can change across function versions.
        When these query parameters are used, the query is considered a _function
        version_ listing and no HAL links to latest (_draft_, _published_) versions
        are included.
    SemanticVersionRange:
      anyOf:
      - type: string
      - $ref: '#/components/schemas/SemanticVersion'
      description: A range of semantic versions. See https://devhints.io/semver
    TimestampSpec:
      anyOf:
      - $ref: '#/components/schemas/TimestampAge'
      - $ref: '#/components/schemas/TimestampAbsolute'
      description: A timestamp specification.
    TimestampAge:
      anyOf:
      - $ref: '#/components/schemas/ISO8601Period'
      - $ref: '#/components/schemas/DurationSpec'
      description: A timestamp expressed as a age relative to now
      title: Age
    ISO8601Period:
      type: string
      description: An ISO8601 period expression
      pattern: P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+(\.\d+)S))?
      format: duration
      title: ISO8601 Period
    DurationSpec:
      type: string
      description: An duration expression. A numeric value without unit is interpreted
        as milliseconds.
      pattern: \d+([ybwdhms])?
      title: Duration
    TimestampAbsolute:
      anyOf:
      - $ref: '#/components/schemas/ISO8601DateTime'
      - $ref: '#/components/schemas/ISO8601Date'
      description: An absolute timestamp as an ISO8601 string
      title: Absolute
    ISO8601DateTime:
      type: string
      description: An ISO8601 date-time expression.
      pattern: \d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}(:\d{2})?(Z|([+-]\d\d:\d\d))?
      format: date-time
      title: ISO8601 Timestamp
    ISO8601Date:
      type: string
      description: An ISO8601 date expression.
      pattern: \d{4}-\d{2}-\d{2}(Z|([+-]\d\d:\d\d))?
      format: date
      title: ISO8601 Date
    IDeprecatedDraftFilter:
      type: object
      properties:
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
      additionalProperties: false
    IDeployAttributesFilter:
      type: object
      properties:
        endpoint:
          type: string
          description: Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
        imageName:
          type: string
          description: Filter on the container image name. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        storageLocation:
          type: string
          description: Filter on the storageLocation. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
      additionalProperties: false
    IVersionIncludes:
      type: object
      properties:
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
      additionalProperties: false
    INamedVersionsFilter:
      type: object
      properties:
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the same
            named versions if they are filtered.
      additionalProperties: false
    NamedVersion:
      type: string
      description: A function reference represented by `name@version`.
      pattern: ^.*@(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
    ILatestFunctionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Request to list latest function versions per named function. A
        request that only uses these query parameters will include links to the _latest_
        draft/published versions.
    ILatestFunctionVersionsQuery:
      type: object
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the same
            named versions if they are filtered.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
        latest:
          type: boolean
          description: When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be returned.
            Defaults to `true`, except when specific versions are selected with the
            `nameVersion` filter.
      additionalProperties: false
      description: Latest function versions listing query.
    INamedFunctionVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Named function versions listing query.
    IVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        endpoint:
          type: string
          description: Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
        imageName:
          type: string
          description: Filter on the container image name. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        storageLocation:
          type: string
          description: Filter on the storageLocation. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the same
            named versions if they are filtered.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Function versions paged query
    IPlugTypeQuery:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EPlugType'
          description: If set, filters on the type of plug.
      additionalProperties: false
    EPlugType:
      type: string
      enum:
      - sensor
      - actuator
      - transformer
    ILatestPlugsQuery:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/EPlugType'
          description: If set, filters on the type of plug.
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Latest plug versions listing query with latest links. A request
        that only uses these query parameters will include links to the _latest_ draft/published
        versions of the plug.
    ILatestPlugVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: Filter on the tags of the item. Can be a single tag, or a list
            of tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        type:
          $ref: '#/components/schemas/EPlugType'
          description: If set, filters on the type of plug.
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the same
            named versions if they are filtered.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
        latest:
          type: boolean
          description: When `true`, only the latest version per function name is returned.
            If set to `false`, multiple versions per named function can be returned.
            Defaults to `true`, except when specific versions are selected with the
            `nameVersion` filter.
      description: Plug versions listing query.
    ITagsQuery:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: Filter on the tags of the item. Can be a single tag, or a list
            of tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
      additionalProperties: false
    TagsFilter:
      anyOf:
      - type: array
        items:
          type: string
      - type: string
    ITagQuery:
      type: object
      properties:
        name:
          type: string
          description: If set, filters on the <code>name</code> of a tag. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          examples:
          - '*-demo-??'
        color:
          type: string
          description: If set, filters on the <code>color</code> of a tag. Uses an
            exact match.
          examples:
          - '#4153ea'
      additionalProperties: false
    IFunctionDeleteQuery:
      type: object
      properties:
        force:
          type: boolean
          description: 'If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations to
            end. During that period, the function is marked _deprecated_.'
        undeploy:
          type: boolean
          description: 'If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available for
            invocation.

            * does NOT remove the function from registry: it stays in an `undeployed`
            status.  All assets and definitions are retained, so the version can be
            restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function remains
            active but is removed from the default listings.   This also applies to
            _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.'
      additionalProperties: false
    IPlugDeleteForceQuery:
      type: object
      properties:
        force:
          type: boolean
          description: If <code>true</code>, the plug version(s) will be undeployed
            and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
            i.e removed from regular listings.
      additionalProperties: false
    IPlugDeleteQuery:
      type: object
      properties:
        force:
          type: boolean
          description: If <code>true</code>, the plug version(s) will be undeployed
            and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
            i.e removed from regular listings.
        undeploy:
          type: boolean
          description: 'If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no longer
            available for invocation.

            * does NOT remove the plug from registry: it stays in an `undeployed`
            status.  All assets and definitions are retained, so the plug can be restored
            later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains active
            but is removed from the default listings.   This also applies to _draft_
            versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.'
      additionalProperties: false
    IAsyncQueryDefaultFalse:
      type: object
      properties:
        async:
          type: boolean
          description: If this is set to <code>true</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until the
            job actions are completed, or a timeout occurs.
          default: false
      additionalProperties: false
    IAsyncQueryDefaultTrue:
      type: object
      properties:
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
      additionalProperties: false
    IAsyncVerifyQuery:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero only
            if it was not active before this command.
      additionalProperties: false
    IUpdateComment:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    IAsyncDeployQuery:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        dryRun:
          type: boolean
          description: If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources when
            the function is not to be used immediately.
          default: false
      additionalProperties: false
    IDryRunQuery:
      type: object
      properties:
        dryRun:
          type: boolean
          description: If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
      additionalProperties: false
    IDeprecatePreviousQuery:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: Set the cleanup policy used to automatically deprecate/delete
            previous versions.
      additionalProperties: false
    DeprecatePreviousPolicy:
      type: string
      enum:
      - none
      - all
      - patch
      - minor
    IJobQuery:
      type: object
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        type:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
          description: Filter on job type
        state:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
          description: Filter on job state
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
          description: Filter on function type
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on jobs that created before the given timestamp or age
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on jobs that created after the given timestamp or age
      additionalProperties: false
    JobTypeSchema:
      anyOf:
      - $ref: '#/components/schemas/JobTypeBuild'
      - $ref: '#/components/schemas/JobTypeDeploy'
      - $ref: '#/components/schemas/JobTypeVerify'
      - $ref: '#/components/schemas/JobTypeUndeploy'
      - $ref: '#/components/schemas/JobTypeScale'
      - $ref: '#/components/schemas/JobTypeBatch'
      title: Job Type
    JobTypeBuild:
      type: string
      description: Build
      title: Build
      enum:
      - build
    JobTypeDeploy:
      type: string
      description: A job that deploys a function image to the openfaas runtime.
      title: Deploy
      enum:
      - deploy
    JobTypeVerify:
      type: string
      description: A job that checks the health of a deployed function.
      title: Verify
      enum:
      - verify
    JobTypeUndeploy:
      type: string
      description: A job that undeploys a deployed function and removes it from the
        registry.
      title: Undeploy
      enum:
      - undeploy
    JobTypeScale:
      type: string
      description: A job that scales a function to a target.
      title: Scale
      enum:
      - scale
    JobTypeBatch:
      type: string
      description: A job that groups other jobs as a parent.
      title: Batch
      enum:
      - batch
    JobStateResult:
      anyOf:
      - $ref: '#/components/schemas/JobState'
      - $ref: '#/components/schemas/JobStateUnknown'
      description: All reported job states
      title: Job States
    JobState:
      anyOf:
      - $ref: '#/components/schemas/JobStateFinished'
      - $ref: '#/components/schemas/JobStateActive'
      - $ref: '#/components/schemas/JobStateDelayed'
      - $ref: '#/components/schemas/JobStateWaiting'
      - $ref: '#/components/schemas/JobStateWaitingChildren'
      description: Allowed job states
      title: Job States
    JobStateFinished:
      anyOf:
      - $ref: '#/components/schemas/JobStateCompleted'
      - $ref: '#/components/schemas/JobStateFailed'
      description: The job completed successfully or with failure.
      title: Finished
    JobStateCompleted:
      type: string
      description: The job has completed successfully.
      title: Completed
      enum:
      - completed
    JobStateFailed:
      type: string
      description: The job failed in execution.
      title: Failed
      enum:
      - failed
    JobStateActive:
      type: string
      description: The job is running.
      title: Active
      enum:
      - active
    JobStateDelayed:
      type: string
      description: The job has been delayed for retry after a failure.
      title: Delayed
      enum:
      - delayed
    JobStateWaiting:
      type: string
      description: The job has been queued for execution, but might be waiting because
        of rate limiting.
      title: Waiting
      enum:
      - waiting
    JobStateWaitingChildren:
      type: string
      description: The job is waiting for child jobs to be completed.
      title: Waiting Children
      enum:
      - waiting-children
    JobStateUnknown:
      type: string
      description: The job state is unknown (undocument or inconsistent).
      title: Unknown
      enum:
      - unknown
    IRuntimeNameQuery:
      type: object
      properties:
        name:
          type: string
          description: If set, filters on the <code>name</code> of a runtime. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          examples:
          - node*
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
          description: If set, filters on the <code>functionType</code> of a runtime.
            Uses an exact match.
          examples:
          - plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: If set, filters on the <code>archiveFormat</code> of a runtime.
            Uses an exact match.
          examples:
          - node
      additionalProperties: false
    IRuntimeVersionQuery:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: 'If set, filters on the level of latest versions that will
            be included in the query.

            * `major`: include at most one latest version per name and major release.

            * `minor`: include at most one latest version per name and minor release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.'
          examples:
          - minor
          default: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: false
      additionalProperties: false
    LatestVersionLevel:
      type: string
      enum:
      - major
      - minor
      - patch
      - 'true'
      - 'false'
      description: Level of latest versions that should be included.
    IRuntimeQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: 'If set, filters on the level of latest versions that will
            be included in the query.

            * `major`: include at most one latest version per name and major release.

            * `minor`: include at most one latest version per name and minor release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.'
          examples:
          - minor
          default: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: false
        name:
          type: string
          description: If set, filters on the <code>name</code> of a runtime. Supports
            <code>*</code> and <code>?</code> wildcards and is case-insensitive.
          examples:
          - node*
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
          description: If set, filters on the <code>functionType</code> of a runtime.
            Uses an exact match.
          examples:
          - plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: If set, filters on the <code>archiveFormat</code> of a runtime.
            Uses an exact match.
          examples:
          - node
    IGetRuntimeByNameQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: false
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
          description: If set, filters on the <code>functionType</code> of a runtime.
            Uses an exact match.
          examples:
          - plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: If set, filters on the <code>archiveFormat</code> of a runtime.
            Uses an exact match.
          examples:
          - node
    IGetRuntimeVersionsQuery:
      type: object
      additionalProperties: false
      properties:
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, filters on the <code>version</code> of a runtime. Supports
            [version ranges](https://devhints.io/semver).
          default: '*'
        latest:
          $ref: '#/components/schemas/LatestVersionLevel'
          description: 'If set, filters on the level of latest versions that will
            be included in the query.

            * `major`: include at most one latest version per name and major release.

            * `minor`: include at most one latest version per name and minor release.

            * `patch`: include each matching patch version.

            * `true`: include the latest matching version.

            * `false`: include any matching version (same as `patch`).


            This filter is applied after all other selection criteria.'
          examples:
          - minor
          default: minor
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: false
        functionType:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
          description: If set, filters on the <code>functionType</code> of a runtime.
            Uses an exact match.
          examples:
          - plugs
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: If set, filters on the <code>archiveFormat</code> of a runtime.
            Uses an exact match.
          examples:
          - node
    IGetRuntimeByNameAndVersionQuery:
      type: object
      properties:
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: true
      additionalProperties: false
    IGetRuntimeExampleQuery:
      type: object
      additionalProperties: false
      properties:
        ls:
          type: boolean
          description: If set to `true`, the result will be a listing of the files
            in the asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          default: false
        includeDeprecated:
          type: boolean
          description: If set to `true`, deprecated runtimes will be included in the
            query.
          default: true
    IContentQueryV2:
      type: object
      properties:
        ls:
          type: boolean
          description: If set to `true`, the result will be a listing of the files
            in the asset, annotated with metadata and validation report from the asset
            conditions of the functions runtime.
          default: false
      additionalProperties: false
    IRuntimeParams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ERuntime'
          description: The name of a <em>runtime</em>
      required:
      - name
      additionalProperties: false
    IRuntimeVersionParams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ERuntime'
          description: The name of a <em>runtime</em>
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: A version range for a <em>runtime</em>
      required:
      - name
      - version
      additionalProperties: false
    IRuntimeVersionAndPathParams:
      type: object
      additionalProperties: false
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
        name:
          $ref: '#/components/schemas/ERuntime'
          description: The name of a <em>runtime</em>
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: A version range for a <em>runtime</em>
      required:
      - '*'
      - name
      - version
    IAssetPathParamsV2:
      type: object
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
      required:
      - '*'
      additionalProperties: false
    ILatestPlugVersionsQueryV2:
      anyOf:
      - $ref: '#/components/schemas/ILatestPlugVersionsQuery'
      - $ref: '#/components/schemas/ILatestPlugsQuery'
      description: Latest plug versions listing query.
    ILatestPlugVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/EPlugType'
          description: If set, filters on the type of plug.
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
      description: Latest named plug version listing query
    INamedPlugVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: Filter on the tags of the item. Can be a single tag, or a list
            of tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Named plug version listing query
    IKFServingLatestVersionsQueryV2:
      anyOf:
      - $ref: '#/components/schemas/ILatestFunctionVersionsQuery'
      - $ref: '#/components/schemas/ILatestFunctionsQuery'
      description: Latest model versions listing query.
    IKFServingLatestVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
      description: Named Model latest version query.
    INamedKFServingVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Named Model versions query.
    IKFServingDeleteQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        force:
          type: boolean
          description: 'If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations to
            end. During that period, the function is marked _deprecated_.'
        undeploy:
          type: boolean
          description: 'If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available for
            invocation.

            * does NOT remove the function from registry: it stays in an `undeployed`
            status.  All assets and definitions are retained, so the version can be
            restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function remains
            active but is removed from the default listings.   This also applies to
            _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.'
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
    IVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        endpoint:
          type: string
          description: Filter on the openfaas endpoint. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
        imageName:
          type: string
          description: Filter on the container image name. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        storageLocation:
          type: string
          description: Filter on the storageLocation. This is case-insensitive and
            supports wild-cards `?` (any one character) and `*` (any sequence of characters).
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        nameVersion:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
          description: Filter on exact `{name}@{version}` functions. Using this filter
            implies a `latest=false` default, returning multiple versions of the same
            named versions if they are filtered.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Function versions paged query
    IWebscriptLatestVersionsQueryV2:
      anyOf:
      - $ref: '#/components/schemas/ILatestFunctionVersionsQuery'
      - $ref: '#/components/schemas/ILatestFunctionsQuery'
      description: Webscript lastest versions listing query.
    IWebscriptLatestVersionQueryV2:
      type: object
      additionalProperties: false
      properties:
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
      description: Webscript latest named version query.
    INamedWebscriptVersionsQueryV2:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        deprecated:
          type: boolean
          description: Filter on the deprecation status of the function.
        draft:
          type: boolean
          description: Filter on the draft status of the function.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Webscript named versions listing query.
    IRebuildQueryV2:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        dryRun:
          type: boolean
          description: If set to <code>true</code>, checks whether rebuild jobs are
            needed, but do not start any jobs.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        upgrade:
          $ref: '#/components/schemas/ERebuildPolicy'
          description: If set, force a rebuild with the given <em>runtime</em> version
            selection policy. <ul>  <li><code>same</code> <b>patch</b> version.   This
            should only include backward compatible upgrades.  </li>  <li><code>minor</code>
            <b>major</b> version.   This might include an upgrade of e.g. the language
            runtime and/or provided   dependencies that could break compatiblity with
            the function. .</li> </ul>
        forceVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: If set, force a rebuild with the given runtime version (including
            downgrades). This parameter is mutually exclusive to the `upgrade` parameter.
        ignoreChecks:
          type: boolean
          description: 'If set to true, checks that normally prevent a rebuild are
            overriden. These checks include:

            * function state in `pending`, `running`, `failed` or `undeployed`

            * backoff period due to recent failures

            * usage of deprecated dependencies

            * running jobs on entity

            * the `dryRun` option'
        scaleToZero:
          type: boolean
          description: Indicates whether the function needs to be scaled down after
            successful (re-)deployment. If not set, the function is scaled to zero
            only if it was not active before this command.
        skipRebuild:
          type: boolean
          description: If set, the function will not be rebuild. Always uses the current
            runtime version when re-deploying/re-verifying the function.
      additionalProperties: false
    IRemovePlugQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        force:
          type: boolean
          description: If <code>true</code>, the plug version(s) will be undeployed
            and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
            i.e removed from regular listings.
        undeploy:
          type: boolean
          description: 'If `true`, the `DELETE` operation

            * undeploys the (openfaas) function for the plug: it becomes no longer
            available for invocation.

            * does NOT remove the plug from registry: it stays in an `undeployed`
            status.  All assets and definitions are retained, so the plug can be restored
            later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug version(s) as _deprecated_: the plug remains active
            but is removed from the default listings.   This also applies to _draft_
            versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.'
    IRemoveFunctionQueryV2:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        force:
          type: boolean
          description: 'If <code>true</code>, the function version will be immediately
            undeployed and removed.


            Otherwise, the removal will be delayed to allow current invocations to
            end. During that period, the function is marked _deprecated_.'
        undeploy:
          type: boolean
          description: 'If `true`, the `DELETE` operation

            * undeploys the (openfaas) function: it becomes no longer available for
            invocation.

            * does NOT remove the function from registry: it stays in an `undeployed`
            status.  All assets and definitions are retained, so the version can be
            restored later with a  _rebuild_ action.


            If `false`, the `DELETE` operation

            * _only_ marks the plug function as _deprecated_, the function remains
            active but is removed from the default listings.   This also applies to
            _draft_ versions.


            This parameter is incompatible with `force=true`.


            If not set the default behaviour applies:

            * _draft_ versions are _undeployed_ and _removed_ from registry.

            * non-_draft_ versions are marked _deprecated_ only.'
    IUpdateMetadataRequestV2:
      type: object
      additionalProperties: false
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: 'A category for this function (Deprecated: use tags to categorise
            your functions)'
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
          description: Tags associated with this function.
          examples:
          - - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
    IUserPlugMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: 'A category for this function (Deprecated: use tags to categorise
            your functions)'
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
          description: Tags associated with this function.
          examples:
          - - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
      description: Plug metadata that the user can update as `metadata`
    IFunctionMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: 'A category for this function (Deprecated: use tags to categorise
            your functions)'
          deprecated: true
    ITag:
      type: object
      properties:
        name:
          type: string
          description: Name of the tag
        color:
          type: string
          description: Color associated with the tag in an UI.
      required:
      - name
      - color
      description: One or more tags can be assigned to a function entity to facilitate
        grouping and searching.
    IGetContentParamsV2:
      type: object
      additionalProperties: false
      properties:
        '*':
          type: string
          description: Full path or path prefix of the asset within the archive
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
      - '*'
      - name
      - version
    IGetInvokableWebscriptQuery:
      type: object
      properties:
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, filters on the `version` of the webscript. Supports
            [version ranges](https://devhints.io/semver)
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: If set, filters on the `status` of the webscript.
          default:
          - running
          - deployed
          - unhealthy
      additionalProperties: false
    ICreateFunctionQueryV2:
      type: object
      properties:
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        dryRun:
          type: boolean
          description: If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        scaleToZero:
          type: boolean
          description: If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources when
            the function is not to be used immediately.
          default: false
        version:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: If set, the function version will be an increment of the latest
            existing version that satisfies the `version` range. Note that this increment
            always takes precedence over an explicit `version` in the function manifest.
        name:
          type: string
          description: If set, the value will be used as the function name instead
            of the one specified in the manifest.
        draft:
          type: boolean
          description: If set, the created function will be a draft function and its
            assets are still mutable. A build and deploy is initiated only in the
            case when all necessary assets are present and valid.
          default: false
      additionalProperties: false
    IPublishFunctionQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        deprecatePrevious:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          description: Set the cleanup policy used to automatically deprecate/delete
            previous versions.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
    IPatchMetadataQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    IPatchInterfaceQuery:
      type: object
      additionalProperties: false
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
    ISchemaParams:
      type: object
      properties:
        functionType:
          $ref: '#/components/schemas/EFunctionType'
          description: Function type
        role:
          $ref: '#/components/schemas/EAssetRole'
          description: Asset role
      required:
      - functionType
      - role
      additionalProperties: false
    EAssetRole:
      type: string
      enum:
      - manifest
      - project
      - main
      - lib
      - script
      - other
      description: Classification of assets with regard to their role.
    ISchemaByIdParams:
      type: object
      properties:
        schemaId:
          type: string
          description: Schema id
      required:
      - schemaId
      additionalProperties: false
    IUpdateDraftQuery:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        chown:
          type: boolean
          description: If set, ownership of the draft function is transferred to the
            current user.
          default: false
      required:
      - chown
      additionalProperties: false
    ILatestPlugQuery:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: Filter on the tags of the item. Can be a single tag, or a list
            of tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
        type:
          $ref: '#/components/schemas/EPlugType'
          description: Filter on the type of the plug.
      required:
      - type
      additionalProperties: false
    LegacyPlugQuery:
      type: object
      properties:
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        tags:
          $ref: '#/components/schemas/TagsFilter'
          description: Filter on the tags of the item. Can be a single tag, or a list
            of tags. When multiple tags are specified, an item must have all of the
            tags to be selected.
      additionalProperties: false
    ILegacyPlugRequest:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          type: object
          additionalProperties: false
          properties:
            requiredProperties:
              $ref: '#/components/schemas/LegacyRequiredProperties'
            supportedStates:
              type: array
              items:
                type: string
            rawData:
              type: array
              items:
                type: object
                properties:
                  parameter:
                    type: string
                  dataType:
                    $ref: '#/components/schemas/EPlugPropertyDataType'
                required:
                - parameter
                additionalProperties: false
            configuration:
              $ref: '#/components/schemas/LegacyConfiguration'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ITag'
            iconURL:
              type: string
            friendlyName:
              type: string
            documentation:
              anyOf:
              - type: object
                properties:
                  supportedStates:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                  configuration:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                  rawData:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                additionalProperties: false
              - $ref: '#/components/schemas/IDocumentation'
            documentationURL:
              type: string
        type:
          $ref: '#/components/schemas/EPlugType'
      required:
      - metadata
      - name
      - script
      - type
      - version
      additionalProperties: false
    LegacyPlugDependencies:
      type: object
      additionalProperties:
        type: string
    ILegacyPlugMetaRequest:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
        iconURL:
          type: string
        friendlyName:
          type: string
        documentation:
          anyOf:
          - type: object
            properties:
              supportedStates:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              configuration:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              rawData:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
            additionalProperties: false
          - $ref: '#/components/schemas/IDocumentation'
        documentationURL:
          type: string
      additionalProperties: false
    ILegacyFunctionMeta:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
        iconURL:
          type: string
        friendlyName:
          type: string
    IDocumentationProperty:
      type: object
      properties:
        name:
          type: string
          description: Name of the documented property.
        description:
          type: string
          description: Documentation of the property.
      required:
      - name
      - description
    IDocumentation:
      type: object
      properties:
        description:
          type: string
        states:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
          description: Documentation of the plug states.
        input:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
          description: Documentation of the plug input parameters.
        output:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
          description: Documentation of the plug response parameters.
    EPlugPropertyDataType:
      type: string
      enum:
      - string
      - integer
      - long
      - float
      - double
      - boolean
      - object
      description: Datatype supported in plug input or output properties.
    LegacyConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/ILegacyConfigurationObject'
    ILegacyConfigurationObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/EPlugPropertyDataType'
        mandatory:
          type: boolean
        format:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/EPlugPropertyFormatType'
            values:
              type: array
              items:
                $ref: '#/components/schemas/EnumValue'
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
      required:
      - name
      - type
    EPlugPropertyFormatType:
      type: string
      enum:
      - enum
      - resource
      - vault
      - duration
      - code
      - url
      - date
      - template
      description: Value domain for a plug input or output property.
    EnumValue:
      title: An allowed value for the property
    DefaultValue:
      title: A default value for the property
    LegacyRequiredProperties:
      type: array
      items:
        anyOf:
        - type: string
        - $ref: '#/components/schemas/ILegacyRequiredPropertyObject'
    ILegacyRequiredPropertyObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/EPlugPropertyDataType'
        mandatory:
          type: boolean
        sensitive:
          type: boolean
      required:
      - name
      - type
      - mandatory
      - sensitive
    ILegacyPlugCreateRequest:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          type: object
          additionalProperties: false
          properties:
            requiredProperties:
              $ref: '#/components/schemas/LegacyRequiredProperties'
            supportedStates:
              type: array
              items:
                type: string
            rawData:
              type: array
              items:
                type: object
                properties:
                  parameter:
                    type: string
                  dataType:
                    $ref: '#/components/schemas/EPlugPropertyDataType'
                required:
                - parameter
                additionalProperties: false
            configuration:
              $ref: '#/components/schemas/LegacyConfiguration'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ITag'
            iconURL:
              type: string
            friendlyName:
              type: string
            documentation:
              anyOf:
              - type: object
                properties:
                  supportedStates:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                  configuration:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                  rawData:
                    type: array
                    items:
                      $ref: '#/components/schemas/IDocumentationProperty'
                additionalProperties: false
              - $ref: '#/components/schemas/IDocumentation'
            documentationURL:
              type: string
        type:
          $ref: '#/components/schemas/EPlugType'
      additionalProperties: false
      required:
      - metadata
      - name
      - script
      - version
    NamedParameters_typeof_isNotLegacy_:
      type: object
      properties:
        documentation:
          anyOf:
          - type: object
            properties:
              supportedStates:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              configuration:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              rawData:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
            additionalProperties: false
          - $ref: '#/components/schemas/IDocumentation'
      additionalProperties: false
    NamedParameters_typeof_fromLegacyDocumentation_:
      type: object
      properties:
        legacyDocumentation:
          anyOf:
          - type: object
            properties:
              supportedStates:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              configuration:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
              rawData:
                type: array
                items:
                  $ref: '#/components/schemas/IDocumentationProperty'
            additionalProperties: false
          - $ref: '#/components/schemas/IDocumentation'
        currentInterface:
          $ref: '#/components/schemas/IPlugInterface'
      additionalProperties: false
    IPlugInterface:
      type: object
      properties:
        states:
          type: array
          items:
            type: string
          description: The states of a plug as implemented in the plug code.
        input:
          type: array
          items:
            $ref: '#/components/schemas/IPlugProperty'
          description: The named input parameters of a plug
        output:
          type: array
          items:
            $ref: '#/components/schemas/IPlugProperty'
          description: The named output parameters of a plug
    IPlugProperty:
      type: object
      properties:
        name:
          type: string
          description: The name of a plug input or output property.
        dataType:
          $ref: '#/components/schemas/EPlugPropertyDataType'
          description: The datatype of the property
        mandatory:
          type: boolean
          description: If <code>true</code> this property is required.
          examples:
          - true
        format:
          $ref: '#/components/schemas/IPlugPropertyFormat'
          description: If present, refines the value domain of the property.
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
          description: Default value assumed to be used when no value is given.
      required:
      - name
      description: Interface specification of a plug property.
    IPlugPropertyFormat:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EPlugPropertyFormatType'
          description: The value domain type for a plug property.
          examples:
          - enum
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnumValue'
          description: The enumerated value domain when <code>type="enum"</code>
          examples:
          - - low
            - high
    NamedParameters_typeof_fromLegacy_:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ILegacyPlugMetaRequest'
        currentInterface:
          $ref: '#/components/schemas/IPlugInterface'
      required:
      - metadata
      additionalProperties: false
    ILegacyDocumentationRequest:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
        supportedStates:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
        rawData:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
      required:
      - configuration
      - rawData
      - supportedStates
    ILegacyDocumentation:
      type: object
      properties:
        supportedStates:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
        rawData:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentationProperty'
      required:
      - supportedStates
      - configuration
      - rawData
    ILegacyDebugPlugRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EPlugType'
        script:
          type: string
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
      required:
      - script
      additionalProperties: false
    ILegacyDebugPlugManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        tenant:
          $ref: '#/components/schemas/TenantId'
        dependencies:
          $ref: '#/components/schemas/LegacyPlugDependencies'
        script:
          type: string
      required:
      - metadata
      - name
      - runtime
      - script
      - tenant
      - version
      additionalProperties: false
    IFunctionManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
      required:
      - metadata
      - name
      - runtime
      - version
    IFunctionSpec:
      type: object
      properties:
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
      required:
      - name
      - runtime
      - version
    IFunctionNameVersion:
      type: object
      properties:
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
      required:
      - name
      - version
    IFunctionDeployOverrides:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
    FunctionDeployOverridesType:
      type: object
      properties:
        envVars:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        limits:
          $ref: '#/components/schemas/ResourceLimits'
        requests:
          $ref: '#/components/schemas/ResourceLimits'
    ResourceLimits:
      type: object
      properties:
        memory:
          type: string
        cpu:
          type: string
      required:
      - memory
      - cpu
    TenantId:
      type: string
    ILegacyPlugCreateQuery:
      type: object
      properties:
        async:
          type: boolean
          description: If this is set to <code>true</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until the
            job actions are completed, or a timeout occurs.
          default: false
        dryRun:
          type: boolean
          description: If set to <code>true</true>, only validates the incoming request.
        scaleToZero:
          type: boolean
          description: If set to <code>true</true>, scales the function to zero after
            successful deployment.
      additionalProperties: false
    IKFServingLatestVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Model listing query
    IKFServingVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Named model versions query
    IKFServingDeleteQueryV1:
      type: object
      additionalProperties: false
      properties:
        async:
          type: boolean
          description: If this is set to <code>true</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until the
            job actions are completed, or a timeout occurs.
          default: false
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
    IWebscriptLatestVersionsQueryV1:
      type: object
      additionalProperties: false
      properties:
        limit:
          type: number
          description: The maximum number of items to be return from this query. Has
            a deployment-defined default and maximum value.
          minimum: 0
        page:
          type: number
          description: The number of pages to skip when returning result to this query.
          minimum: 0
        includeDraft:
          type: boolean
          description: Configures the inclusion of _draft_ versions when selecting
            latest versions per name. By default, draft versions are only considered
            when no other versions are available. If set to `true`, draft versions
            are **included**. If set to `false`, draft versions are **excluded**.
        includeDeprecated:
          type: boolean
          description: Configures the inclusion of _deprecated_ versions when selecting
            latest versions per name. By default, deprecated versions are only considered
            when no other versions are available. If set to `true`, deprecated versions
            are **included**. If set to `false`, deprecated versions are **excluded**.
        version:
          type: string
          description: Filter on the version of the function (case-sensitive, supports
            wildcards).
        status:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
          description: Filter on the status of the plug. Filter values with a `-`
            postfix exclude the status. Use the `any` filter value to include all
            states. When not specified, a default `undeployed-` filter excludes _undeployed_
            functions.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: Filter on the runtime version.
        createdBy:
          type: string
          description: Filter on the user that create the plug. You can use the `@me`
            token to indicate your own plugs.
          examples:
          - '@me'
        updatedBy:
          type: string
          description: Filter on the user that last updated the plug. You can use
            the `@me` token to indicate your own plugs.
          examples:
          - '@me'
        createdBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created before the given timestamp
            or age.
        createdAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were created after the given timestamp
            or age.
        updatedBefore:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated before the given timestamp
            or age.
        updatedAfter:
          $ref: '#/components/schemas/TimestampSpec'
          description: Filter on funtions that were updated after the given timestamp
            or age.
        name:
          type: string
          description: Filter on the name of the function. This is case-insensitive
            and supports wild-cards `?` (any one character) and `*` (any sequence
            of characters).
        archiveFormat:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
          description: Filter on the archive format of the function.
        runtime:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
          description: Filter on the runtime of the function.
      description: Webscript lastest versions listing query
    IForceDeleteQueryV1:
      type: object
      additionalProperties: false
      properties:
        async:
          type: boolean
          description: If this is set to <code>true</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. Otherwise, the request will block until the
            job actions are completed, or a timeout occurs.
          default: false
        force:
          type: boolean
          description: If <code>true</code>, the plug version(s) will be undeployed
            and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
            i.e removed from regular listings.
    IUpdateMetadataRequestV1:
      type: object
      additionalProperties: false
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: 'A category for this function (Deprecated: use tags to categorise
            your functions)'
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
          description: Tags associated with this function.
          examples:
          - - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
    IPatchPlugRequestV1:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/IUserPlugMeta'
      required:
      - metadata
      additionalProperties: false
    IVerifyQueryV1:
      type: object
      properties:
        scaleToZero:
          type: boolean
          description: Indicates whether the function needs to be scaled down after
            successful verification. If not set, the function is scaled to zero only
            if it was not active before this command.
      additionalProperties: false
    IAsyncDeployQueryV1:
      type: object
      additionalProperties: false
      properties:
        scaleToZero:
          type: boolean
          description: If set to <code>true</code>, after successful deployment, the
            deployed function will be scaled to zero. Saves computing resources when
            the function is not to be used immediately.
          default: false
        async:
          type: boolean
          description: Unless this is set to <code>false</code>, the server will start
            the required job actions asynchronously and return a <code>202</code>
            <em>Accepted</em> response. If <code>false</code> the request will block
            until the job actions are completed, or a timeout occurs.
          default: true
        dryRun:
          type: boolean
          description: If set to <code>true</code>, validates the deployment conditions,
            but does not change anything.
    IMessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    IErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
      - error
    IOperation:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        name:
          type: string
          deprecated: true
        type:
          $ref: '#/components/schemas/EJobType'
      required:
      - id
      - description
      - name
      - type
    IOperationStatus:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        name:
          type: string
          deprecated: true
        type:
          $ref: '#/components/schemas/EJobType'
        done:
          type: boolean
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
            stack:
              type: string
            code:
              type: string
          required:
          - code
          - message
          - name
      required:
      - description
      - done
      - id
      - name
      - type
    IJobSubmittedResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
      required:
      - _links
      - message
    IJobHALLinks:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/HALLink'
          description: Link to an SSE stream of job events for the submitted job(s).
          examples:
          - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
        job:
          $ref: '#/components/schemas/HALLink'
          description: Link to the job status page for the related entity.
          examples:
          - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
      description: HAL links to related actions.
    IJobStatusHALLink:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/HALLink'
          description: Link to the job status page for the related entity.
          examples:
          - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
      description: HAL links to related actions.
    HALLink:
      anyOf:
      - $ref: '#/components/schemas/IHALLink'
      - type: array
        items:
          $ref: '#/components/schemas/IHALLink'
      description: One or more links of the same HAL collection.
    IHALLink:
      type: object
      properties:
        href:
          type: string
      required:
      - href
    IJobEventsHALLink:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/HALLink'
          description: Link to an SSE stream of job events for the submitted job(s).
          examples:
          - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
      description: HAL links to related actions.
    IRebuildSubmittedResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
      required:
      - _links
      - causes
      - message
      description: Rebuild Initiated
    JobCauses:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/JobCause'
        deploy:
          $ref: '#/components/schemas/JobCause'
        verify:
          $ref: '#/components/schemas/JobCause'
        undeploy:
          $ref: '#/components/schemas/JobCause'
        scale:
          $ref: '#/components/schemas/JobCause'
      description: The motivations for including or excluding a job in response to
        a <em>rebuild</em> request.
    JobCause:
      type: object
      properties:
        changed:
          type: boolean
          description: If <code>true</code>, the argument configuration for this job
            has changed in comparison to the previous job execution. A <code>false</code>
            will prevent the job to be run. Use <code>forceVersion</code> or <code>upgrade</code>
            parameter to force a rebuild.
        reason:
          type: string
          description: Human readable message describing the cause.
        backoff:
          type: boolean
          description: If <code>true</code>, recent failures of the job prevented
            the re-execution. Use <code>forceVersion</code> or <code>upgrade</code>
            parameter to force a rebuild.
        newValue:
          type: string
          description: The new configuration value that causes the change.
        oldValue:
          type: string
          description: The old configuration value used by the last succeeded job.
      required:
      - changed
      - reason
      description: The motivation for including or excluding a job (<em>build</em>,
        <em>deploy</em>, <em>verify</em>, ...) in response to a <em>rebuild</em> request.
    IRebuildComputedResponse:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
      required:
      - causes
      - message
      description: Rebuild Ignored
    IRootPageResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the service.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: Semantic version of the service.
        enabled:
          type: object
          description: Description of the features enabled on this service deployment.
        revision:
          type: string
          description: Revision of the service source code.
      required:
      - name
      - version
      - enabled
      - revision
      description: Status Page
    PlugHtmlResponse:
      type: string
      description: Successful Response
    IRuntimeSummaryAttrs:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ERuntime'
        title:
          type: string
        description:
          type: string
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        archiveFormat:
          $ref: '#/components/schemas/EArchiveFormat'
      required:
      - name
      - title
      - functionType
      - archiveFormat
    IRuntimeSummary:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ERuntime'
        title:
          type: string
        description:
          type: string
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        archiveFormat:
          $ref: '#/components/schemas/EArchiveFormat'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/IRuntimeVersionInfo'
      required:
      - archiveFormat
      - functionType
      - name
      - title
      - versions
      description: A summary representation of the runtime, and (selected) versions
        of it.
    IRuntimeVersionInfo:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: If true, a newer runtime for this function is available using
            the `rebuild` API.
        version:
          $ref: '#/components/schemas/SemanticVersion'
        title:
          type: string
        description:
          type: string
      required:
      - deprecated
      - title
      - upgradable
      - version
      description: A summary of a selected version for a runtime
    IRuntimeVersionStatus:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: If true, a newer runtime for this function is available using
            the `rebuild` API.
      required:
      - deprecated
      - upgradable
    IRuntimeVersionSummary:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: If true, a newer runtime for this function is available using
            the `rebuild` API.
        version:
          $ref: '#/components/schemas/SemanticVersion'
        title:
          type: string
        description:
          type: string
        name:
          $ref: '#/components/schemas/ERuntime'
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        archiveFormat:
          $ref: '#/components/schemas/EArchiveFormat'
      required:
      - archiveFormat
      - deprecated
      - functionType
      - name
      - title
      - upgradable
      - version
    IRuntimeSummaryResponse:
      type: object
      properties:
        runtimes:
          type: array
          items:
            $ref: '#/components/schemas/IRuntimeSummary'
      required:
      - runtimes
      description: Runtimes Found
    IRuntimeVersionResponse:
      type: object
      properties:
        runtime:
          $ref: '#/components/schemas/CompiledRuntimeVersion'
      required:
      - runtime
      description: ': Runtime Version Found'
    CompiledRuntimeVersion:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
        upgradable:
          type: boolean
          description: If true, a newer runtime for this function is available using
            the `rebuild` API.
        name:
          type: string
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        archiveFormat:
          $ref: '#/components/schemas/EArchiveFormat'
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        title:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
      required:
      - archiveFormat
      - deprecated
      - functionType
      - name
      - title
      - upgradable
      - version
      description: Compiled build and deployment information for a runtime version.
        Contains all defaults applied on the _global_, _functionType_, _archiveFormat_,
        _runtime_ and _runtime version_ level.
    RuntimeVersionSpecification:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
        title:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
      required:
      - title
      - version
    RuntimeSpecification:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/BuildSpec'
        deploy:
          $ref: '#/components/schemas/DeploySpec'
        language:
          $ref: '#/components/schemas/LanguageRelease'
          description: Description of the language release
        providedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedDependency'
          description: Description of dependencies provided by this runtime version.
        assets:
          $ref: '#/components/schemas/AssetsConditions'
          description: Restrictions on the assets in the function archive.
        deprecated:
          type: boolean
          description: If true, this runtime should no longer be used for new functions.
      description: 'Runtime (version) specification that says

        * what assets are required/allowed to build the function

        * what build parameters are used

        * what deployment parameters are used

        * which dependencies are provided by the runtime'
    BuildSpec:
      type: object
      properties:
        context:
          type: string
        args:
          type: object
          additionalProperties:
            type: string
      required:
      - context
      - args
    DeploySpec:
      type: object
      properties:
        openfaasSpec:
          type: object
          properties:
            service:
              type: string
            image:
              type: string
            namespace:
              type: string
            envProcess:
              type: string
            network:
              type: string
            envVars:
              type: object
              additionalProperties:
                type: string
            constraints:
              type: array
              items:
                type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            secrets:
              type: array
              items:
                type: string
            registryAuth:
              type: string
            limits:
              $ref: '#/components/schemas/ResourceLimits'
            requests:
              $ref: '#/components/schemas/ResourceLimits'
            readOnlyRootFilesystem:
              type: boolean
          description: If specified, it overrides the properties in `default`. Non-specified
            properties are taken from `default`
    LanguageRelease:
      type: object
      properties:
        name:
          type: string
          description: Short technical name of the language or framework used.
        version:
          type: string
          description: Release version of the language or framework.
        title:
          type: string
          description: Display title.
        description:
          type: string
      required:
      - name
      - version
      - title
      description: Description of the language or framework release used by a runtime
        (version).
    ProvidedDependency:
      type: object
      properties:
        name:
          type: string
          description: Name of a provided dependency.
        title:
          type: string
          description: Optional display title.
        description:
          type: string
          description: Optional description.
        version:
          type: string
          description: Versions specification of a provided dependency
        deprecated:
          type: boolean
          description: If true, this provided dependency is scheduled for removal
            (or incompatible upgrade) in a next runtime version.
          default: false
        removed:
          type: boolean
          description: If true, this dependency has been removed from the runtime
            (version)
          default: false
        globals:
          type: array
          items:
            type: string
          description: Global variables that expose this library to the user code.
            As the usage of these globals is deprecated, any usage of such global
            will pose issues in an next runtime version.
        native:
          type: boolean
          description: 'If true, the library is provided natively by the runtime:
            e.g. node for javascript.'
      required:
      - name
      description: Library dependency that is provided by this runtime.
    AssetsConditions:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/AssetCondition'
          description: All files in a function archive are checked against these conditions.
            A file that is not matched is ignored.
        maxSize:
          type: string
          description: The maximum size of the archive (in bytes, unless unit is provided)
      description: Describes the assets that are required/allowed/supported for a
        function.
    AssetCondition:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/EAssetRole'
          description: Role in the function deployment
        pattern:
          anyOf:
          - type: string
          - type: array
            items:
              type: string
          description: Pattern that selects a file in a function archive
        contentType:
          anyOf:
          - type: string
          - type: array
            items:
              type: string
          description: Allowed content type(s) of matching files.
        min:
          type: number
          description: The minimal number of files that must match this pattern. Use
            `0` for an optional file.
          examples:
          - 0
        max:
          type: number
          description: The maximal number of files that can match this pattern. Use
            `0` for a disallowed file. This condition only raises an error if there
            are no other conditions that
          examples:
          - 1
        maxSize:
          type: string
          description: The maximum size for each file matching this pattern (in bytes,
            unless unit is provided)
        schema:
          description: The json schema validator that applies (in case of `application/json`
            entries).
      required:
      - role
      - pattern
      description: Describes conditions on the set of files that match a file pattern.
    RuntimeInfo:
      type: object
      properties:
        name:
          type: string
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        archiveFormat:
          $ref: '#/components/schemas/EArchiveFormat'
      required:
      - name
      - functionType
      - archiveFormat
      description: Runtime attributes that are the same for all versions of a runtime.
    IPlugResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IUpdateRecord'
          description: The audit logs corresponding to the latest modifying operations
            on this entity.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        runtime:
          $ref: '#/components/schemas/IRuntimeAttributes'
          description: Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: If <code>true</code> this plug is removed from regular listings,
            as a result of a <code>DELETE</code> with <code>force=false</code>.
        draft:
          type: boolean
          description: If <code>true</code> this function is a draft function and
            it's assets are still mutable.
        plug:
          $ref: '#/components/schemas/IPlugManifest'
          description: The plug specification as provided by the <code>plug.json</code>
            asset.
      required:
      - createdAt
      - createdBy
      - deprecated
      - draft
      - plug
      - runtime
      - status
      - updatedAt
      - updatedBy
      - updates
    IWithEntityAttributes:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IUpdateRecord'
          description: The audit logs corresponding to the latest modifying operations
            on this entity.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        runtime:
          $ref: '#/components/schemas/IRuntimeAttributes'
          description: Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: If <code>true</code> this function is deprecated and removed
            from regular listings.
        draft:
          type: boolean
          description: If <code>true</code> this function is a draft function and
            it's assets are still mutable.
      required:
      - createdBy
      - createdAt
      - updatedBy
      - updatedAt
      - updates
      - status
      - runtime
      - deprecated
      - draft
    IUpdateRecord:
      type: object
      properties:
        comment:
          type: string
          description: An optional user-specified comment corresponding to the operation.
        operation:
          $ref: '#/components/schemas/ERequestOperation'
          description: The type of modifying operation.
        jobs:
          type: array
          items:
            type: string
          description: The job id's of the corresponding jobs, if applicable.
        at:
          type: string
          format: date-time
        by:
          type: string
          description: The user that initiated this operation.
      required:
      - at
      - by
      - operation
      description: An update report corresponding to a modifying operation initiated
        by a user/administrator on the entity.
    ERequestOperation:
      type: string
      enum:
      - create
      - metadata-update
      - assets-update
      - rebuild
      - verify
      - publish
      - deprecate
      - undeploy
      description: A modifying operation on the function.
    EStatus:
      type: string
      enum:
      - registered
      - running
      - pending
      - deployed
      - unhealthy
      - killed
      - failed
      - undeploying
      - undeployed
      description: Status for a deployed function.
    FailureReason:
      anyOf:
      - $ref: '#/components/schemas/IFailureReason'
      - type: string
    IFailureReason:
      type: object
      properties:
        log:
          type: array
          items:
            type: string
          description: Log lines associated with this failure.
        events:
          type: array
          items:
            type: string
          description: Events associated with this failure.
        cause:
          type: string
          description: Main cause for the failure.
      required:
      - log
      - events
    IRuntimeAttributes:
      type: object
      properties:
        deprecated:
          type: boolean
          description: If true, the function uses a deprecated runtime.
        upgradable:
          type: boolean
          description: If true, a newer runtime for this function is available using
            the `rebuild` API.
        name:
          $ref: '#/components/schemas/ERuntime'
          description: The name of a runtime
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of a runtime
      required:
      - deprecated
      - name
      - upgradable
      - version
    RuntimeReference:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ERuntime'
          description: The name of a runtime
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of a runtime
      required:
      - name
      - version
      description: Reference to a runtime version.
    IPlugManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IPlugMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be patched for the deployed plug, as long it does not
            affect the runtime behaviour.
        type:
          $ref: '#/components/schemas/EPlugType'
          description: Type of the plug.
        interface:
          $ref: '#/components/schemas/IPlugInterface'
          description: Description of the user interface of the plug, as visible to
            end-users when configuring plug nodes in the rule engine.
      required:
      - interface
      - metadata
      - name
      - runtime
      - type
      - version
    IPlugMeta:
      type: object
      properties:
        author:
          type: string
          description: The author of the function.
        description:
          type: string
          description: A description of the function
        iconURL:
          type: string
          description: An url to an icon that represents this function.
        category:
          type: string
          description: 'A category for this function (Deprecated: use tags to categorise
            your functions)'
          deprecated: true
        documentationURL:
          type: string
          description: External url that document this function.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
          description: Tags associated with this function.
          examples:
          - - name: awaiting-review
              color: '#4153ea'
            - name: demo
              color: '#e639a4'
        friendlyName:
          type: string
          description: Display title for this function.
        documentation:
          $ref: '#/components/schemas/IDocumentation'
          description: Documentation of the plug interface.
    IKfservingResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IUpdateRecord'
          description: The audit logs corresponding to the latest modifying operations
            on this entity.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        runtime:
          $ref: '#/components/schemas/IRuntimeAttributes'
          description: Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: If <code>true</code> this function is deprecated and removed
            from regular listings.
        draft:
          type: boolean
          description: If <code>true</code> this function is a draft function and
            it's assets are still mutable.
        model:
          $ref: '#/components/schemas/IKFServingManifest'
          description: The model specification as provided by the <code>model.json</code>
            asset.
      required:
      - createdAt
      - createdBy
      - deprecated
      - draft
      - model
      - runtime
      - status
      - updatedAt
      - updatedBy
      - updates
    IKFServingManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
      required:
      - metadata
      - name
      - runtime
      - version
    IWebscriptResponseV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IUpdateRecord'
          description: The audit logs corresponding to the latest modifying operations
            on this entity.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        runtime:
          $ref: '#/components/schemas/IRuntimeAttributes'
          description: Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: If <code>true</code> this function is deprecated and removed
            from regular listings.
        draft:
          type: boolean
          description: If <code>true</code> this function is a draft function and
            it's assets are still mutable.
        webscript:
          $ref: '#/components/schemas/IWebscriptManifest'
          description: The webscript specification as provided by the <code>webscript.json</code>
            asset.
        secret:
          type: string
          description: The secret for this webscript deployment. This is <code>null</code>
            when <code>allowHmac=false</code> in the webscript specificaton.
      required:
      - createdAt
      - createdBy
      - deprecated
      - draft
      - runtime
      - status
      - updatedAt
      - updatedBy
      - updates
      - webscript
    IWebscriptManifest:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        private:
          type: boolean
          description: If <code>true</code> this webscript will require authentication.
        allowHmac:
          type: boolean
          description: If <code>true</code> this webscript will support authentication
            with a <em>HMAC</em> key, available as the <code>secret</code> attribute
            of the deployed webscript entity.
      required:
      - allowHmac
      - metadata
      - name
      - private
      - runtime
      - version
    IWebscriptResponseWithInvokeLinkV2:
      type: object
      properties:
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        updates:
          type: array
          items:
            $ref: '#/components/schemas/IUpdateRecord'
          description: The audit logs corresponding to the latest modifying operations
            on this entity.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        runtime:
          $ref: '#/components/schemas/IRuntimeAttributes'
          description: Information about the current runtime used by this function
            deployment.
        deprecated:
          type: boolean
          description: If <code>true</code> this function is deprecated and removed
            from regular listings.
        draft:
          type: boolean
          description: If <code>true</code> this function is a draft function and
            it's assets are still mutable.
        webscript:
          $ref: '#/components/schemas/IWebscriptManifest'
          description: The webscript specification as provided by the <code>webscript.json</code>
            asset.
        secret:
          type: string
          description: The secret for this webscript deployment. This is <code>null</code>
            when <code>allowHmac=false</code> in the webscript specificaton.
        _links:
          $ref: '#/components/schemas/IInvokeHALLink'
          description: HAL links to related actions.
      required:
      - createdAt
      - createdBy
      - deprecated
      - draft
      - runtime
      - status
      - updatedAt
      - updatedBy
      - updates
      - webscript
    IInvokeHALLink:
      type: object
      properties:
        invoke:
          $ref: '#/components/schemas/IHALLink'
          description: HAL link to the endpoint where the webscript is exposed.
          examples:
          - href: https://api-aws-dev.waylay.io/functions/v1/<TENANT>/myWebscript
    IUndeploySubmittedResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SemanticVersion'
          description: The versions for which undeployment and/or removal is initiated.
      required:
      - _links
      - message
      - versions
      description: Undeployment Initiated
    IUndeployedResponseV2:
      type: object
      properties:
        message:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SemanticVersion'
          description: The versions that where deprecated, undeployed and/or removed.
      required:
      - message
      - versions
      description: Undeployed
    IContentValidationListing:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/IAssetSummaryWithHALLink'
      required:
      - assets
      description: Content listing
    IAssetSummaryWithHALLink:
      type: object
      properties:
        _links:
          type: object
          properties:
            asset:
              $ref: '#/components/schemas/HALLink'
              description: Link to the asset content page for the related entity.
              examples:
              - href: https://api.waylay.io/registry/v2/plugs/myPlug/versions/1.0.0/content/index.js
          required:
          - asset
          description: HAL links to the asset
        name:
          type: string
          description: File name
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/EAssetRole'
      required:
      - _links
      - name
    IAssetSummary:
      type: object
      properties:
        name:
          type: string
          description: File name
        title:
          type: string
        description:
          type: string
        role:
          $ref: '#/components/schemas/EAssetRole'
      required:
      - name
    IWithAssetHALLink:
      type: object
      properties:
        _links:
          type: object
          properties:
            asset:
              $ref: '#/components/schemas/HALLink'
              description: Link to the asset content page for the related entity.
              examples:
              - href: https://api.waylay.io/registry/v2/plugs/myPlug/versions/1.0.0/content/index.js
          required:
          - asset
          description: HAL links to the asset
      required:
      - _links
    IGetPlugResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            draft:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                  - true
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
              - deprecated
              - draft
              - href
              - version
              description: Link to the lastest draft version.
              examples:
              - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.0.1
                draft: true
                deprecated: false
            published:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                  - false
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
              - deprecated
              - draft
              - href
              - version
              description: Link to the lastest published version.
              examples:
              - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.2.0
                draft: false
                deprecated: false
            jobs:
              $ref: '#/components/schemas/IHALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related jobs and plugs
      required:
      - _links
      - entity
      description: Plug Found
    IJobsHALLink:
      type: object
      properties:
        jobs:
          $ref: '#/components/schemas/IHALLink'
          description: HAL link to all active jobs for this function (if any)
    IAltVersionHALLink:
      type: object
      properties:
        draft:
          type: object
          properties:
            draft:
              type: boolean
              enum:
              - true
            href:
              type: string
            version:
              type: string
            deprecated:
              type: boolean
          required:
          - deprecated
          - draft
          - href
          - version
          description: Link to the lastest draft version.
          examples:
          - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
            version: 1.0.1
            draft: true
            deprecated: false
        published:
          type: object
          properties:
            draft:
              type: boolean
              enum:
              - false
            href:
              type: string
            version:
              type: string
            deprecated:
              type: boolean
          required:
          - deprecated
          - draft
          - href
          - version
          description: Link to the lastest published version.
          examples:
          - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
            version: 1.2.0
            draft: false
            deprecated: false
    ILatestPlugsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/IAltVersionHALLink'
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/IUpdateRecord'
                description: The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/EStatus'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/IRuntimeAttributes'
                description: Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: If <code>true</code> this plug is removed from regular
                  listings, as a result of a <code>DELETE</code> with <code>force=false</code>.
              draft:
                type: boolean
                description: If <code>true</code> this function is a draft function
                  and it's assets are still mutable.
              plug:
                $ref: '#/components/schemas/IPlugManifest'
                description: The plug specification as provided by the <code>plug.json</code>
                  asset.
            required:
            - _links
            - createdAt
            - createdBy
            - deprecated
            - draft
            - plug
            - runtime
            - status
            - updatedAt
            - updatedBy
            - updates
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Plugs Found
    IWithPaging:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
      required:
      - count
    IWithLimit:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
    IPlugVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Plugs Versions Found
    IPostPlugJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function for
            which a task was initiated.
      required:
      - _links
      - entity
      - message
      description: Plug Deployment Initiated
    IPostPlugJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
      required:
      - entity
      - message
      description: Plug Deployed
    IRebuildPlugAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function for
            which rebuild jobs were initiated.
      required:
      - _links
      - causes
      - entity
      - message
      description: Plug Rebuild Initiated
    IRebuildPlugSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function for
            which rebuild status is computed.
      required:
      - causes
      - entity
      - message
      description: Plug Rebuild Ignored
    IVerifyPlugSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IPlugResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
        result:
          $ref: '#/components/schemas/IVerifyResult'
      required:
      - entity
      - message
      - result
      description: Plug Health Verified
    IVerifyResult:
      type: object
      properties:
        healthy:
          type: boolean
          description: If true, the deployment check succeeded.
        replicas:
          type: number
          description: The number of replicas this function was running at the time
            of the check.
      required:
      - healthy
      description: The result data for a completed verification job.
      title: Verify
    IJobsForPlugResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was archived
            on the entity.
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            plug:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
      - function
      - jobs
      description: Plug Jobs Found
    AnyJobForFunction:
      anyOf:
      - type: object
        properties:
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: Links to events if the job is still active.
          type:
            type: string
            description: The type of the background task.
            title: Build
            enum:
            - build
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          request:
            $ref: '#/components/schemas/IBuildArgs'
            description: The request that initiated this job.
          result:
            $ref: '#/components/schemas/IBuildResult'
            description: The result of the job if completed.
          createdAt:
            type: string
            format: date-time
            description: The timestamp of creation of this job
          createdBy:
            type: string
            description: The user that created this job
          operation:
            type: string
            description: Request operation
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be missing
              for batch jobs.
          job:
            $ref: '#/components/schemas/JobStatus'
            description: Detailed technical status of the job, if available.
          failureReason:
            $ref: '#/components/schemas/FailureReason'
            description: Failure reason if available
        required:
        - createdAt
        - createdBy
        - operation
        - state
        - type
        title: Build
      - type: object
        properties:
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: Links to events if the job is still active.
          type:
            type: string
            description: The type of the background task.
            title: Deploy
            enum:
            - deploy
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          request:
            $ref: '#/components/schemas/IDeployArgs'
            description: The request that initiated this job.
          result:
            $ref: '#/components/schemas/IDeployResult'
            description: The result of the job if completed.
          createdAt:
            type: string
            format: date-time
            description: The timestamp of creation of this job
          createdBy:
            type: string
            description: The user that created this job
          operation:
            type: string
            description: Request operation
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be missing
              for batch jobs.
          job:
            $ref: '#/components/schemas/JobStatus'
            description: Detailed technical status of the job, if available.
          failureReason:
            $ref: '#/components/schemas/FailureReason'
            description: Failure reason if available
        required:
        - createdAt
        - createdBy
        - operation
        - state
        - type
        title: Deploy
      - type: object
        properties:
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: Links to events if the job is still active.
          type:
            type: string
            description: The type of the background task.
            title: Verify
            enum:
            - verify
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          request:
            $ref: '#/components/schemas/IVerifyArgs'
            description: The request that initiated this job.
          result:
            $ref: '#/components/schemas/IVerifyResult'
            description: The result of the job if completed.
          createdAt:
            type: string
            format: date-time
            description: The timestamp of creation of this job
          createdBy:
            type: string
            description: The user that created this job
          operation:
            type: string
            description: Request operation
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be missing
              for batch jobs.
          job:
            $ref: '#/components/schemas/JobStatus'
            description: Detailed technical status of the job, if available.
          failureReason:
            $ref: '#/components/schemas/FailureReason'
            description: Failure reason if available
        required:
        - createdAt
        - createdBy
        - operation
        - state
        - type
        title: Verify
      - type: object
        properties:
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: Links to events if the job is still active.
          type:
            type: string
            description: The type of the background task.
            title: Undeploy
            enum:
            - undeploy
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          request:
            $ref: '#/components/schemas/IUndeployArgs'
            description: The request that initiated this job.
          result:
            $ref: '#/components/schemas/IUndeployResult'
            description: The result of the job if completed.
          createdAt:
            type: string
            format: date-time
            description: The timestamp of creation of this job
          createdBy:
            type: string
            description: The user that created this job
          operation:
            type: string
            description: Request operation
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be missing
              for batch jobs.
          job:
            $ref: '#/components/schemas/JobStatus'
            description: Detailed technical status of the job, if available.
          failureReason:
            $ref: '#/components/schemas/FailureReason'
            description: Failure reason if available
        required:
        - createdAt
        - createdBy
        - operation
        - state
        - type
        title: Undeploy
      - type: object
        properties:
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: Links to events if the job is still active.
          type:
            type: string
            description: The type of the background task.
            enum:
            - scale
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          request:
            $ref: '#/components/schemas/IScaleArgs'
            description: The request that initiated this job.
          result:
            $ref: '#/components/schemas/IScaleResult'
            description: The result of the job if completed.
          createdAt:
            type: string
            format: date-time
            description: The timestamp of creation of this job
          createdBy:
            type: string
            description: The user that created this job
          operation:
            type: string
            description: Request operation
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be missing
              for batch jobs.
          job:
            $ref: '#/components/schemas/JobStatus'
            description: Detailed technical status of the job, if available.
          failureReason:
            $ref: '#/components/schemas/FailureReason'
            description: Failure reason if available
        required:
        - createdAt
        - createdBy
        - operation
        - state
        - type
        title: Scale
    IBuildArgs:
      type: object
      properties:
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        storageLocation:
          type: string
          description: Location of the function assets.
        imageName:
          type: string
          description: Provided (or defaulted) image name to publish the function
            image.
        args:
          type: object
          additionalProperties:
            type: string
          description: Parameters to the runtime configuration.
      required:
      - args
      - imageName
      - runtimeName
      - runtimeVersion
      - storageLocation
      description: Input arguments to a job that builds a function.
      title: Build
    IFunctionJobArgs:
      type: object
      properties:
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
      required:
      - runtimeName
      - runtimeVersion
      description: Job arguments shared by all function jobs
    IBuildResult:
      type: object
      properties:
        digest:
          type: string
          description: SHA digest of the built image.
        log:
          type: array
          items:
            type: string
          description: Detailed logs of the build steps.
        status:
          type: string
          description: Outcome of the build.
      required:
      - digest
      title: Build
    IFunctionRef:
      type: object
      properties:
        functionType:
          $ref: '#/components/schemas/EFunctionType'
          description: Function type
        name:
          type: string
          description: The logical name for the function.
        version:
          type: string
          description: The semantic version of the function (all versions if undefined)
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: Runtime id
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Runtime version
      required:
      - functionType
      - name
    JobStatus:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        progress:
          anyOf:
          - type: number
          - type: object
        attemptsMade:
          type: number
        finishedOn:
          type: string
          format: date-time
        processedOn:
          type: string
          format: date-time
        failedReason:
          type: string
        parent:
          $ref: '#/components/schemas/ParentKeys'
        delay:
          type: number
      required:
      - id
      - name
      - progress
      - attemptsMade
    ParentKeys:
      type: object
      properties:
        id:
          type: string
      required:
      - id
    IDeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        imageName:
          type: string
          description: The image name to use for deploying this function
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        deploySpecOverrides:
          type: object
          properties:
            service:
              type: string
            image:
              type: string
            namespace:
              type: string
            envProcess:
              type: string
            network:
              type: string
            envVars:
              type: object
              additionalProperties:
                type: string
            constraints:
              type: array
              items:
                type: string
            labels:
              type: object
              additionalProperties:
                type: string
            annotations:
              type: object
              additionalProperties:
                type: string
            secrets:
              type: array
              items:
                type: string
            registryAuth:
              type: string
            limits:
              $ref: '#/components/schemas/ResourceLimits'
            requests:
              $ref: '#/components/schemas/ResourceLimits'
            readOnlyRootFilesystem:
              type: boolean
          description: Overrides on the deployment specification.
      required:
      - deploySpecOverrides
      - endpoint
      - imageName
      - namespace
      - runtimeName
      - runtimeVersion
      description: Input argument to an (openfaas) deployment job for a function.
      title: Deploy
    IOpenfaasDeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        imageName:
          type: string
          description: The image name to use for deploying this function
      required:
      - endpoint
      - imageName
      - namespace
    IOpenfaasFunctionRef:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
      required:
      - namespace
      - endpoint
    IDeployResult:
      type: object
      properties:
        deploySpec:
          $ref: '#/components/schemas/IExposedOpenfaasDeploySpec'
          description: The deployment parameters used for this function deployment.
      required:
      - deploySpec
      description: The result data for a completed deployment job.
      title: Deploy
    IExposedOpenfaasDeploySpec:
      type: object
      properties:
        service:
          type: string
        image:
          type: string
        namespace:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        limits:
          $ref: '#/components/schemas/ResourceLimits'
        requests:
          $ref: '#/components/schemas/ResourceLimits'
      required:
      - image
      - namespace
      - service
    IVerifyArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
      required:
      - endpoint
      - namespace
      - runtimeName
      - runtimeVersion
      description: Input arguments for an (openfaas) deployment verification job.
      title: Verify
    IUndeployArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        isNativePlug:
          type: boolean
          description: If true, the function is not expected to be deployed on openfaas.
        deleteEntity:
          type: boolean
      required:
      - deleteEntity
      - endpoint
      - isNativePlug
      - namespace
      - runtimeName
      - runtimeVersion
      description: Input argument to an (openfaas) undeployment job for a function.
      title: Undeploy
    IUndeployResult:
      type: object
      properties:
        deployment:
          type: boolean
        assets:
          type: boolean
        registration:
          type: boolean
      required:
      - deployment
      - assets
      - registration
      description: The result data for a completed undeployment job.
      title: Undeploy
    IScaleArgs:
      type: object
      properties:
        namespace:
          type: string
          description: The (openfaas) namespace for the target function.
        endpoint:
          type: string
          description: The (openfaas) endpoint service name
        runtimeName:
          $ref: '#/components/schemas/ERuntime'
          description: Provided (or defaulted) name of the runtime configuration.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersion'
          description: Provided (or defaulted) version of the runtime configuration.
        revision:
          type: string
          description: The revision hash of the current (draft) function revision
        replicas:
          type: number
          description: Number of target replicas
      required:
      - endpoint
      - namespace
      - replicas
      - runtimeName
      - runtimeVersion
      description: Input argument to an (openfaas) scale job for a function.
      title: Scale
    IScaleResult:
      type: object
      description: The result data for a completed scale job.
      title: Scale
    IGetModelResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            draft:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                  - true
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
              - deprecated
              - draft
              - href
              - version
              description: Link to the lastest draft version.
              examples:
              - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.0.1
                draft: true
                deprecated: false
            published:
              type: object
              properties:
                draft:
                  type: boolean
                  enum:
                  - false
                href:
                  type: string
                version:
                  type: string
                deprecated:
                  type: boolean
              required:
              - deprecated
              - draft
              - href
              - version
              description: Link to the lastest published version.
              examples:
              - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
                version: 1.2.0
                draft: false
                deprecated: false
            jobs:
              $ref: '#/components/schemas/IHALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related jobs and plugs
      required:
      - _links
      - entity
      description: Model Found
    ILatestModelsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/IAltVersionHALLink'
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/IUpdateRecord'
                description: The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/EStatus'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/IRuntimeAttributes'
                description: Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: If <code>true</code> this function is deprecated and
                  removed from regular listings.
              draft:
                type: boolean
                description: If <code>true</code> this function is a draft function
                  and it's assets are still mutable.
              model:
                $ref: '#/components/schemas/IKFServingManifest'
                description: The model specification as provided by the <code>model.json</code>
                  asset.
            required:
            - _links
            - createdAt
            - createdBy
            - deprecated
            - draft
            - model
            - runtime
            - status
            - updatedAt
            - updatedBy
            - updates
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Models Found
    IModelVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Model Versions Found
    IPostModelJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function for
            which a task was initiated.
      required:
      - _links
      - entity
      - message
      description: Model Deployment Initiated
    IPostModelJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
      required:
      - entity
      - message
      description: Model Deployed
    IRebuildModelAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function for
            which rebuild jobs were initiated.
      required:
      - _links
      - causes
      - entity
      - message
      description: Model Rebuild Initiated
    IRebuildModelSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function for
            which rebuild status is computed.
      required:
      - causes
      - entity
      - message
      description: Model Rebuild Ignored
    IVerifyModelSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IKfservingResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
        result:
          $ref: '#/components/schemas/IVerifyResult'
      required:
      - entity
      - message
      - result
      description: Model Health Verified
    IJobsForModelResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was archived
            on the entity.
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            model:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
      - function
      - jobs
      description: Model Jobs Found
    IGetWebscriptResponseV2:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function
        _links:
          type: object
          properties:
            invoke:
              $ref: '#/components/schemas/IHALLink'
              description: HAL link to the endpoint where the webscript is exposed.
              examples:
              - href: https://api-aws-dev.waylay.io/functions/v1/<TENANT>/myWebscript
            jobs:
              $ref: '#/components/schemas/IHALLink'
              description: HAL link to all active jobs for this function (if any)
          description: HAL links to related actions.
      required:
      - _links
      - entity
      description: Webscript Found
    ILatestWebscriptsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            type: object
            properties:
              _links:
                $ref: '#/components/schemas/IInvokeHALLink'
                description: HAL links to related actions.
              createdBy:
                type: string
                description: The user that created this entity.
              createdAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was created.
              updatedBy:
                type: string
                description: The user that last updated this entity.
              updatedAt:
                type: string
                format: date-time
                description: The timestamp at which this entity was last updated.
              updates:
                type: array
                items:
                  $ref: '#/components/schemas/IUpdateRecord'
                description: The audit logs corresponding to the latest modifying
                  operations on this entity.
              status:
                $ref: '#/components/schemas/EStatus'
                description: The current status of this function entity.
              failureReason:
                $ref: '#/components/schemas/FailureReason'
                description: A description of the last failure related to this function
                  entity.
              runtime:
                $ref: '#/components/schemas/IRuntimeAttributes'
                description: Information about the current runtime used by this function
                  deployment.
              deprecated:
                type: boolean
                description: If <code>true</code> this function is deprecated and
                  removed from regular listings.
              draft:
                type: boolean
                description: If <code>true</code> this function is a draft function
                  and it's assets are still mutable.
              webscript:
                $ref: '#/components/schemas/IWebscriptManifest'
                description: The webscript specification as provided by the <code>webscript.json</code>
                  asset.
              secret:
                type: string
                description: The secret for this webscript deployment. This is <code>null</code>
                  when <code>allowHmac=false</code> in the webscript specificaton.
            required:
            - _links
            - createdAt
            - createdBy
            - deprecated
            - draft
            - runtime
            - status
            - updatedAt
            - updatedBy
            - updates
            - webscript
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Webscripts Found
    IWebscriptVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/IWebscriptResponseWithInvokeLinkV2'
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Webscript Versions Found
    IPostWebscriptJobAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function for
            which a task was initiated.
      required:
      - _links
      - entity
      - message
      description: Webscript Deployment Initiated
    IPostWebscriptJobSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
      required:
      - entity
      - message
      description: Webscript Deployed
    IRebuildWebscriptAsyncResponseV2:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function for
            which rebuild jobs were initiated.
      required:
      - _links
      - causes
      - entity
      - message
      description: Webscript Rebuild Initiated
    IRebuildWebscriptSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        causes:
          $ref: '#/components/schemas/JobCauses'
          description: Motivation for (not) scheduling rebuild actions
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function for
            which rebuild status is computed.
      required:
      - causes
      - entity
      - message
      description: Webscript Rebuild Ignored
    IVerifyWebscriptSyncResponseV2:
      type: object
      properties:
        message:
          type: string
        entity:
          $ref: '#/components/schemas/IWebscriptResponseV2'
          description: The specification and deployment status of the function for
            which a task was completed.
        result:
          $ref: '#/components/schemas/IVerifyResult'
      required:
      - entity
      - message
      - result
      description: Webscript Health Verified
    IJobsForWebscriptResponseV2:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobForFunction'
          description: Listing of jobs related to the function deployment. This includes
            active jobs, and the most recently failed job (per type) that was archived
            on the entity.
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Function reference.
        _links:
          type: object
          properties:
            webscript:
              $ref: '#/components/schemas/HALLink'
          additionalProperties: false
          description: Link to the function entity.
      required:
      - function
      - jobs
      description: Webscript Jobs Found
    IInvokableWebscriptResponse:
      type: object
      properties:
        entity:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/EStatus'
            draft:
              type: boolean
            webscript:
              type: object
              properties:
                name:
                  type: string
                version:
                  $ref: '#/components/schemas/SemanticVersion'
                private:
                  type: boolean
                allowHmac:
                  type: boolean
              required:
              - name
              - version
              - private
              - allowHmac
            secret:
              type: string
          required:
          - status
          - draft
          - webscript
        _links:
          $ref: '#/components/schemas/IInvokeInternalHALLink'
      required:
      - entity
      - _links
      description: Webscript Found
    IInvokeInternalHALLink:
      type: object
      properties:
        invoke-internal:
          $ref: '#/components/schemas/IHALLink'
          description: HAL link to the Openfaas endpoint.
          examples:
          - href: openfaas:/functions/web-a7420ffdf5ffe5b573a57f766aed38552a4e1421.openfaas-fn-740799ef-d515-4704-8718-903851c9899e
    IUnhealthyInvokableWebscriptError:
      type: object
      properties:
        entity:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/EStatus'
            draft:
              type: boolean
            webscript:
              type: object
              properties:
                name:
                  type: string
                version:
                  $ref: '#/components/schemas/SemanticVersion'
                private:
                  type: boolean
                allowHmac:
                  type: boolean
              required:
              - name
              - version
              - private
              - allowHmac
            secret:
              type: string
          required:
          - status
          - draft
          - webscript
        _links:
          $ref: '#/components/schemas/IInvokeInternalHALLink'
        error:
          type: string
        code:
          type: string
      required:
      - _links
      - code
      - entity
      - error
      description: Webscript Not Healthy
    AnyFunctionResponse:
      anyOf:
      - $ref: '#/components/schemas/IPlugResponseV2'
      - $ref: '#/components/schemas/IKfservingResponseV2'
      - $ref: '#/components/schemas/IWebscriptResponseV2'
    IVersionsResponseV2:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        page:
          type: number
          description: The page number of a paged query result.
        entities:
          type: array
          items:
            $ref: '#/components/schemas/AnyFunctionResponse'
          description: The specification and deployment status of the queried functions
      required:
      - count
      - entities
      description: Version Listing Response
    NamedParameters_typeof_asJobReference_:
      type: object
      properties:
        jobStatus:
          type: object
          properties:
            _links:
              $ref: '#/components/schemas/IJobHALLinks'
              description: Links to events if the job is still active.
            type:
              description: The type of the background task.
            state:
              $ref: '#/components/schemas/JobStateResult'
              description: The current processing state of the job
            request:
              description: The request that initiated this job.
            result:
              description: The result of the job if completed.
            createdAt:
              type: string
              format: date-time
              description: The timestamp of creation of this job
            createdBy:
              type: string
              description: The user that created this job
            operation:
              type: string
              description: Request operation
            function:
              $ref: '#/components/schemas/IFunctionRef'
              description: The function entity that this job acts on, will be missing
                for batch jobs.
            job:
              $ref: '#/components/schemas/JobStatus'
              description: Detailed technical status of the job, if available.
            failureReason:
              $ref: '#/components/schemas/FailureReason'
              description: Failure reason if available
          required:
          - createdAt
          - createdBy
          - operation
          - state
          - type
      required:
      - jobStatus
      additionalProperties: false
    BuildJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          title: Build
          enum:
          - build
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IBuildArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IBuildResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Build
    DeployJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          title: Deploy
          enum:
          - deploy
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IDeployArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IDeployResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Deploy
    VerifyJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          title: Verify
          enum:
          - verify
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IVerifyArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IVerifyResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Verify
    UndeployJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          title: Undeploy
          enum:
          - undeploy
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IUndeployArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IUndeployResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Undeploy
    ScaleJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          enum:
          - scale
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IScaleArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IScaleResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Scale
    BatchJobStatus:
      type: object
      properties:
        type:
          type: string
          description: The type of the background task.
          title: Batch
          enum:
          - batch
        state:
          $ref: '#/components/schemas/JobStateResult'
          description: The current processing state of the job
        request:
          $ref: '#/components/schemas/IBatchArgs'
          description: The request that initiated this job.
        result:
          $ref: '#/components/schemas/IBatchResult'
          description: The result of the job if completed.
        createdAt:
          type: string
          format: date-time
          description: The timestamp of creation of this job
        createdBy:
          type: string
          description: The user that created this job
        operation:
          type: string
          description: Request operation
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: The function entity that this job acts on, will be missing
            for batch jobs.
        job:
          $ref: '#/components/schemas/JobStatus'
          description: Detailed technical status of the job.
      required:
      - createdAt
      - createdBy
      - job
      - operation
      - request
      - state
      - type
      title: Batch
    IBatchArgs:
      type: object
      properties:
        plugName:
          type: string
        functionType:
          $ref: '#/components/schemas/EFunctionType'
        childType:
          type: string
      required:
      - plugName
      - functionType
      title: Batch
    IBatchResult:
      type: object
      properties:
        jobCount:
          type: number
      title: Batch
    AnyJobStatus:
      anyOf:
      - $ref: '#/components/schemas/BuildJobStatus'
      - $ref: '#/components/schemas/DeployJobStatus'
      - $ref: '#/components/schemas/VerifyJobStatus'
      - $ref: '#/components/schemas/UndeployJobStatus'
      - $ref: '#/components/schemas/ScaleJobStatus'
      - $ref: '#/components/schemas/BatchJobStatus'
    IJobResponse:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/AnyJobStatus'
          description: Information about the job.
        _links:
          $ref: '#/components/schemas/IJobEventsAndFunctionHALLink'
      required:
      - job
      - _links
      description: Job Found
    IJobEventsAndFunctionHALLink:
      anyOf:
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          plug:
            $ref: '#/components/schemas/HALLink'
            description: Link to the plug.
            examples:
            - href: https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
        required:
        - plug
        title: Plug
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          webscript:
            $ref: '#/components/schemas/HALLink'
            description: Link to the webscript.
            examples:
            - href: https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
        required:
        - webscript
        title: Webscript
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          model:
            $ref: '#/components/schemas/HALLink'
            description: Link to the model.
            examples:
            - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
        required:
        - model
        title: Model
      - $ref: '#/components/schemas/IJobEventsHALLink'
        title: No Function
      description: HAL links to related actions.
    AnyJobStatusSummary:
      anyOf:
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            title: Build
            enum:
            - build
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobAndFunctionHALLink'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Build
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            title: Deploy
            enum:
            - deploy
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobAndFunctionHALLink'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Deploy
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            title: Verify
            enum:
            - verify
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobAndFunctionHALLink'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Verify
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            title: Undeploy
            enum:
            - undeploy
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobAndFunctionHALLink'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Undeploy
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            enum:
            - scale
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobAndFunctionHALLink'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Scale
      - type: object
        properties:
          type:
            type: string
            description: The type of the background task.
            title: Batch
            enum:
            - batch
          operation:
            type: string
            description: The operation name for the background task.
          id:
            type: string
            description: The id of the background job, or the constant `_unknown_`
          state:
            $ref: '#/components/schemas/JobStateResult'
            description: The current processing state of the job
          createdAt:
            type: string
            format: date-time
            description: The creation time of this job
          createdBy:
            type: string
            description: The user that initiated this job
          function:
            $ref: '#/components/schemas/IFunctionRef'
            description: The function entity that this job acts on, will be `undefined`
              for batch jobs.
          _links:
            $ref: '#/components/schemas/IJobHALLinks'
            description: HAL links to related the job status, SSE stream, and function
              entity if relevant.
        required:
        - _links
        - createdAt
        - createdBy
        - id
        - operation
        - state
        - type
        title: Batch
    IJobAndFunctionHALLink:
      anyOf:
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          plug:
            $ref: '#/components/schemas/HALLink'
            description: Link to the plug.
            examples:
            - href: https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
        required:
        - plug
        title: Plug
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          webscript:
            $ref: '#/components/schemas/HALLink'
            description: Link to the webscript.
            examples:
            - href: https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
        required:
        - webscript
        title: Webscript
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/HALLink'
            description: Link to an SSE stream of job events for the submitted job(s).
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/events?type=undeploy&id=6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht&children=true
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          model:
            $ref: '#/components/schemas/HALLink'
            description: Link to the model.
            examples:
            - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
        required:
        - model
        title: Model
      - $ref: '#/components/schemas/IJobHALLinks'
        title: No Function
      description: HAL links to related actions.
    IJobsResponse:
      type: object
      properties:
        limit:
          type: number
          description: The page size used for this query result.
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/AnyJobStatusSummary'
          description: Listing of jobs that satisfy the query.
      required:
      - jobs
      description: Jobs Found
    EventAck:
      type: string
      enum:
      - ack
    EventClose:
      type: string
      enum:
      - close
    EventKeepAlive:
      type: string
      enum:
      - keep-alive
    EventTypeSSE:
      anyOf:
      - $ref: '#/components/schemas/ESupportedEvents'
      - $ref: '#/components/schemas/EventAck'
      - $ref: '#/components/schemas/EventClose'
      - $ref: '#/components/schemas/EventKeepAlive'
    ESupportedEvents:
      type: string
      enum:
      - completed
      - failed
      - active
      - delayed
      - waiting
      - waiting-children
    ActiveEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - active
        data:
          $ref: '#/components/schemas/IJobEventResponse_ActiveEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Active
    IJobEventResponse_ActiveEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/ActiveEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_ActiveEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/ActiveEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    JobReference:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EJobType'
        id:
          type: string
      required:
      - type
    ActiveEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/EQueueEvents'
          description: The previous state of the job
    EQueueEvents:
      type: string
      enum:
      - completed
      - failed
      - active
      - delayed
      - waiting
      - waiting-children
      - added
      - cleaned
      - drained
      - error
      - paused
      - progress
      - removed
      - resumed
      - retries-exhausted
      - stalled
    IJobStatusAndEntityHALLinks:
      anyOf:
      - type: object
        properties:
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          plug:
            $ref: '#/components/schemas/HALLink'
            description: Link to the plug.
            examples:
            - href: https://api.waylay.io/registry/v2/plugs/plugName/versions/1.0.1
        required:
        - plug
        title: Plug
      - type: object
        properties:
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          webscript:
            $ref: '#/components/schemas/HALLink'
            description: Link to the webscript.
            examples:
            - href: https://api.waylay.io/registry/v2/webscripts/webscriptName/versions/1.0.1
        required:
        - webscript
        title: Webscript
      - type: object
        properties:
          job:
            $ref: '#/components/schemas/HALLink'
            description: Link to the job status page for the related entity.
            examples:
            - href: https://api.waylay.io/registry/v2/jobs/undeploy/6ccc8843-d78d-49e8-84c4-3734a4af9929$IfM2FyNLQ8CEjQGA9w7Ht
          model:
            $ref: '#/components/schemas/HALLink'
            description: Link to the model.
            examples:
            - href: https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1
        required:
        - model
        title: Model
      - $ref: '#/components/schemas/IJobStatusHALLink'
        title: No Function
      description: HAL links to related actions.
    CompletedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - completed
        data:
          $ref: '#/components/schemas/IJobEventResponse_CompletedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Completed
    IJobEventResponse_CompletedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/CompletedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_CompletedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/CompletedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    CompletedEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/EQueueEvents'
          description: The previous state of the job
        returnValue:
          $ref: '#/components/schemas/AnyJobResult'
          description: The return value of the job
      required:
      - returnValue
    AnyJobResult:
      anyOf:
      - $ref: '#/components/schemas/IBuildResult'
      - $ref: '#/components/schemas/IDeployResult'
      - $ref: '#/components/schemas/IVerifyResult'
      - $ref: '#/components/schemas/IUndeployResult'
      - $ref: '#/components/schemas/IScaleResult'
      - $ref: '#/components/schemas/IBatchResult'
      - $ref: '#/components/schemas/ICleanupResult'
    ICleanupResult:
      type: object
      properties:
        scheduledJob:
          $ref: '#/components/schemas/JobReference'
      description: The result data for a completed cleanup job.
      title: Cleanup
    FailedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - failed
        data:
          $ref: '#/components/schemas/IJobEventResponse_FailedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Failed
    IJobEventResponse_FailedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/FailedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_FailedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/FailedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    FailedEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/EQueueEvents'
          description: The previous state of the job
        failedReason:
          type: string
          description: The failure reason of the job
      required:
      - failedReason
    DelayedEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - delayed
        data:
          $ref: '#/components/schemas/IJobEventResponse_DelayedEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Delayed
    IJobEventResponse_DelayedEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/DelayedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_DelayedEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/DelayedEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    DelayedEventData:
      type: object
      properties:
        delay:
          type: number
      required:
      - delay
    WaitingEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - waiting
        data:
          $ref: '#/components/schemas/IJobEventResponse_WaitingEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Waiting
    IJobEventResponse_WaitingEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_WaitingEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    WaitingEventData:
      type: object
      properties:
        prev:
          $ref: '#/components/schemas/EQueueEvents'
          description: The previous state of the job
    WaitingChildrenEventSSE:
      type: object
      properties:
        event:
          type: string
          description: The job queue event that trigged this message
          enum:
          - waiting-children
        data:
          $ref: '#/components/schemas/IJobEventResponse_WaitingChildrenEventData_'
          description: The payload message (json-encoded in the `text/eventstream`).
      required:
      - event
      - data
      description: A message that notifies a state change in a background job.
      title: Waiting Children
    IJobEventResponse_WaitingChildrenEventData_:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/IJobStatusAndEntityHALLinks'
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingChildrenEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
        function:
          $ref: '#/components/schemas/IFunctionRef'
          description: Information of entity for which this job is executing .
      required:
      - _links
      - data
      - function
      - job
      - timestamp
      description: Event object describing a state change of a background job.
    IJobEventPayload_WaitingChildrenEventData_:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobReference'
          description: A reference to the background job
        data:
          $ref: '#/components/schemas/WaitingChildrenEventData'
          description: Additional data for the event
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the event
      required:
      - job
      - data
      - timestamp
    WaitingChildrenEventData:
      type: object
    JobEventSSE:
      anyOf:
      - $ref: '#/components/schemas/ActiveEventSSE'
      - $ref: '#/components/schemas/CompletedEventSSE'
      - $ref: '#/components/schemas/FailedEventSSE'
      - $ref: '#/components/schemas/DelayedEventSSE'
      - $ref: '#/components/schemas/WaitingEventSSE'
      - $ref: '#/components/schemas/WaitingChildrenEventSSE'
      title: Job Event
    KeepAliveEventSSE:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EventKeepAlive'
        data:
          type: string
          description: A text message acknowledging that events will be forwarded.
      required:
      - event
      description: A message that acknowledges that the stream is still alive.
      title: Keep Alive
    EventSSE:
      anyOf:
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/EventAck'
          data:
            type: string
            description: A text message acknowledging what events will be forwarded.
        required:
        - event
        - data
        description: A message that acknowledges that the server will sent job state
          changes.
        title: Stream Ready
      - $ref: '#/components/schemas/JobEventSSE'
      - $ref: '#/components/schemas/KeepAliveEventSSE'
      description: SSE stream events without closing protocol
    EventWithCloseSSE:
      anyOf:
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/EventAck'
          data:
            type: string
            description: A text message acknowledging what events will be forwarded.
        required:
        - event
        - data
        description: A message that acknowledges that the server will sent job state
          changes.
        title: Stream Ready
      - $ref: '#/components/schemas/JobEventSSE'
      - $ref: '#/components/schemas/KeepAliveEventSSE'
      - type: object
        properties:
          event:
            $ref: '#/components/schemas/EventClose'
          data:
            type: string
            description: A text message describing the cause for closing the stream.
        required:
        - event
        - data
        description: A message that notifies that the server will not send more events,
          and that the client should close.
        title: Stream Closing
      description: SSE stream events with closing protocol
    ILegacyPlugCreateResponse:
      type: object
      properties:
        statusCode:
          type: number
        uri:
          type: string
        entity:
          $ref: '#/components/schemas/ILegacyPlugScriptResponse'
      required:
      - entity
      - statusCode
      - uri
    IStatusResponse:
      type: object
      properties:
        statusCode:
          type: number
      required:
      - statusCode
    ILegacyPlugScriptResponse:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        type:
          $ref: '#/components/schemas/EPlugType'
        script:
          type: string
        metadata:
          $ref: '#/components/schemas/ILegacyPlugScriptMeta'
        dependencies:
          type: object
      required:
      - name
      - version
      - type
      - script
      - metadata
      - dependencies
    ILegacyPlugScriptMeta:
      type: object
      properties:
        author:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ITag'
        iconURL:
          type: string
        friendlyName:
          type: string
        supportedStates:
          type: array
          items:
            type: string
        rawData:
          type: array
          items:
            type: object
            properties:
              parameter:
                type: string
              dataType:
                type: string
            required:
            - parameter
        requiredProperties:
          $ref: '#/components/schemas/LegacyRequiredProperties'
      required:
      - supportedStates
      - rawData
    ILegacyPlugResponse:
      type: object
      properties:
        name:
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'
        author:
          type: string
        category:
          type: string
        iconURL:
          type: string
        documentationURL:
          type: string
        isDeprecated:
          type: boolean
        description:
          type: string
        states:
          type: array
          items:
            type: string
        rawData:
          type: array
          items:
            type: object
        mediaType:
          $ref: '#/components/schemas/EMediaType'
        configuration:
          type: array
          items:
            $ref: '#/components/schemas/ILegacyConfigurationResponseObject'
        commands:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/EStatus'
        failureReason:
          $ref: '#/components/schemas/FailureReason'
        metadata:
          type: object
          properties:
            documentation:
              $ref: '#/components/schemas/ILegacyDocumentation'
            author:
              type: string
            description:
              type: string
            category:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/ITag'
            iconURL:
              type: string
            friendlyName:
              type: string
      required:
      - name
      - version
      - isDeprecated
      - mediaType
      - commands
      - status
      - metadata
    EMediaType:
      type: string
      enum:
      - application/javascript
      - application/java-vm
      - text/x-python
      - text/x-golang
    ILegacyConfigurationResponseObject:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/EPlugPropertyDataType'
        mandatory:
          type: boolean
        format:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/EPlugPropertyFormatType'
            values:
              type: array
              items:
                $ref: '#/components/schemas/EnumValue'
        defaultValue:
          $ref: '#/components/schemas/DefaultValue'
        sensitive:
          type: boolean
      required:
      - name
      - type
    LegacyPlugHtmlResponse:
      type: string
      description: The documentation html of a plug.
    ILegacyCreateDebugResponse:
      type: object
      properties:
        functionName:
          type: string
      required:
      - functionName
    IMessageAndStatusResponse:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
      required:
      - message
      - statusCode
    IErrorAndStatusResponse:
      type: object
      properties:
        error:
          type: string
        statusCode:
          type: number
      required:
      - error
      - statusCode
    IEntityResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/IJobHALLinks'
          description: Links to related entities.
      required:
      - createdAt
      - createdBy
      - metadata
      - name
      - runtime
      - status
      - updatedAt
      - updatedBy
      - version
    IPlugResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/IJobHALLinks'
          description: Links to related entities.
        isDeprecated:
          type: boolean
      required:
      - createdAt
      - createdBy
      - isDeprecated
      - metadata
      - name
      - runtime
      - status
      - updatedAt
      - updatedBy
      - version
    IPlugListingResponse:
      type: object
      properties:
        plugs:
          type: array
          items:
            $ref: '#/components/schemas/IPlugResponse'
      required:
      - plugs
      description: Successful Response
    IPagingResponse:
      type: object
      properties:
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        limit:
          type: number
          description: The page size used for this query result.
        page:
          type: number
          description: The page number of a paged query result.
    IPlugListingAndQueryResponse:
      type: object
      properties:
        count:
          type: number
          description: The total count of matching items, from which this result is
            one page.
        limit:
          type: number
          description: The page size used for this query result.
        page:
          type: number
          description: The page number of a paged query result.
        plugs:
          type: array
          items:
            $ref: '#/components/schemas/IPlugResponse'
      required:
      - plugs
      description: Successful Response
    ICreatePlugAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IPlugManifest'
      required:
      - _links
      - entity
      - message
      description: Successful Response
    IWebscriptResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/IJobHALLinks'
          description: Links to related entities.
        secret:
          type:
          - string
          - 'null'
      required:
      - createdAt
      - createdBy
      - metadata
      - name
      - runtime
      - secret
      - status
      - updatedAt
      - updatedBy
      - version
      description: Successful Response
    ICreateWebscriptAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IWebscriptManifest'
      required:
      - _links
      - entity
      - message
      description: Successful Response
    IKFServingResponse:
      type: object
      properties:
        deploy:
          $ref: '#/components/schemas/FunctionDeployOverridesType'
          description: Deployment overrides of the function.
        name:
          type: string
          description: The logical name for the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The semantic version of the function.
        runtime:
          $ref: '#/components/schemas/ERuntime'
          description: The runtime that specifies how this function should be built
            and deployed. This could be overridden or modified on initial deployment
            or later rebuild.
        runtimeVersion:
          $ref: '#/components/schemas/SemanticVersionRange'
          description: An optional runtime version constraint for deployment of the
            function. When not set, the latest runtime version is used for build and
            deployment. When set, the latest available <em>patch</em> version with
            the same <code>minor</code> version is used. Note that, after deployment,
            this runtime version can become obsolete with a <code>rebuild</code> action.
        metadata:
          $ref: '#/components/schemas/IFunctionMeta'
          description: Metadata describing the function. Note that, after deployment,
            this metadata can be updated for the deployed function, without affecting
            the runtime behaviour of the function itself.
        createdBy:
          type: string
          description: The user that created this entity.
        createdAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was created.
        updatedBy:
          type: string
          description: The user that last updated this entity.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp at which this entity was last updated.
        status:
          $ref: '#/components/schemas/EStatus'
          description: The current status of this function entity.
        failureReason:
          $ref: '#/components/schemas/FailureReason'
          description: A description of the last failure related to this function
            entity.
        _links:
          type: array
          items:
            $ref: '#/components/schemas/IJobHALLinks'
          description: Links to related entities.
      required:
      - createdAt
      - createdBy
      - metadata
      - name
      - runtime
      - status
      - updatedAt
      - updatedBy
      - version
      description: Successful Response
    IKFServingModelsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/IKFServingResponse'
        paging:
          $ref: '#/components/schemas/IPagingResponse'
      required:
      - models
      description: Successful Response
    ICreateKFServingAsyncResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        entity:
          $ref: '#/components/schemas/IKFServingManifest'
      required:
      - _links
      - entity
      - message
      description: Model Deployment Initiated
    IKFServingDeleteMultipleResponse:
      type: object
      properties:
        name:
          type: string
        versions:
          type: array
          items:
            type: string
      required:
      - name
      - versions
      description: Models Deleted
    IKFServingDeleteMultipleWithJobResponse:
      type: object
      properties:
        name:
          type: string
        versions:
          type: array
          items:
            type: string
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
      required:
      - _links
      - message
      - name
      - versions
      description: Model Deletions Initiated
    IKFServingDeleteResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
      - name
      - version
      description: Model Deleted
    IKFServingDeleteWithJobResponse:
      type: object
      properties:
        message:
          type: string
        _links:
          $ref: '#/components/schemas/IJobHALLinks'
        name:
          type: string
          description: The name of the function.
        version:
          $ref: '#/components/schemas/SemanticVersion'
          description: The version of the function.
      required:
      - _links
      - message
      - name
      - version
      description: Model Delete Initiated
paths:
  /registry/v2/:
    get:
      operationId: get_about
      summary: Get Service Status
      tags:
      - About
      description: Get the status and version of the function registry service.
      x-version: v2
      responses:
        default:
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRootPageResponse'
      security: &id001
      - waylayApiKeySecret: []
  /registry/v2/jobs/:
    get:
      operationId: list_jobs
      summary: List Jobs
      tags:
      - Jobs
      description: List all background jobs for the users tenant.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
        in: query
        name: type
        required: false
        description: Filter on job type
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
        in: query
        name: state
        required: false
        description: Filter on job state
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        in: query
        name: functionType
        required: false
        description: Filter on function type
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on jobs that created before the given timestamp or age
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on jobs that created after the given timestamp or age
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IJobsResponse'
      security: *id001
  /registry/v2/jobs/{type}/{id}:
    get:
      operationId: get_jobs
      summary: Get Job
      tags:
      - Jobs
      description: Get a background job by type and id.
      parameters:
      - schema:
          $ref: '#/components/schemas/EJobType'
        in: path
        name: type
        required: true
      - schema:
          type: string
        in: path
        name: id
        required: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IJobResponse'
      security: *id001
  /registry/v2/jobs/events:
    get:
      operationId: events_jobs
      summary: Stream Events
      tags:
      - Jobs
      description: "Get an SSE stream of all job events for the users tenant.\n The\
        \ stream can be filtered on job type or on a specific job id.\n\n When filtering\
        \ on job id, the server will send a <code>close</code> event\n upon completion\
        \ of the job. The client should handle this event by closing the stream.\n\
        \ "
      parameters:
      - schema:
          $ref: '#/components/schemas/EJobType'
        in: query
        name: type
        required: false
        description: The type of the job.
      - schema:
          type: string
        in: query
        name: id
        required: false
        description: The id of the job.
      - schema:
          type: boolean
        in: query
        name: children
        required: false
        description: If set to <code>true</code>, the event stream will include events
          of the job's dependants. E.g., when subscribing to a verify job with `children=true`,
          you will also receive the events of the underlying build and deploy jobs.
          Defaults to <code>false</code>.
      x-version: v2
      responses:
        '200':
          description: Events Streaming
          content:
            text/eventstream:
              schema:
                $ref: '#/components/schemas/EventWithCloseSSE'
      security: *id001
  /registry/v2/runtimes/:
    get:
      operationId: list_runtimes
      summary: List Runtimes
      tags:
      - Runtimes
      description: List the runtimes that function registry supports.
      parameters:
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
          default: '*'
        in: query
        name: version
        required: false
        description: If set, filters on the <code>version</code> of a runtime. Supports
          [version ranges](https://devhints.io/semver).
      - schema:
          $ref: '#/components/schemas/LatestVersionLevel'
          default: minor
        example: minor
        in: query
        name: latest
        required: false
        description: 'If set, filters on the level of latest versions that will be
          included in the query.

          * `major`: include at most one latest version per name and major release.

          * `minor`: include at most one latest version per name and minor release.

          * `patch`: include each matching patch version.

          * `true`: include the latest matching version.

          * `false`: include any matching version (same as `patch`).


          This filter is applied after all other selection criteria.'
      - schema:
          type: boolean
          default: false
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          type: string
        example: node*
        in: query
        name: name
        required: false
        description: If set, filters on the <code>name</code> of a runtime. Supports
          <code>*</code> and <code>?</code> wildcards and is case-insensitive.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        example: plugs
        in: query
        name: functionType
        required: false
        description: If set, filters on the <code>functionType</code> of a runtime.
          Uses an exact match.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        example: node
        in: query
        name: archiveFormat
        required: false
        description: If set, filters on the <code>archiveFormat</code> of a runtime.
          Uses an exact match.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRuntimeSummaryResponse'
      security: *id001
  /registry/v2/runtimes/{name}:
    get:
      operationId: getLatest_runtimes
      summary: Get Latest Runtime Version
      tags:
      - Runtimes
      description: Get a representation of the default runtime version by name.
      parameters:
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
          default: '*'
        in: query
        name: version
        required: false
        description: If set, filters on the <code>version</code> of a runtime. Supports
          [version ranges](https://devhints.io/semver).
      - schema:
          type: boolean
          default: false
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        example: plugs
        in: query
        name: functionType
        required: false
        description: If set, filters on the <code>functionType</code> of a runtime.
          Uses an exact match.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        example: node
        in: query
        name: archiveFormat
        required: false
        description: If set, filters on the <code>archiveFormat</code> of a runtime.
          Uses an exact match.
      - schema:
          $ref: '#/components/schemas/ERuntime'
        in: path
        name: name
        required: true
        description: The name of a <em>runtime</em>
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRuntimeVersionResponse'
      security: *id001
  /registry/v2/runtimes/{name}/versions:
    get:
      operationId: listVersions_runtimes
      summary: List Runtime Versions
      tags:
      - Runtimes
      description: List the supported versions of a specific runtime.
      parameters:
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
          default: '*'
        in: query
        name: version
        required: false
        description: If set, filters on the <code>version</code> of a runtime. Supports
          [version ranges](https://devhints.io/semver).
      - schema:
          $ref: '#/components/schemas/LatestVersionLevel'
          default: minor
        example: minor
        in: query
        name: latest
        required: false
        description: 'If set, filters on the level of latest versions that will be
          included in the query.

          * `major`: include at most one latest version per name and major release.

          * `minor`: include at most one latest version per name and minor release.

          * `patch`: include each matching patch version.

          * `true`: include the latest matching version.

          * `false`: include any matching version (same as `patch`).


          This filter is applied after all other selection criteria.'
      - schema:
          type: boolean
          default: false
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        example: plugs
        in: query
        name: functionType
        required: false
        description: If set, filters on the <code>functionType</code> of a runtime.
          Uses an exact match.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        example: node
        in: query
        name: archiveFormat
        required: false
        description: If set, filters on the <code>archiveFormat</code> of a runtime.
          Uses an exact match.
      - schema:
          $ref: '#/components/schemas/ERuntime'
        in: path
        name: name
        required: true
        description: The name of a <em>runtime</em>
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRuntimeSummaryResponse'
      security: *id001
  /registry/v2/runtimes/{name}/versions/{version}:
    get:
      operationId: get_runtimes
      summary: Get Runtime Version
      tags:
      - Runtimes
      description: Get a representation of the default runtime version by name.
      parameters:
      - schema:
          type: boolean
          default: true
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          $ref: '#/components/schemas/ERuntime'
        in: path
        name: name
        required: true
        description: The name of a <em>runtime</em>
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: path
        name: version
        required: true
        description: A version range for a <em>runtime</em>
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRuntimeVersionResponse'
      security: *id001
  /registry/v2/runtimes/{name}/versions/{version}/example:
    get:
      operationId: exampleArchive_runtimes
      summary: Get Runtime Example Archive
      tags:
      - Runtimes
      description: Get an example of the specification archive of the runtime.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: boolean
          default: true
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          $ref: '#/components/schemas/ERuntime'
        in: path
        name: name
        required: true
        description: The name of a <em>runtime</em>
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: path
        name: version
        required: true
        description: A version range for a <em>runtime</em>
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
  /registry/v2/runtimes/{name}/versions/{version}/example/{*}:
    get:
      operationId: getExampleAsset_runtimes
      summary: Get File From Runtime Example Archive
      tags:
      - Runtimes
      description: Get a file from the example specification archive of the runtime.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: boolean
          default: true
        in: query
        name: includeDeprecated
        required: false
        description: If set to `true`, deprecated runtimes will be included in the
          query.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          $ref: '#/components/schemas/ERuntime'
        in: path
        name: name
        required: true
        description: The name of a <em>runtime</em>
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: path
        name: version
        required: true
        description: A version range for a <em>runtime</em>
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Runtime example archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
  /registry/v2/webscripts/:
    post:
      operationId: create_webscript_functions
      summary: Create Webscript Version
      tags:
      - Webscript Functions
      description: "Creates a new <em>webscript</em> function by uploading its assets.\n\
        \  \n  The assets for a <em>webscript</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n  \n  The required <code>webscript.json</code> json file contains\
        \ the function metadata,\n  and must have a <code>runtime</code> attribute\
        \ that is one of the supported <em>runtime</em>s \n  (see <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
        \n  For each <em>runtime</em> other files will be required or supported.\n\
        \n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>webscript.json</code> json file\
                \ contains the function metadata,\n  and must have a <code>runtime</code>\
                \ attribute that is one of the supported <em>runtime</em>s \n  (see\
                \ <code>GET /registry/v2/runtimes?functionType=webscripts</code>).\n\
                \n  For each <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>webscript</em> function can be provided\
          \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n  \n  The required <code>webscript.json</code>\
          \ json file contains the function metadata,\n  and must have a <code>runtime</code>\
          \ attribute that is one of the supported <em>runtime</em>s \n  (see <code>GET\
          \ /registry/v2/runtimes?functionType=webscripts</code>).\n\n  For each <em>runtime</em>\
          \ other files will be required or supported.\n"
      parameters:
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: patch
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, validates the deployment conditions,
          but does not change anything.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: scaleToZero
        required: false
        description: If set to <code>true</code>, after successful deployment, the
          deployed function will be scaled to zero. Saves computing resources when
          the function is not to be used immediately.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: version
        required: false
        description: If set, the function version will be an increment of the latest
          existing version that satisfies the `version` range. Note that this increment
          always takes precedence over an explicit `version` in the function manifest.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: If set, the value will be used as the function name instead of
          the one specified in the manifest.
      - schema:
          type: boolean
          default: false
        in: query
        name: draft
        required: false
        description: If set, the created function will be a draft function and its
          assets are still mutable. A build and deploy is initiated only in the case
          when all necessary assets are present and valid.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
      security: *id001
    get:
      operationId: list_webscript_functions
      summary: List Webscripts
      tags:
      - Webscript Functions
      description: "List the (latest) versions of available <em>webscripts</em>.\n\
        \n### List Latest Webscript Versions\nBy default, the result includes the\
        \ latest non-deprecated, non-draft version for each <em>webscript</em> name.\n\
        If there is no such version, the latest _deprecated_ or the latest _draft_\
        \ version is included, with the former taking precedence.\n\n\n  Use the boolean\
        \ query parameters <code>includeDeprecated</code> or <code>includeDraft</code>\
        \ to change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        As long as no _version filters_ are used, each listed <em>webscript version</em>\
        \ item will contain a HAL **link to the \nlatest** _draft_ (`entities[]._links.draft`)\
        \ or latest _published_ (`entities[]._links.publisned`) version (if existing\
        \ and different).\n\n### List Latest Webscript Versions (with filter)\nWhen\
        \ any of the _version filter_ query parameters are used, the response contains\n\
        the _latest_ version per named <em>webscript</em> that satisfy the filters,\
        \ but **without links**.\n\n### List All Webscript Versions\nWhen using `latest=false`\
        \ (default when using the `namedVersion` filter), the listing contains _all_\
        \ \n<em>webscripts</em> versions that satisfy the query, possibly multiple\
        \ versions per named <em>webscripts</em>.\nNo HAL links are provided.\n\n\
        #### Filter on _status_\nBy default <em>webscript versions</em> with status\
        \  `undeployed` are **excluded** in all cases.\nUse the _version filter_ `status`\
        \ to include/exclude a status from the results.\nBy example, \n> `?status=any&includeDeprecated=true&includeDraft=true&latest=false`\n\
        \nwill list _ALL_ versions known to the function registry.\n\n#### Version\
        \ filter parameters\nThe following query parameters are _version filters_\
        \ for the <em>webscript</em> listing:\n> `version`, `status`, `runtimeVersion`,\
        \ `createdBy`, `createdBefore`, `createdAfter`, `updatedBy`, `updatedBefore`,\
        \ `updatedAfter`, `nameVersion`, `deprecated`, `draft`\n"
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
        in: query
        name: nameVersion
        required: false
        description: Filter on exact `{name}@{version}` functions. Using this filter
          implies a `latest=false` default, returning multiple versions of the same
          named versions if they are filtered.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: Filter on the name of the function. This is case-insensitive
          and supports wild-cards `?` (any one character) and `*` (any sequence of
          characters).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: boolean
        in: query
        name: latest
        required: false
        description: When `true`, only the latest version per function name is returned.
          If set to `false`, multiple versions per named function can be returned.
          Defaults to `true`, except when specific versions are selected with the
          `nameVersion` filter.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ILatestWebscriptsResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions:
    get:
      operationId: listVersions_webscript_functions
      summary: List Webscript Versions
      tags:
      - Webscript Functions
      description: List all deployed versions of a webscript.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IWebscriptVersionsResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}:
    get:
      operationId: get_webscript_functions
      summary: Get Webscript Version
      tags:
      - Webscript Functions
      description: Get the webscript version.
      parameters:
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetWebscriptResponseV2'
      security: *id001
    delete:
      operationId: removeVersion_webscript_functions
      summary: Remove Webscript Version
      tags:
      - Webscript Functions
      description: "Deprecate, undeploy and/or remove a <em>webscript</em> version.\n\
        \n  By default, a `DELETE` \n  * _deprecates_ the webscript version(s): they\
        \ are no longer included in listings by default.\n  * _undeploys_ the webscript\
        \ version(s) with delay: the function can no longer be invoked, the small\
        \ delay allows\n    other services to discover the removal.\n  * _removes_\
        \ the version(s) from the plug registry.\n\n  Use `?force=true` to immediately\
        \ _undeploy_ and _remove_ without delay.\n\n  Use `?undeploy=true` to undeploy,\
        \ but keep the webscript version registered in a `undeployed` state.\n  An\
        \ `undeployed` version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: 'If <code>true</code>, the function version will be immediately
          undeployed and removed.


          Otherwise, the removal will be delayed to allow current invocations to end.
          During that period, the function is marked _deprecated_.'
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function: it becomes no longer available for
          invocation.

          * does NOT remove the function from registry: it stays in an `undeployed`
          status.  All assets and definitions are retained, so the version can be
          restored later with a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug function as _deprecated_, the function remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_webscript_functions
      summary: Rebuild Webscript
      tags:
      - Webscript Functions
      description: Rebuild and deploy a webscript with the original or updated base
        image.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, checks whether rebuild jobs are
          needed, but do not start any jobs.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          $ref: '#/components/schemas/ERebuildPolicy'
        in: query
        name: upgrade
        required: false
        description: If set, force a rebuild with the given <em>runtime</em> version
          selection policy. <ul>  <li><code>same</code> <b>patch</b> version.   This
          should only include backward compatible upgrades.  </li>  <li><code>minor</code>
          <b>major</b> version.   This might include an upgrade of e.g. the language
          runtime and/or provided   dependencies that could break compatiblity with
          the function. .</li> </ul>
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: query
        name: forceVersion
        required: false
        description: If set, force a rebuild with the given runtime version (including
          downgrades). This parameter is mutually exclusive to the `upgrade` parameter.
      - schema:
          type: boolean
        in: query
        name: ignoreChecks
        required: false
        description: 'If set to true, checks that normally prevent a rebuild are overriden.
          These checks include:

          * function state in `pending`, `running`, `failed` or `undeployed`

          * backoff period due to recent failures

          * usage of deprecated dependencies

          * running jobs on entity

          * the `dryRun` option'
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful (re-)deployment. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: boolean
        in: query
        name: skipRebuild
        required: false
        description: If set, the function will not be rebuild. Always uses the current
          runtime version when re-deploying/re-verifying the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildWebscriptSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildWebscriptAsyncResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}:
    get:
      operationId: getLatest_webscript_functions
      summary: Get Latest Webscript Version
      tags:
      - Webscript Functions
      description: "Fetch the latest version of a <em>webscript</em>.\n\n  By default,\
        \ the result shows the latest non-deprecated, non-draft version.\n  If there\
        \ is no such version, the latest deprecated or the latest draft version is\
        \ returned, with the former taking precedence.\n\n  \n  Use the boolean query\
        \ parameters <code>includeDeprecated</code> or <code>includeDraft</code> to\
        \ change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        \  The returned <em>webscript version</em> will contain a link to its\n  latest\
        \ _draft_ or latest _published_ version (if existing and different).\n  "
      parameters:
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetWebscriptResponseV2'
      security: *id001
    delete:
      operationId: removeVersions_webscript_functions
      summary: Remove Webscript
      tags:
      - Webscript Functions
      description: "Deprecate, undeploy and/or remove all versions of this named <em>webscript</em>.\n\
        \n  By default, a `DELETE` \n  * _deprecates_ the webscript version(s): they\
        \ are no longer included in listings by default.\n  * _undeploys_ the webscript\
        \ version(s) with delay: the function can no longer be invoked, the small\
        \ delay allows\n    other services to discover the removal.\n  * _removes_\
        \ the version(s) from the plug registry.\n\n  Use `?force=true` to immediately\
        \ _undeploy_ and _remove_ without delay.\n\n  Use `?undeploy=true` to undeploy,\
        \ but keep the webscript version registered in a `undeployed` state.\n  An\
        \ `undeployed` version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: 'If <code>true</code>, the function version will be immediately
          undeployed and removed.


          Otherwise, the removal will be delayed to allow current invocations to end.
          During that period, the function is marked _deprecated_.'
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function: it becomes no longer available for
          invocation.

          * does NOT remove the function from registry: it stays in an `undeployed`
          status.  All assets and definitions are retained, so the version can be
          restored later with a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug function as _deprecated_, the function remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_webscript_functions
      summary: Patch Webscript Metadata
      tags:
      - Webscript Functions
      description: Patch the metadata of a webscript version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IFunctionMeta'
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetWebscriptResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/content:
    get:
      operationId: getArchive_webscript_functions
      summary: Get Webscript Archive
      tags:
      - Webscript Functions
      description: Get the specification archive of a webscript.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAssets_webscript_functions
      summary: Update Webscript Assets
      tags:
      - Webscript Functions
      description: "Update a draft <em>webscript</em> function by updating its assets.\n\
        \  \n  The assets for a <em>webscript</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
        \ function's collection of existing assets,\n  replacing any existing assets\
        \ with the same name.\n\n  Please note that it is not allowed to update the\
        \ webscript.json</code> json file with a changed value for any of the\n  \
        \ <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.\n\
        \n  For each <em>runtime</em> other files are supported.\n\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Webscript Function Assets
              description: "The assets for a <em>webscript</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the webscript.json</code> json file with a changed value\
                \ for any of the\n   <code>name</code>, <code>version</code> and/or\
                \ <code>runtime</code> attributes.\n\n  For each <em>runtime</em>\
                \ other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>webscript</em> function can be provided\
          \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n\n  The provided assets will be added to the <em>webscript</em>\
          \ function's collection of existing assets,\n  replacing any existing assets\
          \ with the same name.\n\n  Please note that it is not allowed to update\
          \ the webscript.json</code> json file with a changed value for any of the\n\
          \   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
          \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/content/{*}:
    get:
      operationId: getAsset_webscript_functions
      summary: Get File From Webscript Archive
      tags:
      - Webscript Functions
      description: Get a file from the specification archive of a webscript.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Webscript archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAsset_webscript_functions
      summary: Update Webscript Asset
      tags:
      - Webscript Functions
      description: "The provided asset will be added to the <em>webscript</em> function's\
        \ collection of existing assets,\n  replacing any existing asset with the\
        \ same name.\n\n  Please note that it is not allowed to update the webscript.json\
        \ json file with a changed value for any of the\n    <code>name</code>, <code>version</code>\
        \ and/or <code>runtime</code> attributes.\n\n  For each <em>runtime</em> other\
        \ files are supported.\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
      security: *id001
    delete:
      operationId: deleteAsset_webscript_functions
      summary: Delete Webscript Asset
      tags:
      - Webscript Functions
      description: Delete an asset from the webscript's collection of existing assets.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/publish:
    post:
      operationId: publish_webscript_functions
      summary: Publish Draft Webscript
      tags:
      - Webscript Functions
      description: "Mark the <em>webscript</em> to be ready and stable, taking it\
        \ out of draft mode.,\n\n  Typically, the <em>webscript</em> should be in\
        \ the <code>running</code> status, \n  such that publishing becomes a simple\
        \ operation where the existing deployment can be re-used.\n  In other statuses,\
        \ plug-registry may need to initiate a new build and deployment procedure.\n\
        \  "
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: patch
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Webscript Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobSyncResponseV2'
                description: Webscript Published
        '202':
          description: Webscript Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
                description: Webscript Published And Deploy Initiated
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_webscript_functions
      summary: List Webscript Jobs
      tags:
      - Webscript Functions
      description: List the ongoing and completed operations on a specific webscript.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
        in: query
        name: type
        required: false
        description: Filter on job type
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
        in: query
        name: state
        required: false
        description: Filter on job state
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        in: query
        name: functionType
        required: false
        description: Filter on function type
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on jobs that created before the given timestamp or age
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on jobs that created after the given timestamp or age
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IJobsForWebscriptResponseV2'
      security: *id001
  /registry/v2/webscripts/{name}/versions/{version}/verify:
    post:
      operationId: verify_webscript_functions
      summary: Verify Health Of Webscript
      tags:
      - Webscript Functions
      description: Verify health of webscript deployed on openfaas.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful verification. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IVerifyWebscriptSyncResponseV2'
        '202':
          description: Webscript Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostWebscriptJobAsyncResponseV2'
                description: Webscript Verification Initiated
      security: *id001
  /registry/v2/schemas/{functionType}/{role}/schema:
    get:
      operationId: getByRole_schemas
      summary: Get Asset Schema
      tags:
      - Schemas
      description: Get the JSON schema that is used to validate the asset.
      parameters:
      - schema:
          $ref: '#/components/schemas/EFunctionType'
        in: path
        name: functionType
        required: true
        description: Function type
      - schema:
          $ref: '#/components/schemas/EAssetRole'
        in: path
        name: role
        required: true
        description: Asset role
      deprecated: true
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      security: *id001
  /registry/v2/schemas/{schemaId}:
    get:
      operationId: get_schemas
      summary: Get Asset Schema
      tags:
      - Schemas
      description: Get the JSON schema that is used to validate an asset.
      parameters:
      - schema:
          type: string
        in: path
        name: schemaId
        required: true
        description: Schema id
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      security: *id001
  /registry/v2/plugs/:
    post:
      operationId: create_plug_functions
      summary: Create Plug
      tags:
      - Plug Functions
      description: "Creates a new <em>plug</em> function by uploading its assets.\n\
        \  \n  The assets for a <em>plug</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n  \n  The required <code>plug.json</code> json file contains the\
        \ function metadata,\n  and must have a <code>runtime</code> attribute that\
        \ is one of the supported <em>runtime</em>s \n  (see <code>GET /registry/v2/runtimes?functionType=plugs</code>).\n\
        \n  For each <em>runtime</em> other files will be required or supported.\n\
        \n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>plug.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>plug</em> function can be provided as either\n\
          \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n  \n  The required <code>plug.json</code> json\
          \ file contains the function metadata,\n  and must have a <code>runtime</code>\
          \ attribute that is one of the supported <em>runtime</em>s \n  (see <code>GET\
          \ /registry/v2/runtimes?functionType=plugs</code>).\n\n  For each <em>runtime</em>\
          \ other files will be required or supported.\n"
      parameters:
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: none
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, validates the deployment conditions,
          but does not change anything.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: scaleToZero
        required: false
        description: If set to <code>true</code>, after successful deployment, the
          deployed function will be scaled to zero. Saves computing resources when
          the function is not to be used immediately.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: version
        required: false
        description: If set, the function version will be an increment of the latest
          existing version that satisfies the `version` range. Note that this increment
          always takes precedence over an explicit `version` in the function manifest.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: If set, the value will be used as the function name instead of
          the one specified in the manifest.
      - schema:
          type: boolean
          default: false
        in: query
        name: draft
        required: false
        description: If set, the created function will be a draft function and its
          assets are still mutable. A build and deploy is initiated only in the case
          when all necessary assets are present and valid.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
      security: *id001
    get:
      operationId: list_plug_functions
      summary: List Plugs
      tags:
      - Plug Functions
      description: "List the (latest) versions of available <em>plugs</em>.\n\n###\
        \ List Latest Plug Versions\nBy default, the result includes the latest non-deprecated,\
        \ non-draft version for each <em>plug</em> name.\nIf there is no such version,\
        \ the latest _deprecated_ or the latest _draft_ version is included, with\
        \ the former taking precedence.\n\n\n  Use the boolean query parameters <code>includeDeprecated</code>\
        \ or <code>includeDraft</code> to change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        As long as no _version filters_ are used, each listed <em>plug version</em>\
        \ item will contain a HAL **link to the \nlatest** _draft_ (`entities[]._links.draft`)\
        \ or latest _published_ (`entities[]._links.publisned`) version (if existing\
        \ and different).\n\n### List Latest Plug Versions (with filter)\nWhen any\
        \ of the _version filter_ query parameters are used, the response contains\n\
        the _latest_ version per named <em>plug</em> that satisfy the filters, but\
        \ **without links**.\n\n### List All Plug Versions\nWhen using `latest=false`\
        \ (default when using the `namedVersion` filter), the listing contains _all_\
        \ \n<em>plugs</em> versions that satisfy the query, possibly multiple versions\
        \ per named <em>plugs</em>.\nNo HAL links are provided.\n\n#### Filter on\
        \ _status_\nBy default <em>plug versions</em> with status  `undeployed` are\
        \ **excluded** in all cases.\nUse the _version filter_ `status` to include/exclude\
        \ a status from the results.\nBy example, \n> `?status=any&includeDeprecated=true&includeDraft=true&latest=false`\n\
        \nwill list _ALL_ versions known to the function registry.\n\n#### Version\
        \ filter parameters\nThe following query parameters are _version filters_\
        \ for the <em>plug</em> listing:\n> `version`, `status`, `runtimeVersion`,\
        \ `createdBy`, `createdBefore`, `createdAfter`, `updatedBy`, `updatedBefore`,\
        \ `updatedAfter`, `nameVersion`, `deprecated`, `draft`, `tags`\n"
      parameters:
      - schema:
          $ref: '#/components/schemas/TagsFilter'
        in: query
        name: tags
        required: false
        description: Filter on the tags of the item. Can be a single tag, or a list
          of tags. When multiple tags are specified, an item must have all of the
          tags to be selected.
      - schema:
          $ref: '#/components/schemas/EPlugType'
        in: query
        name: type
        required: false
        description: If set, filters on the type of plug.
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
        in: query
        name: nameVersion
        required: false
        description: Filter on exact `{name}@{version}` functions. Using this filter
          implies a `latest=false` default, returning multiple versions of the same
          named versions if they are filtered.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: Filter on the name of the function. This is case-insensitive
          and supports wild-cards `?` (any one character) and `*` (any sequence of
          characters).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: boolean
        in: query
        name: latest
        required: false
        description: When `true`, only the latest version per function name is returned.
          If set to `false`, multiple versions per named function can be returned.
          Defaults to `true`, except when specific versions are selected with the
          `nameVersion` filter.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ILatestPlugsResponseV2'
      security: *id001
  /registry/v2/plugs/{name}:
    get:
      operationId: getLatest_plug_functions
      summary: Get Latest Plug Version
      tags:
      - Plug Functions
      description: "Fetch the latest version of a <em>plug</em>.\n\n  By default,\
        \ the result shows the latest non-deprecated, non-draft version.\n  If there\
        \ is no such version, the latest deprecated or the latest draft version is\
        \ returned, with the former taking precedence.\n\n  \n  Use the boolean query\
        \ parameters <code>includeDeprecated</code> or <code>includeDraft</code> to\
        \ change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        \  The returned <em>plug version</em> will contain a link to its\n  latest\
        \ _draft_ or latest _published_ version (if existing and different).\n  "
      parameters:
      - schema:
          $ref: '#/components/schemas/EPlugType'
        in: query
        name: type
        required: false
        description: If set, filters on the type of plug.
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Plug Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetPlugResponseV2'
            text/html:
              schema:
                $ref: '#/components/schemas/PlugHtmlResponse'
      security: *id001
    delete:
      operationId: removeVersions_plug_functions
      summary: Remove Plug
      tags:
      - Plug Functions
      description: "Deprecate, undeploy and/or remove all versions of this named <em>plug</em>.\n\
        \nBy default, a `DELETE` \n* marks _published_ version(s) _deprecated_: they\
        \ remain active, but are no longer included in listings by default.\n* completely\
        \ removes any _draft_ version(s) (_deprecate_, _undeploy_ and _remove_)\n\n\
        A _deprecated_ plug version will eventually be _undeployed_ (but not _removed_)\
        \ by an external background task, \nonce proven that no waylay rule template\
        \ or task references it.\n\nUse `?force=true` to skip the deprecation and\
        \ immediately remove the version(s).\n\nUse `?undeploy=true` to undeploy the\
        \ plug version(s), but keep it registered in a `undeployed` state.\nAn `undeployed`\
        \ version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: If <code>true</code>, the plug version(s) will be undeployed
          and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
          i.e removed from regular listings.
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function for the plug: it becomes no longer available
          for invocation.

          * does NOT remove the plug from registry: it stays in an `undeployed` status.  All
          assets and definitions are retained, so the plug can be restored later with
          a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug version(s) as _deprecated_: the plug remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions:
    get:
      operationId: listVersions_plug_functions
      summary: List Plug Versions
      tags:
      - Plug Functions
      description: List all versions of a plug, including deprecated versions or not.
      parameters:
      - schema:
          $ref: '#/components/schemas/TagsFilter'
        in: query
        name: tags
        required: false
        description: Filter on the tags of the item. Can be a single tag, or a list
          of tags. When multiple tags are specified, an item must have all of the
          tags to be selected.
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPlugVersionsResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}:
    get:
      operationId: get_plug_functions
      summary: Get Plug Version
      tags:
      - Plug Functions
      description: Get a specific version of a plug.
      parameters:
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Plug Version Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetPlugResponseV2'
            text/html:
              schema:
                $ref: '#/components/schemas/PlugHtmlResponse'
      security: *id001
    delete:
      operationId: removeVersion_plug_functions
      summary: Remove Plug Version
      tags:
      - Plug Functions
      description: "Deprecate, undeploy and/or remove a <em>plug</em> version.\n\n\
        By default, a `DELETE` \n* marks _published_ version(s) _deprecated_: they\
        \ remain active, but are no longer included in listings by default.\n* completely\
        \ removes any _draft_ version(s) (_deprecate_, _undeploy_ and _remove_)\n\n\
        A _deprecated_ plug version will eventually be _undeployed_ (but not _removed_)\
        \ by an external background task, \nonce proven that no waylay rule template\
        \ or task references it.\n\nUse `?force=true` to skip the deprecation and\
        \ immediately remove the version(s).\n\nUse `?undeploy=true` to undeploy the\
        \ plug version(s), but keep it registered in a `undeployed` state.\nAn `undeployed`\
        \ version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: If <code>true</code>, the plug version(s) will be undeployed
          and removed. Otherwise, the plug version(s) will only be <code>deprecated</code>,
          i.e removed from regular listings.
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function for the plug: it becomes no longer available
          for invocation.

          * does NOT remove the plug from registry: it stays in an `undeployed` status.  All
          assets and definitions are retained, so the plug can be restored later with
          a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug version(s) as _deprecated_: the plug remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_plug_functions
      summary: Rebuild Plug
      tags:
      - Plug Functions
      description: Rebuild and deploy a plug with the original or updated base image.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, checks whether rebuild jobs are
          needed, but do not start any jobs.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          $ref: '#/components/schemas/ERebuildPolicy'
        in: query
        name: upgrade
        required: false
        description: If set, force a rebuild with the given <em>runtime</em> version
          selection policy. <ul>  <li><code>same</code> <b>patch</b> version.   This
          should only include backward compatible upgrades.  </li>  <li><code>minor</code>
          <b>major</b> version.   This might include an upgrade of e.g. the language
          runtime and/or provided   dependencies that could break compatiblity with
          the function. .</li> </ul>
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: query
        name: forceVersion
        required: false
        description: If set, force a rebuild with the given runtime version (including
          downgrades). This parameter is mutually exclusive to the `upgrade` parameter.
      - schema:
          type: boolean
        in: query
        name: ignoreChecks
        required: false
        description: 'If set to true, checks that normally prevent a rebuild are overriden.
          These checks include:

          * function state in `pending`, `running`, `failed` or `undeployed`

          * backoff period due to recent failures

          * usage of deprecated dependencies

          * running jobs on entity

          * the `dryRun` option'
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful (re-)deployment. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: boolean
        in: query
        name: skipRebuild
        required: false
        description: If set, the function will not be rebuild. Always uses the current
          runtime version when re-deploying/re-verifying the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildPlugSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildPlugAsyncResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/content:
    get:
      operationId: getArchive_plug_functions
      summary: Get Plug Archive
      tags:
      - Plug Functions
      description: Get the specification archive of a plug.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAssets_plug_functions
      summary: Update Plug Assets
      tags:
      - Plug Functions
      description: "Update a draft <em>plug</em> function by updating its assets.\n\
        \  \n  The assets for a <em>plug</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n\n  The provided assets will be added to the <em>plug</em> function's\
        \ collection of existing assets,\n  replacing any existing assets with the\
        \ same name.\n\n  Please note that it is not allowed to update the plug.json</code>\
        \ json file with a changed value for any of the\n   <code>name</code>, <code>version</code>\
        \ and/or <code>runtime</code> attributes.\n\n  For each <em>runtime</em> other\
        \ files are supported.\n\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Plug Function Assets
              description: "The assets for a <em>plug</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the plug.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>plug</em> function can be provided as either\n\
          \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n\n  The provided assets will be added to the <em>plug</em>\
          \ function's collection of existing assets,\n  replacing any existing assets\
          \ with the same name.\n\n  Please note that it is not allowed to update\
          \ the plug.json</code> json file with a changed value for any of the\n \
          \  <code>name</code>, <code>version</code> and/or <code>runtime</code> attributes.\n\
          \n  For each <em>runtime</em> other files are supported.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/content/{*}:
    get:
      operationId: getAsset_plug_functions
      summary: Get File From Plug Archive
      tags:
      - Plug Functions
      description: Get a file from the specification archive of a plug.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Plug archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAsset_plug_functions
      summary: Update Plug Asset
      tags:
      - Plug Functions
      description: "The provided asset will be added to the <em>plug</em> function's\
        \ collection of existing assets,\n  replacing any existing asset with the\
        \ same name.\n\n  Please note that it is not allowed to update the plug.json\
        \ json file with a changed value for any of the\n    <code>name</code>, <code>version</code>\
        \ and/or <code>runtime</code> attributes.\n\n  For each <em>runtime</em> other\
        \ files are supported.\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
      security: *id001
    delete:
      operationId: deleteAsset_plug_functions
      summary: Delete Plug Asset
      tags:
      - Plug Functions
      description: Delete an asset from the plug's collection of existing assets.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/publish:
    post:
      operationId: publish_plug_functions
      summary: Publish Draft Plug
      tags:
      - Plug Functions
      description: "Mark the <em>plug</em> to be ready and stable, taking it out of\
        \ draft mode.,\n\n  Typically, the <em>plug</em> should be in the <code>running</code>\
        \ status, \n  such that publishing becomes a simple operation where the existing\
        \ deployment can be re-used.\n  In other statuses, plug-registry may need\
        \ to initiate a new build and deployment procedure.\n  "
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: none
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Plug Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobSyncResponseV2'
                description: Plug Published
        '202':
          description: Plug Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
                description: Plug Published And Deploy Initiated
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/interface:
    patch:
      operationId: patchInterface_plug_functions
      summary: Patch Plug Interface
      tags:
      - Plug Functions
      description: Patch the interface documentation of a plug version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDocumentation'
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetPlugResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_plug_functions
      summary: Patch Plug Metadata
      tags:
      - Plug Functions
      description: Patch the metadata of a plug version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IUpdateMetadataRequestV2'
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetPlugResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_plug_functions
      summary: List Plug Jobs
      tags:
      - Plug Functions
      description: List the ongoing and completed operations on a specific plug.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
        in: query
        name: type
        required: false
        description: Filter on job type
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
        in: query
        name: state
        required: false
        description: Filter on job state
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        in: query
        name: functionType
        required: false
        description: Filter on function type
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on jobs that created before the given timestamp or age
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on jobs that created after the given timestamp or age
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IJobsForPlugResponseV2'
      security: *id001
  /registry/v2/plugs/{name}/versions/{version}/verify:
    post:
      operationId: verify_plug_functions
      summary: Verify Health Of Plug
      tags:
      - Plug Functions
      description: Verify health of plug deployed on openfaas.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful verification. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IVerifyPlugSyncResponseV2'
        '202':
          description: Plug Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostPlugJobAsyncResponseV2'
                description: Plug Verification Initiated
      security: *id001
  /registry/v2/models/:
    post:
      operationId: create_model_functions
      summary: Create Model
      tags:
      - Model Functions
      description: "Creates a new <em>model</em> function by uploading its assets.\n\
        \  \n  The assets for a <em>model</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n  \n  The required <code>model.json</code> json file contains the\
        \ function metadata,\n  and must have a <code>runtime</code> attribute that\
        \ is one of the supported <em>runtime</em>s \n  (see <code>GET /registry/v2/runtimes?functionType=kfserving</code>).\n\
        \n  For each <em>runtime</em> other files will be required or supported.\n\
        \n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n  \n  The required <code>model.json</code> json file contains\
                \ the function metadata,\n  and must have a <code>runtime</code> attribute\
                \ that is one of the supported <em>runtime</em>s \n  (see <code>GET\
                \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each\
                \ <em>runtime</em> other files will be required or supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>model</em> function can be provided as\
          \ either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n  \n  The required <code>model.json</code> json\
          \ file contains the function metadata,\n  and must have a <code>runtime</code>\
          \ attribute that is one of the supported <em>runtime</em>s \n  (see <code>GET\
          \ /registry/v2/runtimes?functionType=kfserving</code>).\n\n  For each <em>runtime</em>\
          \ other files will be required or supported.\n"
      parameters:
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: patch
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, validates the deployment conditions,
          but does not change anything.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: scaleToZero
        required: false
        description: If set to <code>true</code>, after successful deployment, the
          deployed function will be scaled to zero. Saves computing resources when
          the function is not to be used immediately.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: version
        required: false
        description: If set, the function version will be an increment of the latest
          existing version that satisfies the `version` range. Note that this increment
          always takes precedence over an explicit `version` in the function manifest.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: If set, the value will be used as the function name instead of
          the one specified in the manifest.
      - schema:
          type: boolean
          default: false
        in: query
        name: draft
        required: false
        description: If set, the created function will be a draft function and its
          assets are still mutable. A build and deploy is initiated only in the case
          when all necessary assets are present and valid.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
      security: *id001
    get:
      operationId: list_model_functions
      summary: List Models
      tags:
      - Model Functions
      description: "List the (latest) versions of available <em>models</em>.\n\n###\
        \ List Latest Model Versions\nBy default, the result includes the latest non-deprecated,\
        \ non-draft version for each <em>model</em> name.\nIf there is no such version,\
        \ the latest _deprecated_ or the latest _draft_ version is included, with\
        \ the former taking precedence.\n\n\n  Use the boolean query parameters <code>includeDeprecated</code>\
        \ or <code>includeDraft</code> to change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        As long as no _version filters_ are used, each listed <em>model version</em>\
        \ item will contain a HAL **link to the \nlatest** _draft_ (`entities[]._links.draft`)\
        \ or latest _published_ (`entities[]._links.publisned`) version (if existing\
        \ and different).\n\n### List Latest Model Versions (with filter)\nWhen any\
        \ of the _version filter_ query parameters are used, the response contains\n\
        the _latest_ version per named <em>model</em> that satisfy the filters, but\
        \ **without links**.\n\n### List All Model Versions\nWhen using `latest=false`\
        \ (default when using the `namedVersion` filter), the listing contains _all_\
        \ \n<em>models</em> versions that satisfy the query, possibly multiple versions\
        \ per named <em>models</em>.\nNo HAL links are provided.\n\n#### Filter on\
        \ _status_\nBy default <em>model versions</em> with status  `undeployed` are\
        \ **excluded** in all cases.\nUse the _version filter_ `status` to include/exclude\
        \ a status from the results.\nBy example, \n> `?status=any&includeDeprecated=true&includeDraft=true&latest=false`\n\
        \nwill list _ALL_ versions known to the function registry.\n\n#### Version\
        \ filter parameters\nThe following query parameters are _version filters_\
        \ for the <em>model</em> listing:\n> `version`, `status`, `runtimeVersion`,\
        \ `createdBy`, `createdBefore`, `createdAfter`, `updatedBy`, `updatedBefore`,\
        \ `updatedAfter`, `nameVersion`, `deprecated`, `draft`\n"
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/NamedVersion'
        in: query
        name: nameVersion
        required: false
        description: Filter on exact `{name}@{version}` functions. Using this filter
          implies a `latest=false` default, returning multiple versions of the same
          named versions if they are filtered.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: string
        in: query
        name: name
        required: false
        description: Filter on the name of the function. This is case-insensitive
          and supports wild-cards `?` (any one character) and `*` (any sequence of
          characters).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: boolean
        in: query
        name: latest
        required: false
        description: When `true`, only the latest version per function name is returned.
          If set to `false`, multiple versions per named function can be returned.
          Defaults to `true`, except when specific versions are selected with the
          `nameVersion` filter.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ILatestModelsResponseV2'
      security: *id001
  /registry/v2/models/{name}:
    get:
      operationId: getLatest_model_functions
      summary: Get Latest Model Version
      tags:
      - Model Functions
      description: "Fetch the latest version of a <em>model</em>.\n\n  By default,\
        \ the result shows the latest non-deprecated, non-draft version.\n  If there\
        \ is no such version, the latest deprecated or the latest draft version is\
        \ returned, with the former taking precedence.\n\n  \n  Use the boolean query\
        \ parameters <code>includeDeprecated</code> or <code>includeDraft</code> to\
        \ change this behaviour:\n  <ul>\n  <li><code>includeDeprecated=true</code>:\
        \ do not prefer non-deprecated versions as a latest version: if the latest\
        \ version is a deprecated one, it will be shown, even if there are older non-deprecated\
        \ versions.</li>\n  <li><code>includeDraft=true</code>: do not prefer non-draft\
        \ versions as a latest version: if the latest version is a draft, it will\
        \ be shown, even if there are older non-draft versions.</li>\n  </ul>\n\n\n\
        \  The returned <em>model version</em> will contain a link to its\n  latest\
        \ _draft_ or latest _published_ version (if existing and different).\n  "
      parameters:
      - schema:
          type: boolean
        in: query
        name: includeDraft
        required: false
        description: Configures the inclusion of _draft_ versions when selecting latest
          versions per name. By default, draft versions are only considered when no
          other versions are available. If set to `true`, draft versions are **included**.
          If set to `false`, draft versions are **excluded**.
      - schema:
          type: boolean
        in: query
        name: includeDeprecated
        required: false
        description: Configures the inclusion of _deprecated_ versions when selecting
          latest versions per name. By default, deprecated versions are only considered
          when no other versions are available. If set to `true`, deprecated versions
          are **included**. If set to `false`, deprecated versions are **excluded**.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetModelResponseV2'
      security: *id001
    delete:
      operationId: removeVersions_model_functions
      summary: Remove Model
      tags:
      - Model Functions
      description: "Deprecate, undeploy and/or remove all versions of this named <em>model</em>.\n\
        \n  By default, a `DELETE` \n  * _deprecates_ the model version(s): they are\
        \ no longer included in listings by default.\n  * _undeploys_ the model version(s)\
        \ with delay: the function can no longer be invoked, the small delay allows\n\
        \    other services to discover the removal.\n  * _removes_ the version(s)\
        \ from the plug registry.\n\n  Use `?force=true` to immediately _undeploy_\
        \ and _remove_ without delay.\n\n  Use `?undeploy=true` to undeploy, but keep\
        \ the model version registered in a `undeployed` state.\n  An `undeployed`\
        \ version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: 'If <code>true</code>, the function version will be immediately
          undeployed and removed.


          Otherwise, the removal will be delayed to allow current invocations to end.
          During that period, the function is marked _deprecated_.'
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function: it becomes no longer available for
          invocation.

          * does NOT remove the function from registry: it stays in an `undeployed`
          status.  All assets and definitions are retained, so the version can be
          restored later with a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug function as _deprecated_, the function remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions:
    get:
      operationId: listVersions_model_functions
      summary: List Model Versions
      tags:
      - Model Functions
      description: List all deployed versions of a model.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: number
          minimum: 0
        in: query
        name: page
        required: false
        description: The number of pages to skip when returning result to this query.
      - schema:
          type: boolean
        in: query
        name: deprecated
        required: false
        description: Filter on the deprecation status of the function.
      - schema:
          type: boolean
        in: query
        name: draft
        required: false
        description: Filter on the draft status of the function.
      - schema:
          type: string
        in: query
        name: version
        required: false
        description: Filter on the version of the function (case-sensitive, supports
          wildcards).
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EStatusFilter'
        in: query
        name: status
        required: false
        description: Filter on the status of the plug. Filter values with a `-` postfix
          exclude the status. Use the `any` filter value to include all states. When
          not specified, a default `undeployed-` filter excludes _undeployed_ functions.
      - schema:
          $ref: '#/components/schemas/SemanticVersionRange'
        in: query
        name: runtimeVersion
        required: false
        description: Filter on the runtime version.
      - schema:
          type: string
        example: '@me'
        in: query
        name: createdBy
        required: false
        description: Filter on the user that create the plug. You can use the `@me`
          token to indicate your own plugs.
      - schema:
          type: string
        example: '@me'
        in: query
        name: updatedBy
        required: false
        description: Filter on the user that last updated the plug. You can use the
          `@me` token to indicate your own plugs.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on funtions that were created before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on funtions that were created after the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedBefore
        required: false
        description: Filter on funtions that were updated before the given timestamp
          or age.
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: updatedAfter
        required: false
        description: Filter on funtions that were updated after the given timestamp
          or age.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EArchiveFormat'
        in: query
        name: archiveFormat
        required: false
        description: Filter on the archive format of the function.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/ERuntime'
        in: query
        name: runtime
        required: false
        description: Filter on the runtime of the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IModelVersionsResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}:
    get:
      operationId: get_model_functions
      summary: Get Model Version
      tags:
      - Model Functions
      description: Get a model by name and version.
      parameters:
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetModelResponseV2'
      security: *id001
    delete:
      operationId: removeVersion_model_functions
      summary: Remove Model Version
      tags:
      - Model Functions
      description: "Deprecate, undeploy and/or remove a <em>model</em> version.\n\n\
        \  By default, a `DELETE` \n  * _deprecates_ the model version(s): they are\
        \ no longer included in listings by default.\n  * _undeploys_ the model version(s)\
        \ with delay: the function can no longer be invoked, the small delay allows\n\
        \    other services to discover the removal.\n  * _removes_ the version(s)\
        \ from the plug registry.\n\n  Use `?force=true` to immediately _undeploy_\
        \ and _remove_ without delay.\n\n  Use `?undeploy=true` to undeploy, but keep\
        \ the model version registered in a `undeployed` state.\n  An `undeployed`\
        \ version can later be restored by a _rebuild_ action.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: force
        required: false
        description: 'If <code>true</code>, the function version will be immediately
          undeployed and removed.


          Otherwise, the removal will be delayed to allow current invocations to end.
          During that period, the function is marked _deprecated_.'
      - schema:
          type: boolean
        in: query
        name: undeploy
        required: false
        description: 'If `true`, the `DELETE` operation

          * undeploys the (openfaas) function: it becomes no longer available for
          invocation.

          * does NOT remove the function from registry: it stays in an `undeployed`
          status.  All assets and definitions are retained, so the version can be
          restored later with a  _rebuild_ action.


          If `false`, the `DELETE` operation

          * _only_ marks the plug function as _deprecated_, the function remains active
          but is removed from the default listings.   This also applies to _draft_
          versions.


          This parameter is incompatible with `force=true`.


          If not set the default behaviour applies:

          * _draft_ versions are _undeployed_ and _removed_ from registry.

          * non-_draft_ versions are marked _deprecated_ only.'
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeployedResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IUndeploySubmittedResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/content:
    get:
      operationId: getArchive_model_functions
      summary: Get Model Archive
      tags:
      - Model Functions
      description: Get the specification archive of a model.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAssets_model_functions
      summary: Update Model Assets
      tags:
      - Model Functions
      description: "Update a draft <em>model</em> function by updating its assets.\n\
        \  \n  The assets for a <em>model</em> function can be provided as either\n\
        \  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed), with\
        \ one of the content types \n    <code>application/octet-stream</code>, <code>application/tar+gzip</code>,\
        \ <code>application/x-gzip</code>, <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
        \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
        \  </ul>\n\n  The provided assets will be added to the <em>model</em> function's\
        \ collection of existing assets,\n  replacing any existing assets with the\
        \ same name.\n\n  Please note that it is not allowed to update the model.json</code>\
        \ json file with a changed value for any of the\n   <code>name</code>, <code>version</code>\
        \ and/or <code>runtime</code> attributes.\n\n  For each <em>runtime</em> other\
        \ files are supported.\n\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/tar+gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/x-tar:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          application/gzip:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
          multipart/form-data:
            schema:
              title: Model Function Assets
              description: "The assets for a <em>model</em> function can be provided\
                \ as either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally\
                \ compressed), with one of the content types \n    <code>application/octet-stream</code>,\
                \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>,\
                \ <code>application/x-tar</code>, <code>application/gzip</code></li>\n\
                \    <li>separate files in a <code>multipart/form-data</code> request</li>\n\
                \  </ul>\n\n  The provided assets will be added to the <em>model</em>\
                \ function's collection of existing assets,\n  replacing any existing\
                \ assets with the same name.\n\n  Please note that it is not allowed\
                \ to update the model.json</code> json file with a changed value for\
                \ any of the\n   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
                \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
              anyOf:
              - title: Multipart file upload.
                description: A multi-part upload containing one or more file assets.
                type: object
                properties:
                  filename:
                    type: array
                    items:
                      type: string
                      format: binary
              - title: TAR Achive Upload
                description: A single file archive containing multiple assets.
        description: "The assets for a <em>model</em> function can be provided as\
          \ either\n  <ul>\n    <li>a single <em>tar</em> archive (optionally compressed),\
          \ with one of the content types \n    <code>application/octet-stream</code>,\
          \ <code>application/tar+gzip</code>, <code>application/x-gzip</code>, <code>application/x-tar</code>,\
          \ <code>application/gzip</code></li>\n    <li>separate files in a <code>multipart/form-data</code>\
          \ request</li>\n  </ul>\n\n  The provided assets will be added to the <em>model</em>\
          \ function's collection of existing assets,\n  replacing any existing assets\
          \ with the same name.\n\n  Please note that it is not allowed to update\
          \ the model.json</code> json file with a changed value for any of the\n\
          \   <code>name</code>, <code>version</code> and/or <code>runtime</code>\
          \ attributes.\n\n  For each <em>runtime</em> other files are supported.\n"
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/content/{*}:
    get:
      operationId: getAsset_model_functions
      summary: Get File From Model Archive
      tags:
      - Model Functions
      description: Get a file from the specification archive of a model.
      parameters:
      - schema:
          type: boolean
          default: false
        in: query
        name: ls
        required: false
        description: If set to `true`, the result will be a listing of the files in
          the asset, annotated with metadata and validation report from the asset
          conditions of the functions runtime.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/tar+gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/x-tar:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/gzip:
              schema:
                title: Archive
                description: Model archive
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/IContentValidationListing'
      security: *id001
    put:
      operationId: updateAsset_model_functions
      summary: Update Model Asset
      tags:
      - Model Functions
      description: "The provided asset will be added to the <em>model</em> function's\
        \ collection of existing assets,\n  replacing any existing asset with the\
        \ same name.\n\n  Please note that it is not allowed to update the model.json\
        \ json file with a changed value for any of the\n    <code>name</code>, <code>version</code>\
        \ and/or <code>runtime</code> attributes.\n\n  For each <em>runtime</em> other\
        \ files are supported.\n  "
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: File Upload
              description: A single asset file.
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: A single asset file.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
      security: *id001
    delete:
      operationId: deleteAsset_model_functions
      summary: Delete Model Asset
      tags:
      - Model Functions
      description: Delete an asset from the model's collection of existing assets.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
          default: false
        in: query
        name: chown
        required: true
        description: If set, ownership of the draft function is transferred to the
          current user.
      - schema:
          type: string
        in: path
        name: '*'
        required: true
        description: Full path or path prefix of the asset within the archive
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/publish:
    post:
      operationId: publish_model_functions
      summary: Publish Draft Model
      tags:
      - Model Functions
      description: "Mark the <em>model</em> to be ready and stable, taking it out\
        \ of draft mode.,\n\n  Typically, the <em>model</em> should be in the <code>running</code>\
        \ status, \n  such that publishing becomes a simple operation where the existing\
        \ deployment can be re-used.\n  In other statuses, plug-registry may need\
        \ to initiate a new build and deployment procedure.\n  "
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          $ref: '#/components/schemas/DeprecatePreviousPolicy'
          default: patch
        in: query
        name: deprecatePrevious
        required: false
        description: Set the cleanup policy used to automatically deprecate/delete
          previous versions.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '201':
          description: Model Published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobSyncResponseV2'
                description: Model Published
        '202':
          description: Model Published And Deploy Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
                description: Model Published And Deploy Initiated
      security: *id001
  /registry/v2/models/{name}/versions/{version}/metadata:
    patch:
      operationId: patchMetadata_model_functions
      summary: Patch Model Metadata
      tags:
      - Model Functions
      description: Patch the metadata of a model version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IFunctionMeta'
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGetModelResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/jobs:
    get:
      operationId: jobs_model_functions
      summary: List Model Jobs
      tags:
      - Model Functions
      description: List the ongoing and completed operations on a model.
      parameters:
      - schema:
          type: number
          minimum: 0
        in: query
        name: limit
        required: false
        description: The maximum number of items to be return from this query. Has
          a deployment-defined default and maximum value.
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobTypeSchema'
        in: query
        name: type
        required: false
        description: Filter on job type
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/JobStateResult'
        in: query
        name: state
        required: false
        description: Filter on job state
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/EFunctionType'
        in: query
        name: functionType
        required: false
        description: Filter on function type
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdBefore
        required: false
        description: Filter on jobs that created before the given timestamp or age
      - schema:
          $ref: '#/components/schemas/TimestampSpec'
        in: query
        name: createdAfter
        required: false
        description: Filter on jobs that created after the given timestamp or age
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IJobsForModelResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/rebuild:
    post:
      operationId: rebuild_model_functions
      summary: Rebuild Model
      tags:
      - Model Functions
      description: Rebuild and deploy a model with the original or updated base image.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
        in: query
        name: dryRun
        required: false
        description: If set to <code>true</code>, checks whether rebuild jobs are
          needed, but do not start any jobs.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          $ref: '#/components/schemas/ERebuildPolicy'
        in: query
        name: upgrade
        required: false
        description: If set, force a rebuild with the given <em>runtime</em> version
          selection policy. <ul>  <li><code>same</code> <b>patch</b> version.   This
          should only include backward compatible upgrades.  </li>  <li><code>minor</code>
          <b>major</b> version.   This might include an upgrade of e.g. the language
          runtime and/or provided   dependencies that could break compatiblity with
          the function. .</li> </ul>
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: query
        name: forceVersion
        required: false
        description: If set, force a rebuild with the given runtime version (including
          downgrades). This parameter is mutually exclusive to the `upgrade` parameter.
      - schema:
          type: boolean
        in: query
        name: ignoreChecks
        required: false
        description: 'If set to true, checks that normally prevent a rebuild are overriden.
          These checks include:

          * function state in `pending`, `running`, `failed` or `undeployed`

          * backoff period due to recent failures

          * usage of deprecated dependencies

          * running jobs on entity

          * the `dryRun` option'
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful (re-)deployment. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: boolean
        in: query
        name: skipRebuild
        required: false
        description: If set, the function will not be rebuild. Always uses the current
          runtime version when re-deploying/re-verifying the function.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildModelSyncResponseV2'
        '202':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IRebuildModelAsyncResponseV2'
      security: *id001
  /registry/v2/models/{name}/versions/{version}/verify:
    post:
      operationId: verify_model_functions
      summary: Verify Health Of Model
      tags:
      - Model Functions
      description: Verify health of model deployed on openfaas.
      parameters:
      - schema:
          type: string
        in: query
        name: comment
        required: false
        description: An optional user-specified comment corresponding to the operation.
      - schema:
          type: boolean
          default: true
        in: query
        name: async
        required: false
        description: Unless this is set to <code>false</code>, the server will start
          the required job actions asynchronously and return a <code>202</code> <em>Accepted</em>
          response. If <code>false</code> the request will block until the job actions
          are completed, or a timeout occurs.
      - schema:
          type: boolean
        in: query
        name: scaleToZero
        required: false
        description: Indicates whether the function needs to be scaled down after
          successful verification. If not set, the function is scaled to zero only
          if it was not active before this command.
      - schema:
          type: string
        in: path
        name: name
        required: true
        description: The name of the function.
      - schema:
          $ref: '#/components/schemas/SemanticVersion'
        in: path
        name: version
        required: true
        description: The version of the function.
      x-version: v2
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IVerifyModelSyncResponseV2'
        '202':
          description: Model Verification Initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPostModelJobAsyncResponseV2'
                description: Model Verification Initiated
      security: *id001
tags:
- name: Jobs
  description: Jobs represent the ongoing asynchronous operations in the function
    registry.
- name: Runtimes
  description: "Runtimes are the available base infrastructure for functions, and\
    \ define how \n          the plug gets build and deployed."
externalDocs:
  url: https://docs.waylay.io/#/api/registry/
  description: Waylay Documentation
servers:
- url: https://api.waylay.io
  description: Waylay enterprise gateway
