# coding: utf-8
"""Waylay Function Registry api.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations  # for Python 3.7â€“3.9
import io
import warnings

import enum
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt, StrictBool, StrictBytes
from typing import Dict, List, Literal, Optional, Tuple, Union, Any, overload, TYPE_CHECKING
from typing_extensions import NotRequired, TypedDict

from waylay.sdk.api import ApiValueError

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated  # type: ignore

if TYPE_CHECKING:

    from waylay.services.registry.queries.default_api import GetQuery

    from waylay.services.registry.models import RootPageResponse


try:

    from waylay.services.registry.queries.default_api import GetQuery

    from waylay.services.registry.models import RootPageResponse

    types_available = True
except ImportError:
    types_available = False

    if not TYPE_CHECKING:

        GetQuery = Dict

        RootPageResponse = Any


from waylay.sdk.api import (
    ApiClient, ApiResponse, RESTTimeout
)


class DefaultApi:
    """DefaultApi service methods.

    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: ApiClient) -> None:
        """Create a DefaultApi instance."""
        self._api_client: ApiClient = api_client

    @overload
    async def get(
        self,
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[False] = False,
    ) -> RootPageResponse: ...

    @overload
    async def get(
        self,
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[True],
    ) -> ApiResponse[RootPageResponse]: ...

    @validate_call
    async def get(
        self,
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: StrictBool = False,
    ) -> Union[RootPageResponse, ApiResponse[RootPageResponse]]:
        """Version.

        Get the version of this function registry deployment.

        :param query: Supported query params. (optional)
        :type query: TypedDict, optional:
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """

        _request_params = self._get_serialize(
            body=None,
            files=None,
            query=query,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '*': "waylay.services.registry.models.RootPageResponse",
        }
        response_data = await self._api_client.call_api(
            **_request_params,
            _request_timeout=_request_timeout
        )
        result = self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )
        return result if with_http_info else result.data

    def _get_serialize(
        self,
        body,
        files,
        query,
        _headers,
    ) -> dict[str, Any]:

        _path_params: Dict[str, str] = {}
        _query_params: Dict[str, Any] = {}
        _header_params: Dict[str, Optional[str]] = {k.lower(): v for k, v in _headers.items()} if _headers else {}
        _form_params: Dict[str, str] = {}
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            pass
        # process the form parameters
        # process the body parameter

        return self._api_client.param_serialize(
            method='GET',
            resource_path='/registry/v2/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            files=_files,
        )
