# coding: utf-8
"""Waylay Function Registry api.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from pydantic import StrictStr, StrictBool, TypeAdapter, ConfigDict
from typing import (
    Dict,
    Literal,
    Optional,
    Union,
    Any,
    overload,
    TYPE_CHECKING,
)

from waylay.sdk.plugin import WithApiClient
from waylay.sdk.api import (
    Response,
    HeaderTypes,
    QueryParamTypes,
)
from waylay.sdk.api._models import Model

if TYPE_CHECKING:
    from waylay.services.registry.queries.jobs_api import EventsQuery

    from waylay.services.registry.models import EventWithCloseSSE

    from waylay.services.registry.models import EventWithCloseSSE

    from waylay.services.registry.models import JobType

    from waylay.services.registry.queries.jobs_api import GetQuery

    from waylay.services.registry.models import JobResponse

    from waylay.services.registry.models import JobResponse

    from waylay.services.registry.queries.jobs_api import ListQuery

    from waylay.services.registry.models import JobsResponse

    from waylay.services.registry.models import JobsResponse


try:
    from waylay.services.registry.queries.jobs_api import EventsQuery

    from waylay.services.registry.models import EventWithCloseSSE

    from waylay.services.registry.models import EventWithCloseSSE

    from waylay.services.registry.models import JobType

    from waylay.services.registry.queries.jobs_api import GetQuery

    from waylay.services.registry.models import JobResponse

    from waylay.services.registry.models import JobResponse

    from waylay.services.registry.queries.jobs_api import ListQuery

    from waylay.services.registry.models import JobsResponse

    from waylay.services.registry.models import JobsResponse

    types_available = True
except ImportError:
    types_available = False

    if not TYPE_CHECKING:
        EventsQuery = dict

        EventWithCloseSSE = Model

        EventWithCloseSSE = Model

        JobType = str

        GetQuery = dict

        JobResponse = Model

        JobResponse = Model

        ListQuery = dict

        JobsResponse = Model

        JobsResponse = Model


StringAdapter = TypeAdapter(str, config=ConfigDict(coerce_numbers_to_str=True))


class JobsApi(WithApiClient):
    """JobsApi service methods.

    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @overload
    async def events(
        self,
        *,
        query: Optional[Union[EventsQuery, QueryParamTypes]] = None,
        raw_response: Literal[False] = False,
        select_path: Literal[""],
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> EventWithCloseSSE: ...

    @overload
    async def events(
        self,
        *,
        query: Optional[Union[EventsQuery, QueryParamTypes]] = None,
        raw_response: Literal[True],
        select_path: Literal["_not_used_"] = "_not_used_",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Response: ...

    # @validate_call
    async def events(
        self,
        *,
        query: Optional[Union[EventsQuery, QueryParamTypes]] = None,
        raw_response: StrictBool = False,
        select_path: str = "",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Union[EventWithCloseSSE, Response, Model]:
        """Stream Events.

        Get an SSE stream of all job events for the users tenant.  The stream can be filtered on job type or on a specific job id.   When filtering on job id, the server will send a <code>close</code> event  upon completion of the job. The client should handle this event by closing the stream.
        :param query: URL Query parameters.
        :type query: EventsQuery | QueryParamTypes, optional
        :param query['type']: The type of the job.
        :type query['type']: JobType
        :param query['id']: The id of the job.
        :type query['id']: str
        :param query['children']: If set to <code>true</code>, the event stream will include events of the job's dependants. E.g., when subscribing to a verify job with `children=true`, you will also receive the events of the underlying build and deploy jobs. Defaults to <code>false</code>.
        :type query['children']: bool
        :param raw_response: If true, return the http Response object instead of returning an api model object, or throwing an ApiError.
        :param select_path: Denotes the json path applied to the response object before returning it.
                Set it to the empty string `""` to receive the full response object.
        :param headers: Header parameters for this request
        :type headers: dict, optional
        :param `**kwargs`: Additional parameters passed on to the http client.
            See below.
        :Keyword Arguments:
            * timeout: a single numeric timeout in seconds,
                or a tuple of _connect_, _read_, _write_ and _pool_ timeouts.
            * stream: if true, the response will be in streaming mode
            * cookies
            * extensions
            * auth
            * follow_redirects: bool

        :return: Returns the result object if the http request succeeded with status code '2XX'.
        :raises APIError: If the http request has a status code different from `2XX`. This
            object wraps both the http Response and any parsed data.
        """

        # set aside send args
        send_args = {}
        for key in ["stream", "follow_redirects", "auth"]:
            if key in kwargs:
                send_args[key] = kwargs.pop(key)
        # path parameters
        path_params: Dict[str, str] = {}

        ## named body parameters
        body_args: Dict[str, Any] = {}

        ## create httpx.Request
        api_request = self.api_client.build_request(
            method="GET",
            resource_path="/registry/v2/jobs/events",
            path_params=path_params,
            params=query,
            **body_args,
            headers=headers,
            **kwargs,
        )

        ## initiate http request
        response = await self.api_client.send(api_request, **send_args)

        ## render response
        if raw_response:
            return response
        response_types_map: Dict[str, Optional[Union[str, Any]]] = {
            "200": EventWithCloseSSE if not select_path else Model,
        }
        stream = send_args.get("stream", False)
        return self.api_client.response_deserialize(
            response, response_types_map, select_path, stream=stream
        )

    @overload
    async def get(
        self,
        type: JobType,
        id: StrictStr,
        *,
        query: Optional[Union[GetQuery, QueryParamTypes]] = None,
        raw_response: Literal[False] = False,
        select_path: Literal[""],
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> JobResponse: ...

    @overload
    async def get(
        self,
        type: JobType,
        id: StrictStr,
        *,
        query: Optional[Union[GetQuery, QueryParamTypes]] = None,
        raw_response: Literal[True],
        select_path: Literal["_not_used_"] = "_not_used_",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Response: ...

    # @validate_call
    async def get(
        self,
        type: JobType,
        id: StrictStr,
        *,
        query: Optional[Union[GetQuery, QueryParamTypes]] = None,
        raw_response: StrictBool = False,
        select_path: str = "",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Union[JobResponse, Response, Model]:
        """Get Job.

        Get a background job by type and id.
        :param type: (required)
        :type type: JobType
        :param id: (required)
        :type id: str
        :param query: URL Query parameters.
        :type query: GetQuery | QueryParamTypes, optional
        :param raw_response: If true, return the http Response object instead of returning an api model object, or throwing an ApiError.
        :param select_path: Denotes the json path applied to the response object before returning it.
                Set it to the empty string `""` to receive the full response object.
        :param headers: Header parameters for this request
        :type headers: dict, optional
        :param `**kwargs`: Additional parameters passed on to the http client.
            See below.
        :Keyword Arguments:
            * timeout: a single numeric timeout in seconds,
                or a tuple of _connect_, _read_, _write_ and _pool_ timeouts.
            * stream: if true, the response will be in streaming mode
            * cookies
            * extensions
            * auth
            * follow_redirects: bool

        :return: Returns the result object if the http request succeeded with status code '2XX'.
        :raises APIError: If the http request has a status code different from `2XX`. This
            object wraps both the http Response and any parsed data.
        """

        # set aside send args
        send_args = {}
        for key in ["stream", "follow_redirects", "auth"]:
            if key in kwargs:
                send_args[key] = kwargs.pop(key)
        # path parameters
        path_params: Dict[str, str] = {
            "type": StringAdapter.validate_python(type),
            "id": StringAdapter.validate_python(id),
        }

        ## named body parameters
        body_args: Dict[str, Any] = {}

        ## create httpx.Request
        api_request = self.api_client.build_request(
            method="GET",
            resource_path="/registry/v2/jobs/{type}/{id}",
            path_params=path_params,
            params=query,
            **body_args,
            headers=headers,
            **kwargs,
        )

        ## initiate http request
        response = await self.api_client.send(api_request, **send_args)

        ## render response
        if raw_response:
            return response
        response_types_map: Dict[str, Optional[Union[str, Any]]] = {
            "200": JobResponse if not select_path else Model,
        }
        stream = send_args.get("stream", False)
        return self.api_client.response_deserialize(
            response, response_types_map, select_path, stream=stream
        )

    @overload
    async def list(
        self,
        *,
        query: Optional[Union[ListQuery, QueryParamTypes]] = None,
        raw_response: Literal[False] = False,
        select_path: Literal[""],
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> JobsResponse: ...

    @overload
    async def list(
        self,
        *,
        query: Optional[Union[ListQuery, QueryParamTypes]] = None,
        raw_response: Literal[True],
        select_path: Literal["_not_used_"] = "_not_used_",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Response: ...

    # @validate_call
    async def list(
        self,
        *,
        query: Optional[Union[ListQuery, QueryParamTypes]] = None,
        raw_response: StrictBool = False,
        select_path: str = "",
        headers: Optional[HeaderTypes] = None,
        **kwargs,
    ) -> Union[JobsResponse, Response, Model]:
        """List Jobs.

        List all background jobs for the users tenant.
        :param query: URL Query parameters.
        :type query: ListQuery | QueryParamTypes, optional
        :param query['limit']: The maximum number of items to be return from this query. Has a deployment-defined default and maximum value.
        :type query['limit']: float
        :param query['type']: Filter on job type
        :type query['type']: List[JobTypeSchema]
        :param query['state']: Filter on job state
        :type query['state']: List[JobStateResult]
        :param query['functionType']: Filter on function type
        :type query['functionType']: List[FunctionType]
        :param query['createdBefore']: Filter on jobs that created before the given timestamp or age
        :type query['createdBefore']: TimestampSpec
        :param query['createdAfter']: Filter on jobs that created after the given timestamp or age
        :type query['createdAfter']: TimestampSpec
        :param raw_response: If true, return the http Response object instead of returning an api model object, or throwing an ApiError.
        :param select_path: Denotes the json path applied to the response object before returning it.
                Set it to the empty string `""` to receive the full response object.
        :param headers: Header parameters for this request
        :type headers: dict, optional
        :param `**kwargs`: Additional parameters passed on to the http client.
            See below.
        :Keyword Arguments:
            * timeout: a single numeric timeout in seconds,
                or a tuple of _connect_, _read_, _write_ and _pool_ timeouts.
            * stream: if true, the response will be in streaming mode
            * cookies
            * extensions
            * auth
            * follow_redirects: bool

        :return: Returns the result object if the http request succeeded with status code '2XX'.
        :raises APIError: If the http request has a status code different from `2XX`. This
            object wraps both the http Response and any parsed data.
        """

        # set aside send args
        send_args = {}
        for key in ["stream", "follow_redirects", "auth"]:
            if key in kwargs:
                send_args[key] = kwargs.pop(key)
        # path parameters
        path_params: Dict[str, str] = {}

        ## named body parameters
        body_args: Dict[str, Any] = {}

        ## create httpx.Request
        api_request = self.api_client.build_request(
            method="GET",
            resource_path="/registry/v2/jobs/",
            path_params=path_params,
            params=query,
            **body_args,
            headers=headers,
            **kwargs,
        )

        ## initiate http request
        response = await self.api_client.send(api_request, **send_args)

        ## render response
        if raw_response:
            return response
        response_types_map: Dict[str, Optional[Union[str, Any]]] = {
            "200": JobsResponse if not select_path else Model,
        }
        stream = send_args.get("stream", False)
        return self.api_client.response_deserialize(
            response, response_types_map, select_path, stream=stream
        )
