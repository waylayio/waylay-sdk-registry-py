# coding: utf-8
"""Waylay Function Registry api.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations  # for Python 3.7â€“3.9
import warnings

from pydantic import validate_call, Field, StrictStr, StrictBool
from typing import Dict, Literal, Optional, Union, Any, overload, TYPE_CHECKING


try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated  # type: ignore # noqa: F401

if TYPE_CHECKING:
    from waylay.services.registry.models import FunctionType
    from waylay.services.registry.models import AssetRole

    from waylay.services.registry.queries.schemas_api import GetByRoleQuery
    from waylay.services.registry.queries.schemas_api import GetQuery


try:
    from waylay.services.registry.models import FunctionType
    from waylay.services.registry.models import AssetRole

    from waylay.services.registry.queries.schemas_api import GetByRoleQuery
    from waylay.services.registry.queries.schemas_api import GetQuery

    types_available = True
except ImportError:
    types_available = False

    if not TYPE_CHECKING:
        FunctionType = str
        AssetRole = str

        GetByRoleQuery = Dict
        GetQuery = Dict


from waylay.sdk.api import ApiClient, ApiResponse, RESTTimeout


class SchemasApi:
    """SchemasApi service methods.

    NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: ApiClient) -> None:
        """Create a SchemasApi instance."""
        self._api_client: ApiClient = api_client

    @overload
    async def get_by_role(
        self,
        function_type: Annotated[FunctionType, Field(description="Function type")],
        role: Annotated[AssetRole, Field(description="Asset role")],
        *,
        query: Optional[GetByRoleQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[False] = False,
        select_path: Literal[""] = "",
    ) -> Dict[str, object]:
        ...

    @overload
    async def get_by_role(
        self,
        function_type: Annotated[FunctionType, Field(description="Function type")],
        role: Annotated[AssetRole, Field(description="Asset role")],
        *,
        query: Optional[GetByRoleQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[True],
        select_path: Literal[""] = "",
    ) -> ApiResponse[Dict[str, object]]:
        ...

    @validate_call
    async def get_by_role(
        self,
        function_type: Annotated[FunctionType, Field(description="Function type")],
        role: Annotated[AssetRole, Field(description="Asset role")],
        *,
        query: Optional[GetByRoleQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: StrictBool = False,
        select_path: str = "",
    ) -> Union[Dict[str, object], ApiResponse[Dict[str, object]], Any]:
        """Get Asset Schema (Deprecated).

        Get the JSON schema that is used to validate the asset.

        :param function_type: Function type (required)
        :type function_type: FunctionType
        :param role: Asset role (required)
        :type role: AssetRole
        :param query: Supported query params. (optional)
        :type query: TypedDict, optional:
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """
        warnings.warn(
            "GET /registry/v2/schemas/{functionType}/{role}/schema is deprecated.",
            DeprecationWarning,
        )

        _request_params = self._get_by_role_serialize(
            function_type=function_type,
            role=role,
            body=None,
            files=None,
            query=query,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[Union[str, Any]]] = {
            "200": "Dict[str, object]" if not select_path else Any,
        }
        response_data = await self._api_client.call_api(
            **_request_params, _request_timeout=_request_timeout
        )
        result = self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
            select_path=select_path,
        )
        return result if with_http_info else result.data

    def _get_by_role_serialize(
        self,
        function_type,
        role,
        body,
        files,
        query,
        _headers,
    ) -> dict[str, Any]:
        _path_params: Dict[str, str] = {}
        _query_params: Dict[str, Any] = {}
        _header_params: Dict[str, Optional[str]] = (
            {k.lower(): v for k, v in _headers.items()} if _headers else {}
        )
        _form_params: Dict[str, str] = {}
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if function_type is not None:
            _path_params["functionType"] = function_type.value
        if role is not None:
            _path_params["role"] = role.value
        # process the query parameters
        if query is not None:
            pass
        # process the form parameters
        # process the body parameter

        return self._api_client.param_serialize(
            method="GET",
            resource_path="/registry/v2/schemas/{functionType}/{role}/schema",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            files=_files,
        )

    @overload
    async def get(
        self,
        schema_id: Annotated[StrictStr, Field(description="Schema id")],
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[False] = False,
        select_path: Literal[""] = "",
    ) -> Dict[str, object]:
        ...

    @overload
    async def get(
        self,
        schema_id: Annotated[StrictStr, Field(description="Schema id")],
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: Literal[True],
        select_path: Literal[""] = "",
    ) -> ApiResponse[Dict[str, object]]:
        ...

    @validate_call
    async def get(
        self,
        schema_id: Annotated[StrictStr, Field(description="Schema id")],
        *,
        query: Optional[GetQuery] = None,
        _request_timeout: Optional[RESTTimeout] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        with_http_info: StrictBool = False,
        select_path: str = "",
    ) -> Union[Dict[str, object], ApiResponse[Dict[str, object]], Any]:
        """Get Asset Schema.

        Get the JSON schema that is used to validate an asset.

        :param schema_id: Schema id (required)
        :type schema_id: str
        :param query: Supported query params. (optional)
        :type query: TypedDict, optional:
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """

        _request_params = self._get_serialize(
            schema_id=schema_id,
            body=None,
            files=None,
            query=query,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[Union[str, Any]]] = {
            "200": "Dict[str, object]" if not select_path else Any,
        }
        response_data = await self._api_client.call_api(
            **_request_params, _request_timeout=_request_timeout
        )
        result = self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
            select_path=select_path,
        )
        return result if with_http_info else result.data

    def _get_serialize(
        self,
        schema_id,
        body,
        files,
        query,
        _headers,
    ) -> dict[str, Any]:
        _path_params: Dict[str, str] = {}
        _query_params: Dict[str, Any] = {}
        _header_params: Dict[str, Optional[str]] = (
            {k.lower(): v for k, v in _headers.items()} if _headers else {}
        )
        _form_params: Dict[str, str] = {}
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if schema_id is not None:
            _path_params["schemaId"] = schema_id
        # process the query parameters
        if query is not None:
            pass
        # process the form parameters
        # process the body parameter

        return self._api_client.param_serialize(
            method="GET",
            resource_path="/registry/v2/schemas/{schemaId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            files=_files,
        )
