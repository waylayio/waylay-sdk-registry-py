# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.alt_version_hal_link_published import (
        AltVersionHALLinkPublished,
    )

    AltVersionHALLinkPublishedAdapter = TypeAdapter(AltVersionHALLinkPublished)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

alt_version_hal_link_published_model_schema = json.loads(
    r"""{
  "title" : "AltVersionHALLink_published",
  "required" : [ "deprecated", "draft", "href", "version" ],
  "type" : "object",
  "properties" : {
    "draft" : {
      "type" : "boolean"
    },
    "href" : {
      "$ref" : "#/components/schemas/HALLink_href"
    },
    "version" : {
      "type" : "string"
    },
    "deprecated" : {
      "type" : "boolean"
    }
  },
  "description" : "Link to the lastest published version.",
  "example" : {
    "href" : "https://api.waylay.io/registry/v2/models/modelName/versions/1.0.1",
    "version" : "1.2.0",
    "draft" : false,
    "deprecated" : false
  }
}
""",
    object_hook=with_example_provider,
)
alt_version_hal_link_published_model_schema.update({"definitions": MODEL_DEFINITIONS})

alt_version_hal_link_published_faker = JSF(
    alt_version_hal_link_published_model_schema, allow_none_optionals=1
)


class AltVersionHALLinkPublishedStub:
    """AltVersionHALLinkPublished unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return alt_version_hal_link_published_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "AltVersionHALLinkPublished":
        """Create AltVersionHALLinkPublished stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                AltVersionHALLinkPublishedAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return AltVersionHALLinkPublishedAdapter.validate_python(
            json, context={"skip_validation": True}
        )
