# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
from typing import Union, Literal, List, Dict

from waylay.services.registry.models.legacy_debug_plug_manifest import LegacyDebugPlugManifest
from .function_deploy_overrides_type_stub import FunctionDeployOverridesTypeStub


from .semantic_version_range_stub import SemanticVersionRangeStub

from .function_meta_stub import FunctionMetaStub


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from waylay.services.registry.models.function_deploy_overrides_type import FunctionDeployOverridesType
from waylay.services.registry.models.function_meta import FunctionMeta
from waylay.services.registry.models.semantic_version_range import SemanticVersionRange


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


class LegacyDebugPlugManifestStub:
    """LegacyDebugPlugManifest unit test stubs."""

    @staticmethod
    def create_instance(
        include_optional: bool = False,
    ) -> LegacyDebugPlugManifest:
        """Create LegacyDebugPlugManifest stub instance.
            include_optional -- if `True`, optional properties are included.
        """

        if include_optional:
            return LegacyDebugPlugManifest(
                deploy=FunctionDeployOverridesTypeStub.create_instance(),
                name='',
                version='9072888001528021798096225500850762068629339333975650685139102691291.0.0',
                runtime='',
                runtime_version=SemanticVersionRangeStub.create_instance(),
                metadata=FunctionMetaStub.create_instance(),
                tenant='',
                dependencies={
                    'key': ''
                },
                script=''
            )
        else:
            return LegacyDebugPlugManifest(
                name='',
                version='9072888001528021798096225500850762068629339333975650685139102691291.0.0',
                runtime='',
                metadata=FunctionMetaStub.create_instance(),
                tenant='',
                script=''
            )
