# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import warnings

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS

try:
    from waylay.services.registry.models.function_version_query import (
        FunctionVersionQuery,
    )

    FunctionVersionQueryAdapter = TypeAdapter(FunctionVersionQuery)
    MODELS_AVAILABLE = True
except ImportError as exc:
    warnings.warn(f"Type adapter for FunctionVersionQuery not available: {exc}")
    MODELS_AVAILABLE = False

function_version_query_model_schema = json.loads(r"""{
  "type" : "object",
  "properties" : {
    "version" : {
      "type" : "string",
      "description" : "Filter on the version of the function (case-sensitive, supports wildcards)."
    },
    "status" : {
      "type" : "array",
      "description" : "Filter on the status of the plug. Filter values with a `-` postfix exclude the status. Use the `any` filter value to include all states. When not specified, a default `undeployed-` filter excludes _undeployed_ functions.",
      "items" : {
        "$ref" : "#/components/schemas/StatusFilter"
      }
    },
    "runtimeVersion" : {
      "$ref" : "#/components/schemas/SemanticVersionRange"
    },
    "createdBy" : {
      "type" : "string",
      "description" : "Filter on the user that create the plug. You can use the `@me` token to indicate your own plugs.",
      "example" : "@me"
    },
    "updatedBy" : {
      "type" : "string",
      "description" : "Filter on the user that last updated the plug. You can use the `@me` token to indicate your own plugs.",
      "example" : "@me"
    },
    "createdBefore" : {
      "$ref" : "#/components/schemas/TimestampSpec"
    },
    "createdAfter" : {
      "$ref" : "#/components/schemas/TimestampSpec"
    },
    "updatedBefore" : {
      "$ref" : "#/components/schemas/TimestampSpec"
    },
    "updatedAfter" : {
      "$ref" : "#/components/schemas/TimestampSpec"
    }
  },
  "additionalProperties" : false,
  "description" : "Filter on function attributes that can change across function versions. When these query parameters are used, the query is considered a _function version_ listing and no HAL links to latest (_draft_, _published_) versions are included."
}
""")
function_version_query_model_schema.update({"definitions": MODEL_DEFINITIONS})

function_version_query_faker = JSF(
    function_version_query_model_schema, allow_none_optionals=1
)


class FunctionVersionQueryStub:
    """FunctionVersionQuery unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return function_version_query_faker.generate()

    @classmethod
    def create_instance(cls) -> "FunctionVersionQuery":
        """Create FunctionVersionQuery stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return FunctionVersionQueryAdapter.validate_python(cls.create_json())
