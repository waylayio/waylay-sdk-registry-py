# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
from typing import Union, Literal, List, Dict

from waylay.services.registry.models.build_job_for_function import BuildJobForFunction
from .job_hal_links_stub import JobHALLinksStub


from .job_state_result_stub import JobStateResultStub

from .build_args_stub import BuildArgsStub

from .build_result_stub import BuildResultStub


from .function_ref_stub import FunctionRefStub

from .job_status_stub import JobStatusStub

from .failure_reason_stub import FailureReasonStub

from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from waylay.services.registry.models.build_args import BuildArgs
from waylay.services.registry.models.build_result import BuildResult
from waylay.services.registry.models.failure_reason import FailureReason
from waylay.services.registry.models.function_ref import FunctionRef
from waylay.services.registry.models.job_hal_links import JobHALLinks
from waylay.services.registry.models.job_state_result import JobStateResult
from waylay.services.registry.models.job_status import JobStatus


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


class BuildJobForFunctionStub:
    """BuildJobForFunction unit test stubs."""

    @staticmethod
    def create_instance(
        include_optional: bool = False,
    ) -> BuildJobForFunction:
        """Create BuildJobForFunction stub instance.
            include_optional -- if `True`, optional properties are included.
        """

        if include_optional:
            return BuildJobForFunction(
                links=JobHALLinksStub.create_instance(),
                type='build',
                state=JobStateResultStub.create_instance(),
                request=BuildArgsStub.create_instance(),
                result=BuildResultStub.create_instance(),
                created_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by='',
                operation='',
                function=FunctionRefStub.create_instance(),
                job=JobStatusStub.create_instance(),
                failure_reason=FailureReasonStub.create_instance()
            )
        else:
            return BuildJobForFunction(
                type='build',
                state=JobStateResultStub.create_instance(),
                created_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by='',
                operation='',
            )
