# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.failure_reason import FailureReason

    FailureReasonAdapter = TypeAdapter(FailureReason)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

failure_reason_model_schema = json.loads(
    r"""{
  "title" : "FailureReason",
  "required" : [ "events", "log" ],
  "type" : "object",
  "properties" : {
    "log" : {
      "title" : "log",
      "type" : "array",
      "description" : "Log lines associated with this failure.",
      "items" : {
        "type" : "string"
      }
    },
    "events" : {
      "title" : "events",
      "type" : "array",
      "description" : "Events associated with this failure.",
      "items" : {
        "type" : "string"
      }
    },
    "cause" : {
      "title" : "cause",
      "type" : "string",
      "description" : "Main cause for the failure."
    }
  }
}
""",
    object_hook=with_example_provider,
)
failure_reason_model_schema.update({"definitions": MODEL_DEFINITIONS})

failure_reason_faker = JSF(failure_reason_model_schema, allow_none_optionals=1)


class FailureReasonStub:
    """FailureReason unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return failure_reason_faker.generate()

    @classmethod
    def create_instance(cls) -> "FailureReason":
        """Create FailureReason stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return FailureReasonAdapter.validate_python(cls.create_json())
