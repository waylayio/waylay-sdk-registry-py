# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.plug_listing_and_query_response import (
        PlugListingAndQueryResponse,
    )

    PlugListingAndQueryResponseAdapter = TypeAdapter(PlugListingAndQueryResponse)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

plug_listing_and_query_response_model_schema = json.loads(
    r"""{
  "required" : [ "plugs" ],
  "type" : "object",
  "properties" : {
    "count" : {
      "type" : "number",
      "description" : "The total count of matching items, from which this result is one page."
    },
    "limit" : {
      "type" : "number",
      "description" : "The page size used for this query result."
    },
    "page" : {
      "type" : "number",
      "description" : "The page number of a paged query result."
    },
    "plugs" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/PlugResponse"
      }
    }
  },
  "description" : "Successful Response"
}
""",
    object_hook=with_example_provider,
)
plug_listing_and_query_response_model_schema.update({"definitions": MODEL_DEFINITIONS})

plug_listing_and_query_response_faker = JSF(
    plug_listing_and_query_response_model_schema, allow_none_optionals=1
)


class PlugListingAndQueryResponseStub:
    """PlugListingAndQueryResponse unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return plug_listing_and_query_response_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "PlugListingAndQueryResponse":
        """Create PlugListingAndQueryResponse stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                PlugListingAndQueryResponseAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return PlugListingAndQueryResponseAdapter.validate_python(
            json, context={"skip_validation": True}
        )
