# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import warnings

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS

try:
    from waylay.services.registry.models.function_delete_query import (
        FunctionDeleteQuery,
    )

    FunctionDeleteQueryAdapter = TypeAdapter(FunctionDeleteQuery)
    MODELS_AVAILABLE = True
except ImportError as exc:
    warnings.warn(f"Type adapter for FunctionDeleteQuery not available: {exc}")
    MODELS_AVAILABLE = False

function_delete_query_model_schema = json.loads(r"""{
  "type" : "object",
  "properties" : {
    "force" : {
      "type" : "boolean",
      "description" : "If <code>true</code>, the function version will be immediately undeployed and removed.\n\nOtherwise, the removal will be delayed to allow current invocations to end. During that period, the function is marked _deprecated_."
    },
    "undeploy" : {
      "type" : "boolean",
      "description" : "If `true`, the `DELETE` operation\n* undeploys the (openfaas) function: it becomes no longer available for invocation.\n* does NOT remove the function from registry: it stays in an `undeployed` status.  All assets and definitions are retained, so the version can be restored later with a  _rebuild_ action.\n\nIf `false`, the `DELETE` operation\n* _only_ marks the plug function as _deprecated_, the function remains active but is removed from the default listings.   This also applies to _draft_ versions.\n\nThis parameter is incompatible with `force=true`.\n\nIf not set the default behaviour applies:\n* _draft_ versions are _undeployed_ and _removed_ from registry.\n* non-_draft_ versions are marked _deprecated_ only."
    }
  },
  "additionalProperties" : false
}
""")
function_delete_query_model_schema.update({"definitions": MODEL_DEFINITIONS})

function_delete_query_faker = JSF(
    function_delete_query_model_schema, allow_none_optionals=1
)


class FunctionDeleteQueryStub:
    """FunctionDeleteQuery unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return function_delete_query_faker.generate()

    @classmethod
    def create_instance(cls) -> "FunctionDeleteQuery":
        """Create FunctionDeleteQuery stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return FunctionDeleteQueryAdapter.validate_python(cls.create_json())
