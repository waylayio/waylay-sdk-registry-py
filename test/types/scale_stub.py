# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS

try:
    from waylay.services.registry.models.scale import Scale

    ScaleAdapter = TypeAdapter(Scale)
    MODELS_AVAILABLE = True
except ImportError:
    MODELS_AVAILABLE = False

scale_model_schema = json.loads(r"""{
  "title" : "Scale",
  "required" : [ "createdAt", "createdBy", "operation", "state", "type" ],
  "type" : "object",
  "properties" : {
    "_links" : {
      "$ref" : "#/components/schemas/JobHALLinks"
    },
    "type" : {
      "title" : "type",
      "type" : "string",
      "description" : "The type of the background task.",
      "enum" : [ "scale" ]
    },
    "state" : {
      "$ref" : "#/components/schemas/JobStateResult"
    },
    "request" : {
      "$ref" : "#/components/schemas/ScaleArgs"
    },
    "result" : {
      "$ref" : "#/components/schemas/ScaleResult"
    },
    "createdAt" : {
      "title" : "createdAt",
      "type" : "string",
      "description" : "The timestamp of creation of this job",
      "format" : "date-time"
    },
    "createdBy" : {
      "title" : "createdBy",
      "type" : "string",
      "description" : "The user that created this job"
    },
    "operation" : {
      "title" : "operation",
      "type" : "string",
      "description" : "Request operation"
    },
    "function" : {
      "$ref" : "#/components/schemas/FunctionRef"
    },
    "job" : {
      "$ref" : "#/components/schemas/JobStatus"
    },
    "failureReason" : {
      "$ref" : "#/components/schemas/FailureReason"
    }
  }
}
""")
scale_model_schema.update({"definitions": MODEL_DEFINITIONS})

scale_faker = JSF(scale_model_schema, allow_none_optionals=1)


class ScaleStub:
    """Scale unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return scale_faker.generate()

    @classmethod
    def create_instance(cls) -> "Scale":
        """Create Scale stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return ScaleAdapter.validate_python(cls.create_json())
