# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.alt_embedded_version_i_plug_response_v2 import (
        AltEmbeddedVersionIPlugResponseV2,
    )

    AltEmbeddedVersionIPlugResponseV2Adapter = TypeAdapter(
        AltEmbeddedVersionIPlugResponseV2
    )
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

alt_embedded_version_i_plug_response_v2__model_schema = json.loads(
    r"""{
  "title" : "AltEmbeddedVersion_IPlugResponseV2_",
  "type" : "object",
  "properties" : {
    "draft" : {
      "$ref" : "#/components/schemas/PlugResponseV2"
    },
    "published" : {
      "$ref" : "#/components/schemas/PlugResponseV2"
    }
  },
  "description" : "Embedded representations of the _latest_ draft/published versions."
}
""",
    object_hook=with_example_provider,
)
alt_embedded_version_i_plug_response_v2__model_schema.update({
    "definitions": MODEL_DEFINITIONS
})

alt_embedded_version_i_plug_response_v2__faker = JSF(
    alt_embedded_version_i_plug_response_v2__model_schema, allow_none_optionals=1
)


class AltEmbeddedVersionIPlugResponseV2Stub:
    """AltEmbeddedVersionIPlugResponseV2 unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return alt_embedded_version_i_plug_response_v2__faker.generate()

    @classmethod
    def create_instance(cls) -> "AltEmbeddedVersionIPlugResponseV2":
        """Create AltEmbeddedVersionIPlugResponseV2 stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return AltEmbeddedVersionIPlugResponseV2Adapter.validate_python(
            cls.create_json()
        )
