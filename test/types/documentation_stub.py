# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.documentation import Documentation

    DocumentationAdapter = TypeAdapter(Documentation)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

documentation_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "description" : {
      "type" : "string"
    },
    "states" : {
      "type" : "array",
      "description" : "Documentation of the plug states.",
      "items" : {
        "$ref" : "#/components/schemas/DocumentationProperty"
      }
    },
    "input" : {
      "type" : "array",
      "description" : "Documentation of the plug input parameters.",
      "items" : {
        "$ref" : "#/components/schemas/DocumentationProperty"
      }
    },
    "output" : {
      "type" : "array",
      "description" : "Documentation of the plug response parameters.",
      "items" : {
        "$ref" : "#/components/schemas/DocumentationProperty"
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
documentation_model_schema.update({"definitions": MODEL_DEFINITIONS})

documentation_faker = JSF(documentation_model_schema, allow_none_optionals=1)


class DocumentationStub:
    """Documentation unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return documentation_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Documentation":
        """Create Documentation stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                DocumentationAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return DocumentationAdapter.validate_python(
            json, context={"skip_validation": True}
        )
