# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.hal_link_href import HALLinkHref

    HALLinkHrefAdapter = TypeAdapter(HALLinkHref)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

hal_link_href_model_schema = json.loads(
    r"""{
  "title" : "HALLink_href",
  "anyOf" : [ {
    "type" : "string",
    "format" : "uri"
  }, {
    "type" : "string"
  } ]
}
""",
    object_hook=with_example_provider,
)
hal_link_href_model_schema.update({"definitions": MODEL_DEFINITIONS})

hal_link_href_faker = JSF(hal_link_href_model_schema, allow_none_optionals=1)


class HALLinkHrefStub:
    """HALLinkHref unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return hal_link_href_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "HALLinkHref":
        """Create HALLinkHref stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(HALLinkHrefAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return HALLinkHrefAdapter.validate_python(
            json, context={"skip_validation": True}
        )
