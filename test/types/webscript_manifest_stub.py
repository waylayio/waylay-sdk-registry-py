# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.webscript_manifest import WebscriptManifest

    WebscriptManifestAdapter = TypeAdapter(WebscriptManifest)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

webscript_manifest_model_schema = json.loads(
    r"""{
  "title" : "WebscriptManifest",
  "required" : [ "allowHmac", "metadata", "name", "private", "runtime", "version" ],
  "type" : "object",
  "properties" : {
    "deploy" : {
      "$ref" : "#/components/schemas/FunctionDeployOverridesType"
    },
    "name" : {
      "title" : "name",
      "type" : "string",
      "description" : "The logical name for the function."
    },
    "version" : {
      "$ref" : "#/components/schemas/SemanticVersion"
    },
    "runtime" : {
      "$ref" : "#/components/schemas/Runtime"
    },
    "runtimeVersion" : {
      "$ref" : "#/components/schemas/SemanticVersionRange"
    },
    "metadata" : {
      "$ref" : "#/components/schemas/FunctionMeta"
    },
    "private" : {
      "title" : "private",
      "type" : "boolean",
      "description" : "If <code>true</code> this webscript will require authentication."
    },
    "allowHmac" : {
      "title" : "allowHmac",
      "type" : "boolean",
      "description" : "If <code>true</code> this webscript will support authentication with a <em>HMAC</em> key, available as the <code>secret</code> attribute of the deployed webscript entity."
    }
  }
}
""",
    object_hook=with_example_provider,
)
webscript_manifest_model_schema.update({"definitions": MODEL_DEFINITIONS})

webscript_manifest_faker = JSF(webscript_manifest_model_schema, allow_none_optionals=1)


class WebscriptManifestStub:
    """WebscriptManifest unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return webscript_manifest_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "WebscriptManifest":
        """Create WebscriptManifest stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                WebscriptManifestAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return WebscriptManifestAdapter.validate_python(
            json, context={"skip_validation": True}
        )
