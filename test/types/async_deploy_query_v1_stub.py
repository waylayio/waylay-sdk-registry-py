# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.async_deploy_query_v1 import AsyncDeployQueryV1

    AsyncDeployQueryV1Adapter = TypeAdapter(AsyncDeployQueryV1)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

async_deploy_query_v1_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "scaleToZero" : {
      "type" : "boolean",
      "description" : "If set to <code>true</code>, after successful deployment, the deployed function will be scaled to zero. Saves computing resources when the function is not to be used immediately.",
      "default" : false
    },
    "async" : {
      "type" : "boolean",
      "description" : "Unless this is set to <code>false</code>, the server will start the required job actions asynchronously and return a <code>202</code> <em>Accepted</em> response. If <code>false</code> the request will block until the job actions are completed, or a timeout occurs.",
      "default" : true
    },
    "dryRun" : {
      "type" : "boolean",
      "description" : "If set to <code>true</code>, validates the deployment conditions, but does not change anything."
    }
  },
  "additionalProperties" : false
}
""",
    object_hook=with_example_provider,
)
async_deploy_query_v1_model_schema.update({"definitions": MODEL_DEFINITIONS})

async_deploy_query_v1_faker = JSF(
    async_deploy_query_v1_model_schema, allow_none_optionals=1
)


class AsyncDeployQueryV1Stub:
    """AsyncDeployQueryV1 unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return async_deploy_query_v1_faker.generate()

    @classmethod
    def create_instance(cls) -> "AsyncDeployQueryV1":
        """Create AsyncDeployQueryV1 stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return AsyncDeployQueryV1Adapter.validate_python(cls.create_json())
