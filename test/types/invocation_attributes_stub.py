# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.invocation_attributes import (
        InvocationAttributes,
    )

    InvocationAttributesAdapter = TypeAdapter(InvocationAttributes)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

invocation_attributes_model_schema = json.loads(
    r"""{
  "title" : "InvocationAttributes",
  "required" : [ "auth", "callback", "nodeContext", "rawDataContext", "taskContext" ],
  "type" : "object",
  "properties" : {
    "auth" : {
      "$ref" : "#/components/schemas/InvocationAttributes_auth"
    },
    "taskContext" : {
      "title" : "taskContext",
      "type" : "boolean",
      "description" : "Indicates whether the task context attributes should be provided in `options.task`."
    },
    "nodeContext" : {
      "title" : "nodeContext",
      "type" : "boolean",
      "description" : "Indicates whether the node context attributes should be provided in `options.node`."
    },
    "rawDataContext" : {
      "title" : "rawDataContext",
      "type" : "boolean",
      "description" : "Indicates that the rawdata context attributes should be provided in `options.rawData`."
    },
    "callback" : {
      "title" : "callback",
      "type" : "boolean",
      "description" : "Indicates that the plug implementer intends to use the callback mechanism."
    }
  }
}
""",
    object_hook=with_example_provider,
)
invocation_attributes_model_schema.update({"definitions": MODEL_DEFINITIONS})

invocation_attributes_faker = JSF(
    invocation_attributes_model_schema, allow_none_optionals=1
)


class InvocationAttributesStub:
    """InvocationAttributes unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return invocation_attributes_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "InvocationAttributes":
        """Create InvocationAttributes stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                InvocationAttributesAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return InvocationAttributesAdapter.validate_python(
            json, context={"skip_validation": True}
        )
