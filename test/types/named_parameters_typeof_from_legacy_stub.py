# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.named_parameters_typeof_from_legacy import (
        NamedParametersTypeofFromLegacy,
    )

    NamedParametersTypeofFromLegacyAdapter = TypeAdapter(
        NamedParametersTypeofFromLegacy
    )
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

named_parameters_typeof_from_legacy__model_schema = json.loads(
    r"""{
  "required" : [ "metadata" ],
  "type" : "object",
  "properties" : {
    "metadata" : {
      "$ref" : "#/components/schemas/LegacyPlugMetaRequest"
    },
    "currentInterface" : {
      "$ref" : "#/components/schemas/PlugInterface"
    }
  },
  "additionalProperties" : false
}
""",
    object_hook=with_example_provider,
)
named_parameters_typeof_from_legacy__model_schema.update({
    "definitions": MODEL_DEFINITIONS
})

named_parameters_typeof_from_legacy__faker = JSF(
    named_parameters_typeof_from_legacy__model_schema, allow_none_optionals=1
)


class NamedParametersTypeofFromLegacyStub:
    """NamedParametersTypeofFromLegacy unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return named_parameters_typeof_from_legacy__faker.generate()

    @classmethod
    def create_instance(cls) -> "NamedParametersTypeofFromLegacy":
        """Create NamedParametersTypeofFromLegacy stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return NamedParametersTypeofFromLegacyAdapter.validate_python(cls.create_json())
