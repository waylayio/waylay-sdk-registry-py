# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.named_versions_filter import (
        NamedVersionsFilter,
    )

    NamedVersionsFilterAdapter = TypeAdapter(NamedVersionsFilter)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

named_versions_filter_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "nameVersion" : {
      "type" : "array",
      "description" : "Filter on exact `{name}@{version}` functions. Using this filter implies a `latest=false` default, returning multiple versions of the same named versions if they are filtered.",
      "items" : {
        "$ref" : "#/components/schemas/NamedVersion"
      }
    }
  },
  "additionalProperties" : false
}
""",
    object_hook=with_example_provider,
)
named_versions_filter_model_schema.update({"definitions": MODEL_DEFINITIONS})

named_versions_filter_faker = JSF(
    named_versions_filter_model_schema, allow_none_optionals=1
)


class NamedVersionsFilterStub:
    """NamedVersionsFilter unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return named_versions_filter_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "NamedVersionsFilter":
        """Create NamedVersionsFilter stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                NamedVersionsFilterAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return NamedVersionsFilterAdapter.validate_python(
            json, context={"skip_validation": True}
        )
