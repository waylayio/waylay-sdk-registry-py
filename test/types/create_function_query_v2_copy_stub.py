# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.create_function_query_v2_copy import (
        CreateFunctionQueryV2Copy,
    )

    CreateFunctionQueryV2CopyAdapter = TypeAdapter(CreateFunctionQueryV2Copy)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

create_function_query_v2_copy_model_schema = json.loads(
    r"""{
  "title" : "CreateFunctionQueryV2_copy",
  "description" : "Indicates the _source_ of initial assets for a _new function_.\n\nWhen using this query parameter, the request body does not need to contain assets, but any assets in the request body will overwrite the copied assets.\n\n#### Selection of _assets_ source\n\n* If set as `<sourceName>[@<sourceVersionRange>]`, the _new function_ will be created with copied assets of the selected _source function_.\n* If set as `!example`, a `runtime` query parameter is required, and the _new function_ will be initialized with assets of the _runtime example_.\n\n#### Selection of the _source function_\n\nWhen `<sourceVersionRange>` is a range (or is not given), the latest _published_ version (in that range) is used.\n\nIf no _published_ version exists, the latest _draft_ is selected.\n\nIf no versions in the range exist, a `404` _Not Found_ error is returned.\n\n#### The `name` of the _new function_\n\nIf a `name` is NOT specified (either as query parameter, or in an optional manifest asset in the request body), the `name` of the _new function_ will be that of the _source function_.\n\n#### The `version` of the _new function_\n\nWhen the _target_ and _source_ name are equal, the `version` query parameters is defaulted to `<sourceVersionRange>` (`~<sourceVersionRange>` when it's an exact version)\n\nThe version of the _new function_ will be:\n* If a `version` is NOT specified (either as query parameter, in an optional manifest asset, or as `<sourceVersionRange>` _default_)\n\n  * a **patch increment** (`<major>.<minor>.<patch>+1`) of the latest **existing version** with the target `name`\n\n  * **`1.0.0`** otherwise\n\n* If a `version` is specified:\n\n  * the **lowest version** in that range **if no existing version** is in that range.\n\n  * an **increment** of the latest existing version, **at the highest level** (_major_,_minor_,_patch_) allowed by that range.\n\n  * otherwise, if all allowed versions already exist, a **`409` _Duplicate_ error** is raised.\n\n#### Deployment overrides\n\nThe new function will use the deployment overrides of the copied function, unless a _manifest_ was specified in the request body.",
  "anyOf" : [ {
    "$ref" : "#/components/schemas/NamedVersionRange"
  }, {
    "$ref" : "#/components/schemas/ExampleReference"
  } ]
}
""",
    object_hook=with_example_provider,
)
create_function_query_v2_copy_model_schema.update({"definitions": MODEL_DEFINITIONS})

create_function_query_v2_copy_faker = JSF(
    create_function_query_v2_copy_model_schema, allow_none_optionals=1
)


class CreateFunctionQueryV2CopyStub:
    """CreateFunctionQueryV2Copy unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return create_function_query_v2_copy_faker.generate()

    @classmethod
    def create_instance(cls) -> "CreateFunctionQueryV2Copy":
        """Create CreateFunctionQueryV2Copy stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return CreateFunctionQueryV2CopyAdapter.validate_python(cls.create_json())
