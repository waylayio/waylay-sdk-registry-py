# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.job_status_and_entity_hal_links import (
        JobStatusAndEntityHALLinks,
    )

    JobStatusAndEntityHALLinksAdapter = TypeAdapter(JobStatusAndEntityHALLinks)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

job_status_and_entity_hal_links_model_schema = json.loads(
    r"""{
  "title" : "JobStatusAndEntityHALLinks",
  "description" : "HAL links to related actions.",
  "anyOf" : [ {
    "$ref" : "#/components/schemas/Plug_2"
  }, {
    "$ref" : "#/components/schemas/Webscript_2"
  }, {
    "$ref" : "#/components/schemas/Model_2"
  }, {
    "$ref" : "#/components/schemas/JobStatusHALLink"
  } ]
}
""",
    object_hook=with_example_provider,
)
job_status_and_entity_hal_links_model_schema.update({"definitions": MODEL_DEFINITIONS})

job_status_and_entity_hal_links_faker = JSF(
    job_status_and_entity_hal_links_model_schema, allow_none_optionals=1
)


class JobStatusAndEntityHALLinksStub:
    """JobStatusAndEntityHALLinks unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return job_status_and_entity_hal_links_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "JobStatusAndEntityHALLinks":
        """Create JobStatusAndEntityHALLinks stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                JobStatusAndEntityHALLinksAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return JobStatusAndEntityHALLinksAdapter.validate_python(
            json, context={"skip_validation": True}
        )
