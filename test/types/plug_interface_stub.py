# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.plug_interface import PlugInterface

    PlugInterfaceAdapter = TypeAdapter(PlugInterface)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

plug_interface_model_schema = json.loads(
    r"""{
  "title" : "PlugInterface",
  "type" : "object",
  "properties" : {
    "states" : {
      "title" : "states",
      "type" : "array",
      "description" : "The states of a plug as implemented in the plug code.",
      "items" : {
        "type" : "string"
      }
    },
    "input" : {
      "title" : "input",
      "type" : "array",
      "description" : "The named input parameters of a plug",
      "items" : {
        "$ref" : "#/components/schemas/PlugProperty"
      }
    },
    "output" : {
      "title" : "output",
      "type" : "array",
      "description" : "The named output parameters of a plug",
      "items" : {
        "$ref" : "#/components/schemas/PlugProperty"
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
plug_interface_model_schema.update({"definitions": MODEL_DEFINITIONS})

plug_interface_faker = JSF(plug_interface_model_schema, allow_none_optionals=1)


class PlugInterfaceStub:
    """PlugInterface unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return plug_interface_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "PlugInterface":
        """Create PlugInterface stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                PlugInterfaceAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return PlugInterfaceAdapter.validate_python(
            json, context={"skip_validation": True}
        )
