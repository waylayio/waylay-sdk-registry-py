# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.plug_property_format import PlugPropertyFormat

    PlugPropertyFormatAdapter = TypeAdapter(PlugPropertyFormat)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

plug_property_format_model_schema = json.loads(
    r"""{
  "title" : "PlugPropertyFormat",
  "type" : "object",
  "properties" : {
    "type" : {
      "$ref" : "#/components/schemas/PlugPropertyFormatType"
    },
    "values" : {
      "title" : "values",
      "type" : "array",
      "description" : "The enumerated value domain when <code>type=\"enum\"</code>",
      "example" : [ "low", "high" ],
      "items" : {
        "$ref" : "#/components/schemas/EnumValue"
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
plug_property_format_model_schema.update({"definitions": MODEL_DEFINITIONS})

plug_property_format_faker = JSF(
    plug_property_format_model_schema, allow_none_optionals=1
)


class PlugPropertyFormatStub:
    """PlugPropertyFormat unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return plug_property_format_faker.generate()

    @classmethod
    def create_instance(cls) -> "PlugPropertyFormat":
        """Create PlugPropertyFormat stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return PlugPropertyFormatAdapter.validate_python(cls.create_json())
