# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.build import Build

    BuildAdapter = TypeAdapter(Build)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

build_model_schema = json.loads(
    r"""{
  "title" : "Build",
  "required" : [ "createdAt", "createdBy", "operation", "state", "type" ],
  "type" : "object",
  "properties" : {
    "_links" : {
      "$ref" : "#/components/schemas/JobHALLinks"
    },
    "type" : {
      "$ref" : "#/components/schemas/Build_type"
    },
    "state" : {
      "$ref" : "#/components/schemas/JobStateResult"
    },
    "request" : {
      "$ref" : "#/components/schemas/BuildArgs"
    },
    "result" : {
      "$ref" : "#/components/schemas/BuildResult"
    },
    "createdAt" : {
      "title" : "createdAt",
      "type" : "string",
      "description" : "The timestamp of creation of this job",
      "format" : "date-time"
    },
    "createdBy" : {
      "title" : "createdBy",
      "type" : "string",
      "description" : "The user that created this job"
    },
    "operation" : {
      "title" : "operation",
      "type" : "string",
      "description" : "Request operation"
    },
    "function" : {
      "$ref" : "#/components/schemas/FunctionRef"
    },
    "job" : {
      "$ref" : "#/components/schemas/JobStatus"
    },
    "failureReason" : {
      "$ref" : "#/components/schemas/FailureReason"
    }
  }
}
""",
    object_hook=with_example_provider,
)
build_model_schema.update({"definitions": MODEL_DEFINITIONS})

build_faker = JSF(build_model_schema, allow_none_optionals=1)


class BuildStub:
    """Build unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return build_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "Build":
        """Create Build stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(BuildAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return BuildAdapter.validate_python(json, context={"skip_validation": True})
