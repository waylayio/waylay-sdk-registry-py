# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import warnings

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS

try:
    from waylay.services.registry.models.legacy_plug_script_meta_raw_data_inner import (
        LegacyPlugScriptMetaRawDataInner,
    )

    LegacyPlugScriptMetaRawDataInnerAdapter = TypeAdapter(
        LegacyPlugScriptMetaRawDataInner
    )
    MODELS_AVAILABLE = True
except ImportError as exc:
    warnings.warn(
        f"Type adapter for LegacyPlugScriptMetaRawDataInner not available: {exc}"
    )
    MODELS_AVAILABLE = False

legacy_plug_script_meta_raw_data_inner_model_schema = json.loads(r"""{
  "title" : "LegacyPlugScriptMeta_rawData_inner",
  "required" : [ "parameter" ],
  "type" : "object",
  "properties" : {
    "parameter" : {
      "title" : "parameter",
      "type" : "string"
    },
    "dataType" : {
      "title" : "dataType",
      "type" : "string"
    }
  }
}
""")
legacy_plug_script_meta_raw_data_inner_model_schema.update(
    {"definitions": MODEL_DEFINITIONS}
)

legacy_plug_script_meta_raw_data_inner_faker = JSF(
    legacy_plug_script_meta_raw_data_inner_model_schema, allow_none_optionals=1
)


class LegacyPlugScriptMetaRawDataInnerStub:
    """LegacyPlugScriptMetaRawDataInner unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return legacy_plug_script_meta_raw_data_inner_faker.generate()

    @classmethod
    def create_instance(cls) -> "LegacyPlugScriptMetaRawDataInner":
        """Create LegacyPlugScriptMetaRawDataInner stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return LegacyPlugScriptMetaRawDataInnerAdapter.validate_python(
            cls.create_json()
        )
