# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.latest_plug_version_query_v2 import (
        LatestPlugVersionQueryV2,
    )

    LatestPlugVersionQueryV2Adapter = TypeAdapter(LatestPlugVersionQueryV2)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

latest_plug_version_query_v2_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "type" : {
      "$ref" : "#/components/schemas/PlugType"
    },
    "includeDraft" : {
      "type" : "boolean",
      "description" : "Configures the inclusion of _draft_ versions when selecting latest versions per name. By default, draft versions are only considered when no other versions are available. If set to `true`, draft versions are **included**. If set to `false`, draft versions are **excluded**."
    },
    "includeDeprecated" : {
      "type" : "boolean",
      "description" : "Configures the inclusion of _deprecated_ versions when selecting latest versions per name. By default, deprecated versions are only considered when no other versions are available. If set to `true`, deprecated versions are **included**. If set to `false`, deprecated versions are **excluded**."
    }
  },
  "additionalProperties" : false,
  "description" : "Latest named plug version listing query"
}
""",
    object_hook=with_example_provider,
)
latest_plug_version_query_v2_model_schema.update({"definitions": MODEL_DEFINITIONS})

latest_plug_version_query_v2_faker = JSF(
    latest_plug_version_query_v2_model_schema, allow_none_optionals=1
)


class LatestPlugVersionQueryV2Stub:
    """LatestPlugVersionQueryV2 unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return latest_plug_version_query_v2_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "LatestPlugVersionQueryV2":
        """Create LatestPlugVersionQueryV2 stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                LatestPlugVersionQueryV2Adapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return LatestPlugVersionQueryV2Adapter.validate_python(
            json, context={"skip_validation": True}
        )
