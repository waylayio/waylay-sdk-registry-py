# coding: utf-8
"""Waylay Function Registry model tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import datetime
import json
import warnings

from typing import (
    Union,
    List,
    Dict,
    Literal,  # >=3.8
)
from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.registry.models.root_page_response import RootPageResponse

    RootPageResponseAdapter = TypeAdapter(RootPageResponse)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

root_page_response_model_schema = json.loads(
    r"""{
  "required" : [ "enabled", "name", "revision", "version" ],
  "type" : "object",
  "properties" : {
    "name" : {
      "type" : "string",
      "description" : "Name of the service."
    },
    "version" : {
      "$ref" : "#/components/schemas/SemanticVersion"
    },
    "enabled" : {
      "type" : "object",
      "description" : "Description of the features enabled on this service deployment."
    },
    "revision" : {
      "type" : "string",
      "description" : "Revision of the service source code."
    }
  },
  "description" : "Status Page"
}
""",
    object_hook=with_example_provider,
)
root_page_response_model_schema.update({"definitions": MODEL_DEFINITIONS})

root_page_response_faker = JSF(root_page_response_model_schema, allow_none_optionals=1)


class RootPageResponseStub:
    """RootPageResponse unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return root_page_response_faker.generate()

    @classmethod
    def create_instance(cls) -> "RootPageResponse":
        """Create RootPageResponse stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return RootPageResponseAdapter.validate_python(cls.create_json())
