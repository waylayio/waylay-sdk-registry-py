# coding: utf-8
"""Waylay Function Registry api tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import Union
from urllib.parse import quote

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.registry.api import TagsApi
from waylay.services.registry.service import RegistryService

from ..types.function_tag_response_stub import FunctionTagResponseStub
from ..types.function_tags_response_stub import FunctionTagsResponseStub

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.registry.models") is not None else False
)

if MODELS_AVAILABLE:
    from waylay.services.registry.models import (
        FunctionTagResponse,
        FunctionTagsResponse,
    )
    from waylay.services.registry.queries.tags_api import ListQuery


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def tags_api(waylay_api_client: ApiClient) -> TagsApi:
    return TagsApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that TagsApi api is registered in the sdk client."""
    assert isinstance(waylay_client.registry.tags, TagsApi)


def _get_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, tagName: str):
    mock_response = FunctionTagResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/registry/v2/tags/{tagName}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get
    """
    # set path params
    tagName = "tag_name_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(tagName)))
    resp = await service.tags.get(tagName, **kwargs)
    check_type(resp, Union[FunctionTagResponse,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get
    """
    # set path params
    tagName = "tag_name_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(tagName)))
    resp = await service.tags.get(tagName, **kwargs)
    check_type(resp, Model)


def _list_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = FunctionTagsResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/registry/v2/tags/(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_list(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for list
    List
    """
    # set path params
    kwargs = {
        # optionally use ListQuery to validate and reuse parameters
        "query": ListQuery(
            name="*-demo-??",
            color="#4153ea",
        ),
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.tags.list(**kwargs)
    check_type(resp, Union[FunctionTagsResponse,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_list_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list with models not installed
    List
    """
    # set path params
    kwargs = {
        "query": {
            "name": "*-demo-??",
            "color": "#4153ea",
        },
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.tags.list(**kwargs)
    check_type(resp, Model)


def _remove_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = FunctionTagsResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "DELETE",
        "url": re.compile(f"^{gateway_url}/registry/v2/tags/(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_remove(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for remove
    Remove Unused
    """
    # set path params
    kwargs = {}
    _remove_set_mock_response(httpx_mock, gateway_url)
    resp = await service.tags.remove(**kwargs)
    check_type(resp, Union[FunctionTagsResponse,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_remove_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for remove with models not installed
    Remove Unused
    """
    # set path params
    kwargs = {}
    _remove_set_mock_response(httpx_mock, gateway_url)
    resp = await service.tags.remove(**kwargs)
    check_type(resp, Model)
