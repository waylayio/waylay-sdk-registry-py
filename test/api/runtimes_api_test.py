# coding: utf-8
"""Waylay Function Registry api tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import pytest
from typeguard import check_type
from pytest_httpx import HTTPXMock
import json
import re
from importlib.util import find_spec
from urllib.parse import quote

from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.registry.api import RuntimesApi
from waylay.services.registry.service import RegistryService

from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.runtime_version_response_stub import RuntimeVersionResponseStub

from ..types.semantic_version_range_stub import SemanticVersionRangeStub

from ..types.runtime_version_response_stub import RuntimeVersionResponseStub

from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.runtime_summary_response_stub import RuntimeSummaryResponseStub

from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.runtime_summary_response_stub import RuntimeSummaryResponseStub


try:
    from waylay.services.registry.queries.runtimes_api import ExampleArchiveQuery

    from waylay.services.registry.queries.runtimes_api import GetExampleAssetQuery

    from waylay.services.registry.queries.runtimes_api import GetLatestQuery
    from waylay.services.registry.models import RuntimeVersionResponse
    from waylay.services.registry.queries.runtimes_api import GetQuery
    from waylay.services.registry.models import RuntimeVersionResponse
    from waylay.services.registry.queries.runtimes_api import ListQuery
    from waylay.services.registry.models import RuntimeSummaryResponse
    from waylay.services.registry.queries.runtimes_api import ListVersionsQuery
    from waylay.services.registry.models import RuntimeSummaryResponse

    MODELS_AVAILABLE = find_spec("waylay.services.registry.models") is not None
except ImportError:
    MODELS_AVAILABLE = False


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def runtimes_api(waylay_api_client: ApiClient) -> RuntimesApi:
    return RuntimesApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that RuntimesApi api is registered in the sdk client."""
    assert isinstance(waylay_client.registry.runtimes, RuntimesApi)


def _example_archive_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, name: str, version: str
):
    mock_response = bytes(b"blah")
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(
            f"^{gateway_url}/registry/v2/runtimes/{name}/versions/{version}/example(\\?.*)?"
        ),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_example_archive(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for example_archive
    Get Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    kwargs = {
        # optionally use ExampleArchiveQuery to validate and reuse parameters
        "query": ExampleArchiveQuery(
            ls=False,
            include_deprecated=True,
        ),
    }
    _example_archive_set_mock_response(
        httpx_mock, gateway_url, quote(str(name)), quote(str(version))
    )
    resp = await service.runtimes.example_archive(name, version, **kwargs)
    check_type(resp, bytes)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_example_archive_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for example_archive with models not installed
    Get Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    kwargs = {
        "query": {
            "ls": False,
            "includeDeprecated": True,
        },
    }
    _example_archive_set_mock_response(
        httpx_mock, gateway_url, quote(str(name)), quote(str(version))
    )
    resp = await service.runtimes.example_archive(name, version, **kwargs)
    check_type(resp, bytes)


def _get_example_asset_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, name: str, version: str, wildcard: str
):
    mock_response = bytes(b"blah")
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(
            f"^{gateway_url}/registry/v2/runtimes/{name}/versions/{version}/example/{wildcard}(\\?.*)?"
        ),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get_example_asset(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_example_asset
    Get File From Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    wildcard = "wildcard_example"

    kwargs = {
        # optionally use GetExampleAssetQuery to validate and reuse parameters
        "query": GetExampleAssetQuery(
            ls=False,
            include_deprecated=True,
        ),
    }
    _get_example_asset_set_mock_response(
        httpx_mock,
        gateway_url,
        quote(str(name)),
        quote(str(version)),
        quote(str(wildcard)),
    )
    resp = await service.runtimes.get_example_asset(name, version, wildcard, **kwargs)
    check_type(resp, bytes)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_example_asset_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_example_asset with models not installed
    Get File From Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    wildcard = "wildcard_example"

    kwargs = {
        "query": {
            "ls": False,
            "includeDeprecated": True,
        },
    }
    _get_example_asset_set_mock_response(
        httpx_mock,
        gateway_url,
        quote(str(name)),
        quote(str(version)),
        quote(str(wildcard)),
    )
    resp = await service.runtimes.get_example_asset(name, version, wildcard, **kwargs)
    check_type(resp, bytes)


def _get_latest_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, name: str):
    mock_response = RuntimeVersionResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/registry/v2/runtimes/{name}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get_latest(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest
    Get Latest Runtime Version
    """
    # set path params
    name = "name_example"

    kwargs = {
        # optionally use GetLatestQuery to validate and reuse parameters
        "query": GetLatestQuery(
            version=SemanticVersionRangeStub.create_json(),
            include_deprecated=False,
            function_type=[],
            archive_format=[],
        ),
    }
    _get_latest_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.runtimes.get_latest(name, **kwargs)
    check_type(resp, RuntimeVersionResponse)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_latest_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest with models not installed
    Get Latest Runtime Version
    """
    # set path params
    name = "name_example"

    kwargs = {
        "query": {
            "version": SemanticVersionRangeStub.create_json(),
            "includeDeprecated": False,
            "functionType": [],
            "archiveFormat": [],
        },
    }
    _get_latest_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.runtimes.get_latest(name, **kwargs)
    check_type(resp, Model)


def _get_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, name: str, version: str
):
    mock_response = RuntimeVersionResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(
            f"^{gateway_url}/registry/v2/runtimes/{name}/versions/{version}(\\?.*)?"
        ),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Runtime Version
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    kwargs = {
        # optionally use GetQuery to validate and reuse parameters
        "query": GetQuery(
            include_deprecated=True,
        ),
    }
    _get_set_mock_response(
        httpx_mock, gateway_url, quote(str(name)), quote(str(version))
    )
    resp = await service.runtimes.get(name, version, **kwargs)
    check_type(resp, RuntimeVersionResponse)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get Runtime Version
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_json()

    kwargs = {
        "query": {
            "includeDeprecated": True,
        },
    }
    _get_set_mock_response(
        httpx_mock, gateway_url, quote(str(name)), quote(str(version))
    )
    resp = await service.runtimes.get(name, version, **kwargs)
    check_type(resp, Model)


def _list_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = RuntimeSummaryResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/registry/v2/runtimes/(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_list(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for list
    List Runtimes
    """
    # set path params
    kwargs = {
        # optionally use ListQuery to validate and reuse parameters
        "query": ListQuery(
            version=SemanticVersionRangeStub.create_json(),
            latest="major",
            include_deprecated=False,
            name="node*",
            function_type=[],
            archive_format=[],
        ),
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.runtimes.list(**kwargs)
    check_type(resp, RuntimeSummaryResponse)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_list_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list with models not installed
    List Runtimes
    """
    # set path params
    kwargs = {
        "query": {
            "version": SemanticVersionRangeStub.create_json(),
            "latest": "major",
            "includeDeprecated": False,
            "name": "node*",
            "functionType": [],
            "archiveFormat": [],
        },
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.runtimes.list(**kwargs)
    check_type(resp, Model)


def _list_versions_set_mock_response(
    httpx_mock: HTTPXMock, gateway_url: str, name: str
):
    mock_response = RuntimeSummaryResponseStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(
            f"^{gateway_url}/registry/v2/runtimes/{name}/versions(\\?.*)?"
        ),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_list_versions(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list_versions
    List Runtime Versions
    """
    # set path params
    name = "name_example"

    kwargs = {
        # optionally use ListVersionsQuery to validate and reuse parameters
        "query": ListVersionsQuery(
            version=SemanticVersionRangeStub.create_json(),
            latest="major",
            include_deprecated=False,
            function_type=[],
            archive_format=[],
        ),
    }
    _list_versions_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.runtimes.list_versions(name, **kwargs)
    check_type(resp, RuntimeSummaryResponse)


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_list_versions_without_types(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list_versions with models not installed
    List Runtime Versions
    """
    # set path params
    name = "name_example"

    kwargs = {
        "query": {
            "version": SemanticVersionRangeStub.create_json(),
            "latest": "major",
            "includeDeprecated": False,
            "functionType": [],
            "archiveFormat": [],
        },
    }
    _list_versions_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.runtimes.list_versions(name, **kwargs)
    check_type(resp, Model)
