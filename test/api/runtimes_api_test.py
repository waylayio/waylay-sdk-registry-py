# coding: utf-8
"""Waylay Function Registry api tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import pytest
from typeguard import check_type
from pytest_httpx import HTTPXMock
import json
from waylay.sdk import ApiClient, WaylayClient
from waylay.services.registry.api import RuntimesApi
from waylay.services.registry.service import RegistryService


from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.runtime_version_response_stub import RuntimeVersionResponseStub
from waylay.services.registry.models import RuntimeVersionResponse


from ..types.semantic_version_range_stub import SemanticVersionRangeStub


from ..types.runtime_version_response_stub import RuntimeVersionResponseStub
from waylay.services.registry.models import RuntimeVersionResponse


from ..types.runtime_summary_response_stub import RuntimeSummaryResponseStub
from waylay.services.registry.models import RuntimeSummaryResponse


from ..types.runtime_summary_response_stub import RuntimeSummaryResponseStub
from waylay.services.registry.models import RuntimeSummaryResponse


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def runtimes_api(waylay_api_client: ApiClient) -> RuntimesApi:
    return RuntimesApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that RuntimesApi api is registered in the sdk client."""
    assert isinstance(waylay_client.registry.runtimes, RuntimesApi)


@pytest.mark.asyncio
async def test_example_archive(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for example_archive
    Get Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_instance()

    mock_response = bytes(b"blah")
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/runtimes/{name}/versions/{version}/example",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        "name": name,
        "version": version,
    }
    resp = await service.runtimes.example_archive(**kwargs)
    check_type(resp, bytes)


@pytest.mark.asyncio
async def test_get_example_asset(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_example_asset
    Get File From Runtime Example Archive
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_instance()

    wildcard = "wildcard_example"

    mock_response = bytes(b"blah")
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url
        + f"/registry/v2/runtimes/{name}/versions/{version}/example/{wildcard}",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        "name": name,
        "version": version,
        "wildcard": wildcard,
    }
    resp = await service.runtimes.get_example_asset(**kwargs)
    check_type(resp, bytes)


@pytest.mark.asyncio
async def test_get_latest(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get_latest
    Get Latest Runtime Version
    """
    # set path params
    name = "name_example"

    mock_response = RuntimeVersionResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/runtimes/{name}",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        "name": name,
    }
    resp = await service.runtimes.get_latest(**kwargs)
    check_type(resp, RuntimeVersionResponse)


@pytest.mark.asyncio
async def test_get(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Runtime Version
    """
    # set path params
    name = "name_example"

    version = SemanticVersionRangeStub.create_instance()

    mock_response = RuntimeVersionResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/runtimes/{name}/versions/{version}",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        "name": name,
        "version": version,
    }
    resp = await service.runtimes.get(**kwargs)
    check_type(resp, RuntimeVersionResponse)


@pytest.mark.asyncio
async def test_list(service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for list
    List Runtimes
    """
    # set path params

    mock_response = RuntimeSummaryResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/runtimes/",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {}
    resp = await service.runtimes.list(**kwargs)
    check_type(resp, RuntimeSummaryResponse)


@pytest.mark.asyncio
async def test_list_versions(
    service: RegistryService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list_versions
    List Runtime Versions
    """
    # set path params
    name = "name_example"

    mock_response = RuntimeSummaryResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/runtimes/{name}/versions",  # noqa: F541
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        "name": name,
    }
    resp = await service.runtimes.list_versions(**kwargs)
    check_type(resp, RuntimeSummaryResponse)
