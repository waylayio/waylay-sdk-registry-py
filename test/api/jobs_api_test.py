# coding: utf-8
"""Waylay Function Registry api tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import pytest
from typing import Dict, List
from pytest_httpx import HTTPXMock
import json
from waylay.sdk import ApiClient
from waylay.services.registry.api import JobsApi
from waylay.services.registry.service import RegistryService
from ..fixtures import WaylayTokenStub, waylay_api_client, waylay_config, waylay_token_credentials, gateway_url, registry_service


from ..types.event_with_close_sse_stub import EventWithCloseSSEStub
from waylay.services.registry.models import EventWithCloseSSE


from ..types.job_type_stub import JobTypeStub


from ..types.job_response_stub import JobResponseStub
from waylay.services.registry.models import JobResponse


from ..types.jobs_response_stub import JobsResponseStub
from waylay.services.registry.models import JobsResponse


@pytest.fixture
def jobs_api(waylay_api_client: ApiClient) -> JobsApi:
    return JobsApi(waylay_api_client)


@pytest.mark.asyncio
async def test_events(registry_service: RegistryService, gateway_url: str, mocker, httpx_mock: HTTPXMock):
    """Test case for events
        Stream Events
    """
    # set path params

    mocker.patch('waylay.sdk.WaylayTokenAuth.assure_valid_token', lambda *args: WaylayTokenStub())
    mock_response = EventWithCloseSSEStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/jobs/events",
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {

    }
    resp = await registry_service.jobs.events(**kwargs)
    assert isinstance(resp, EventWithCloseSSE)


@pytest.mark.asyncio
async def test_get(registry_service: RegistryService, gateway_url: str, mocker, httpx_mock: HTTPXMock):
    """Test case for get
        Get Job
    """
    # set path params
    type = JobTypeStub.create_instance().value

    id = 'id_example'

    mocker.patch('waylay.sdk.WaylayTokenAuth.assure_valid_token', lambda *args: WaylayTokenStub())
    mock_response = JobResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/jobs/{type}/{id}",
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        'type': type,
        'id': id,

    }
    resp = await registry_service.jobs.get(**kwargs)
    assert isinstance(resp, JobResponse)


@pytest.mark.asyncio
async def test_list(registry_service: RegistryService, gateway_url: str, mocker, httpx_mock: HTTPXMock):
    """Test case for list
        List Jobs
    """
    # set path params

    mocker.patch('waylay.sdk.WaylayTokenAuth.assure_valid_token', lambda *args: WaylayTokenStub())
    mock_response = JobsResponseStub.create_instance().to_dict()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/jobs/",
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {

    }
    resp = await registry_service.jobs.list(**kwargs)
    assert isinstance(resp, JobsResponse)
