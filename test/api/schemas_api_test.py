# coding: utf-8
"""Waylay Function Registry api tests.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import pytest
from typing import Dict, List
from pytest_httpx import HTTPXMock
import json
from waylay.sdk import ApiClient
from waylay.services.registry.api import SchemasApi
from waylay.services.registry.service import RegistryService
from ..fixtures import WaylayTokenStub, waylay_api_client, waylay_config, waylay_token_credentials, gateway_url, registry_service


from ..types.function_type_stub import FunctionTypeStub
from ..types.asset_role_stub import AssetRoleStub


@pytest.fixture
def schemas_api(waylay_api_client: ApiClient) -> SchemasApi:
    return SchemasApi(waylay_api_client)


@pytest.mark.asyncio
async def test_get_by_role(registry_service: RegistryService, gateway_url: str, mocker, httpx_mock: HTTPXMock):
    """Test case for get_by_role
        Get Asset Schema
    """
    # set path params
    functionType = FunctionTypeStub.create_instance().value

    role = AssetRoleStub.create_instance().value

    mocker.patch('waylay.sdk.WaylayTokenAuth.assure_valid_token', lambda *args: WaylayTokenStub())
    mock_response = {}
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/schemas/{functionType}/{role}/schema",
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        'function_type': functionType,
        'role': role,

    }
    resp = await registry_service.schemas.get_by_role(**kwargs)
    assert isinstance(resp, Dict)


@pytest.mark.asyncio
async def test_get(registry_service: RegistryService, gateway_url: str, mocker, httpx_mock: HTTPXMock):
    """Test case for get
        Get Asset Schema
    """
    # set path params
    schemaId = 'schema_id_example'

    mocker.patch('waylay.sdk.WaylayTokenAuth.assure_valid_token', lambda *args: WaylayTokenStub())
    mock_response = {}
    httpx_mock_kwargs = {
        "method": "GET",
        "url": gateway_url + f"/registry/v2/schemas/{schemaId}",
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)
    kwargs = {
        'schema_id': schemaId,

    }
    resp = await registry_service.schemas.get(**kwargs)
    assert isinstance(resp, Dict)
