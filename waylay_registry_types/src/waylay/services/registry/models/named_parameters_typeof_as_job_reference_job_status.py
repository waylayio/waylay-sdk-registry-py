# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from ..models.failure_reason import FailureReason
from ..models.function_ref import FunctionRef
from ..models.job_hal_links import JobHALLinks
from ..models.job_state_result import JobStateResult
from ..models.job_status import JobStatus


from typing_extensions import (
    Self,  # >=3.11
)


class NamedParametersTypeofAsJobReferenceJobStatus(BaseModel):
    """NamedParametersTypeofAsJobReferenceJobStatus."""

    links: Optional[JobHALLinks] = Field(default=None, alias="_links")
    type: Optional[Any] = Field(description="The type of the background task.")
    state: JobStateResult
    request: Optional[Any] = Field(
        default=None, description="The request that initiated this job."
    )
    result: Optional[Any] = Field(
        default=None, description="The result of the job if completed."
    )
    created_at: datetime = Field(
        description="The timestamp of creation of this job", alias="createdAt"
    )
    created_by: StrictStr = Field(
        description="The user that created this job", alias="createdBy"
    )
    operation: StrictStr = Field(description="Request operation")
    function: Optional[FunctionRef] = None
    job: Optional[JobStatus] = None
    failure_reason: Optional[FailureReason] = Field(default=None, alias="failureReason")

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NamedParametersTypeofAsJobReferenceJobStatus from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:  # pylint: disable=unsupported-membership-test
            _dict["type"] = None

        # set to None if request (nullable) is None
        # and model_fields_set contains the field
        if self.request is None and "request" in self.model_fields_set:  # pylint: disable=unsupported-membership-test
            _dict["request"] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:  # pylint: disable=unsupported-membership-test
            _dict["result"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NamedParametersTypeofAsJobReferenceJobStatus from a dict."""
        if obj is None:
            return None
        return cls.model_validate(obj)
