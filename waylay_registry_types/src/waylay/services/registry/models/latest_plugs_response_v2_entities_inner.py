# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from ..models.alt_version_hal_link import AltVersionHALLink
from ..models.failure_reason import FailureReason
from ..models.plug_manifest import PlugManifest
from ..models.runtime_attributes import RuntimeAttributes
from ..models.status import Status
from ..models.update_record import UpdateRecord


try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class LatestPlugsResponseV2EntitiesInner(BaseModel):
    """LatestPlugsResponseV2EntitiesInner."""

    links: AltVersionHALLink = Field(alias="_links")
    created_by: StrictStr = Field(description="The user that created this entity.", alias="createdBy")
    created_at: datetime = Field(description="The timestamp at which this entity was created.", alias="createdAt")
    updated_by: StrictStr = Field(description="The user that last updated this entity.", alias="updatedBy")
    updated_at: datetime = Field(description="The timestamp at which this entity was last updated.", alias="updatedAt")
    updates: List[UpdateRecord] = Field(description="The audit logs corresponding to the latest modifying operations on this entity.")
    status: Status
    failure_reason: Optional[FailureReason] = Field(default=None, alias="failureReason")
    runtime: RuntimeAttributes
    deprecated: StrictBool = Field(description="If <code>true</code> this plug is removed from regular listings, as a result of a <code>DELETE</code> with <code>force=false</code>.")
    draft: StrictBool = Field(description="If <code>true</code> this function is a draft function and it's assets are still mutable.")
    plug: PlugManifest
    __properties: ClassVar[List[str]] = ["_links", "createdBy", "createdAt", "updatedBy", "updatedAt", "updates", "status", "failureReason", "runtime", "deprecated", "draft", "plug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LatestPlugsResponseV2EntitiesInner from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        # pylint: disable=not-an-iterable, no-member, unsupported-membership-test
        # pylint has some issues with `field` https://github.com/pylint-dev/pylint/issues/7437, so disable some checks
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in updates (list)
        _items = []
        if self.updates:
            for _item in self.updates:  # type: ignore
                if _item:
                    _items.append(_item.to_dict())
            _dict['updates'] = _items
        # override the default output from pydantic by calling `to_dict()` of failure_reason
        if self.failure_reason:
            _dict['failureReason'] = self.failure_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime
        if self.runtime:
            _dict['runtime'] = self.runtime.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plug
        if self.plug:
            _dict['plug'] = self.plug.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LatestPlugsResponseV2EntitiesInner from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": AltVersionHALLink.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,    # type: ignore
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedBy": obj.get("updatedBy"),
            "updatedAt": obj.get("updatedAt"),
            "updates": [UpdateRecord.from_dict(_item) for _item in obj.get("updates")] if obj.get("updates") is not None else None,  # type: ignore
            "status": obj.get("status"),
            "failureReason": FailureReason.from_dict(obj.get("failureReason")) if obj.get("failureReason") is not None else None,    # type: ignore
            "runtime": RuntimeAttributes.from_dict(obj.get("runtime")) if obj.get("runtime") is not None else None,    # type: ignore
            "deprecated": obj.get("deprecated"),
            "draft": obj.get("draft"),
            "plug": PlugManifest.from_dict(obj.get("plug")) if obj.get("plug") is not None else None    # type: ignore
        })
        return _obj
