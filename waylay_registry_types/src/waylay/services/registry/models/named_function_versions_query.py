# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from ..models.archive_format import ArchiveFormat
from ..models.semantic_version_range import SemanticVersionRange
from ..models.status_filter import StatusFilter
from ..models.timestamp_spec import TimestampSpec


from typing_extensions import (
    Self,  # >=3.11
)


class NamedFunctionVersionsQuery(BaseModel):
    """Named function versions listing query.."""

    limit: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=0)],
            Annotated[int, Field(strict=True, ge=0)],
        ]
    ] = Field(
        default=None,
        description="The maximum number of items to be return from this query. Has a deployment-defined default and maximum value.",
    )
    page: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=0)],
            Annotated[int, Field(strict=True, ge=0)],
        ]
    ] = Field(
        default=None,
        description="The number of pages to skip when returning result to this query.",
    )
    deprecated: Optional[StrictBool] = Field(
        default=None, description="Filter on the deprecation status of the function."
    )
    draft: Optional[StrictBool] = Field(
        default=None, description="Filter on the draft status of the function."
    )
    version: Optional[StrictStr] = Field(
        default=None,
        description="Filter on the version of the function (case-sensitive, supports wildcards).",
    )
    status: Optional[List[StatusFilter]] = Field(
        default=None,
        description="Filter on the status of the plug. Filter values with a `-` postfix exclude the status. Use the `any` filter value to include all states. When not specified, a default `undeployed-` filter excludes _undeployed_ functions.",
    )
    runtime_version: Optional[SemanticVersionRange] = Field(
        default=None, alias="runtimeVersion"
    )
    created_by: Optional[StrictStr] = Field(
        default=None,
        description="Filter on the user that create the plug. You can use the `@me` token to indicate your own plugs.",
        alias="createdBy",
    )
    updated_by: Optional[StrictStr] = Field(
        default=None,
        description="Filter on the user that last updated the plug. You can use the `@me` token to indicate your own plugs.",
        alias="updatedBy",
    )
    created_before: Optional[TimestampSpec] = Field(default=None, alias="createdBefore")
    created_after: Optional[TimestampSpec] = Field(default=None, alias="createdAfter")
    updated_before: Optional[TimestampSpec] = Field(default=None, alias="updatedBefore")
    updated_after: Optional[TimestampSpec] = Field(default=None, alias="updatedAfter")
    archive_format: Optional[List[ArchiveFormat]] = Field(
        default=None,
        description="Filter on the archive format of the function.",
        alias="archiveFormat",
    )
    runtime: Optional[List[StrictStr]] = Field(
        default=None, description="Filter on the runtime of the function."
    )

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NamedFunctionVersionsQuery from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NamedFunctionVersionsQuery from a dict."""
        if obj is None:
            return None
        return cls.model_validate(obj)
