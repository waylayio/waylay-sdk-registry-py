# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from ..models.assets_conditions import AssetsConditions
from ..models.build_spec import BuildSpec
from ..models.deploy_spec import DeploySpec
from ..models.language_release import LanguageRelease
from ..models.provided_dependency import ProvidedDependency


try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RuntimeSpecification(BaseModel):
    """Runtime (version) specification that says * what assets are required/allowed to build the function * what build parameters are used * what deployment parameters are used * which dependencies are provided by the runtime."""

    build: Optional[BuildSpec] = None
    deploy: Optional[DeploySpec] = None
    language: Optional[LanguageRelease] = None
    provided_dependencies: Optional[List[ProvidedDependency]] = Field(default=None, description="Description of dependencies provided by this runtime version.", alias="providedDependencies")
    assets: Optional[AssetsConditions] = None
    deprecated: Optional[StrictBool] = Field(default=None, description="If true, this runtime should no longer be used for new functions.")
    __properties: ClassVar[List[str]] = ["build", "deploy", "language", "providedDependencies", "assets", "deprecated"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RuntimeSpecification from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        # pylint: disable=not-an-iterable, no-member, unsupported-membership-test
        # pylint has some issues with `field` https://github.com/pylint-dev/pylint/issues/7437, so disable some checks
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deploy
        if self.deploy:
            _dict['deploy'] = self.deploy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in provided_dependencies (list)
        _items = []
        if self.provided_dependencies:
            for _item in self.provided_dependencies:  # type: ignore
                if _item:
                    _items.append(_item.to_dict())
            _dict['providedDependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of assets
        if self.assets:
            _dict['assets'] = self.assets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RuntimeSpecification from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": BuildSpec.from_dict(obj.get("build")) if obj.get("build") is not None else None,    # type: ignore
            "deploy": DeploySpec.from_dict(obj.get("deploy")) if obj.get("deploy") is not None else None,    # type: ignore
            "language": LanguageRelease.from_dict(obj.get("language")) if obj.get("language") is not None else None,    # type: ignore
            "providedDependencies": [ProvidedDependency.from_dict(_item) for _item in obj.get("providedDependencies")] if obj.get("providedDependencies") is not None else None,  # type: ignore
            "assets": AssetsConditions.from_dict(obj.get("assets")) if obj.get("assets") is not None else None,    # type: ignore
            "deprecated": obj.get("deprecated")
        })
        return _obj
