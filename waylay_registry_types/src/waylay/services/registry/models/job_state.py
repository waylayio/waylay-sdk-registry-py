# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from ..models.job_state_active import JobStateActive
from ..models.job_state_delayed import JobStateDelayed
from ..models.job_state_finished import JobStateFinished
from ..models.job_state_waiting import JobStateWaiting
from ..models.job_state_waiting_children import JobStateWaitingChildren

from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

JOBSTATE_ANY_OF_SCHEMAS = ["JobStateActive", "JobStateDelayed", "JobStateFinished", "JobStateWaiting", "JobStateWaitingChildren"]


class JobState(BaseModel):
    """Allowed job states."""

    # data type: JobStateFinished
    anyof_schema_1_validator: Optional[JobStateFinished] = None
    # data type: JobStateActive
    anyof_schema_2_validator: Optional[JobStateActive] = None
    # data type: JobStateDelayed
    anyof_schema_3_validator: Optional[JobStateDelayed] = None
    # data type: JobStateWaiting
    anyof_schema_4_validator: Optional[JobStateWaiting] = None
    # data type: JobStateWaitingChildren
    anyof_schema_5_validator: Optional[JobStateWaitingChildren] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[JobStateActive, JobStateDelayed, JobStateFinished, JobStateWaiting, JobStateWaitingChildren]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = JOBSTATE_ANY_OF_SCHEMAS

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        """Create a JobState model instance."""
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    @classmethod
    def actual_instance_must_validate_anyof(cls, v):
        """Validate the actual instance on deserialisation."""
        instance = JobState.model_construct()
        error_messages = []
        # validate data type: JobStateFinished
        if not isinstance(v, JobStateFinished):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobStateFinished`")
        else:
            return v

        # validate data type: JobStateActive
        if not isinstance(v, JobStateActive):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobStateActive`")
        else:
            return v

        # validate data type: JobStateDelayed
        if not isinstance(v, JobStateDelayed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobStateDelayed`")
        else:
            return v

        # validate data type: JobStateWaiting
        if not isinstance(v, JobStateWaiting):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobStateWaiting`")
        else:
            return v

        # validate data type: JobStateWaitingChildren
        if not isinstance(v, JobStateWaitingChildren):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobStateWaitingChildren`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in JobState with anyOf schemas: JobStateActive, JobStateDelayed, JobStateFinished, JobStateWaiting, JobStateWaitingChildren. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Get a dict representation of an object."""
        return cls.from_json(json.dumps(obj, default=str))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Get the object represented by the JSON string."""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[JobStateFinished] = None
        try:
            instance.actual_instance = JobStateFinished.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[JobStateActive] = None
        try:
            instance.actual_instance = JobStateActive.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[JobStateDelayed] = None
        try:
            instance.actual_instance = JobStateDelayed.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[JobStateWaiting] = None
        try:
            instance.actual_instance = JobStateWaiting.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[JobStateWaitingChildren] = None
        try:
            instance.actual_instance = JobStateWaitingChildren.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into JobState with anyOf schemas: JobStateActive, JobStateDelayed, JobStateFinished, JobStateWaiting, JobStateWaitingChildren. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Get the JSON representation of the actual instance."""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()  # type: ignore
        else:
            return json.dumps(self.actual_instance, default=str)

    def to_dict(self) -> Optional[Dict]:
        """Get the dict representation of the actual instance."""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()  # type: ignore
        else:
            return json.dumps(self.actual_instance, default=str)  # type: ignore

    def to_str(self) -> str:
        """Get the string representation of the actual instance."""
        return pprint.pformat(self.model_dump())
