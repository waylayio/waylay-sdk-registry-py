# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from ..models.failure_reason import FailureReason
from ..models.legacy_configuration_response_object import (
    LegacyConfigurationResponseObject,
)
from ..models.legacy_plug_response_metadata import LegacyPlugResponseMetadata
from ..models.media_type import MediaType
from ..models.status import Status


from typing_extensions import (
    Self,  # >=3.11
)


class LegacyPlugResponse(BaseModel):
    """LegacyPlugResponse."""

    name: StrictStr
    version: Annotated[str, Field(strict=True)] = Field(
        description="A semantic version with _exactly_ a `major`, `minor` and `patch` specifier. No `pre-release` or `build` identifiers are allowed. See https://semver.org"
    )
    author: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    icon_url: Optional[StrictStr] = Field(default=None, alias="iconURL")
    documentation_url: Optional[StrictStr] = Field(
        default=None, alias="documentationURL"
    )
    is_deprecated: StrictBool = Field(alias="isDeprecated")
    description: Optional[StrictStr] = None
    states: Optional[List[StrictStr]] = None
    raw_data: Optional[List[Dict[str, Any]]] = Field(default=None, alias="rawData")
    media_type: MediaType = Field(alias="mediaType")
    configuration: Optional[List[LegacyConfigurationResponseObject]] = None
    commands: List[StrictStr]
    status: Status
    failure_reason: Optional[FailureReason] = Field(default=None, alias="failureReason")
    metadata: LegacyPlugResponseMetadata

    @field_validator("version")
    @classmethod
    def version_validate_regular_expression(cls, value):
        """Validate the regular expression."""
        if not re.match(r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$", value):
            raise ValueError(
                r"must validate the regular expression /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LegacyPlugResponse from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LegacyPlugResponse from a dict."""
        if obj is None:
            return None
        return cls.model_validate(obj)
