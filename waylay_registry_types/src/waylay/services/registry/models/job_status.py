# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from ..models.job_status_progress import JobStatusProgress
from ..models.parent_keys import ParentKeys


from typing import cast

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class JobStatus(BaseModel):
    """JobStatus."""

    id: StrictStr
    name: StrictStr
    progress: JobStatusProgress
    attempts_made: Union[StrictFloat, StrictInt] = Field(alias="attemptsMade")
    finished_on: Optional[datetime] = Field(default=None, alias="finishedOn")
    processed_on: Optional[datetime] = Field(default=None, alias="processedOn")
    failed_reason: Optional[StrictStr] = Field(default=None, alias="failedReason")
    parent: Optional[ParentKeys] = None
    delay: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "progress",
        "attemptsMade",
        "finishedOn",
        "processedOn",
        "failedReason",
        "parent",
        "delay",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Get the string representation of the model using alias."""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Get the JSON representation of the model using alias."""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict(), default=str)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobStatus from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        # pylint: disable=not-an-iterable, no-member, unsupported-membership-test
        # pylint has some issues with `field` https://github.com/pylint-dev/pylint/issues/7437, so disable some checks
        """Get the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict["progress"] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict["parent"] = self.parent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobStatus from a dict."""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "progress": (
                    JobStatusProgress.from_dict(cast(dict, obj.get("progress")))
                    if obj.get("progress") is not None
                    else None
                ),
                "attemptsMade": obj.get("attemptsMade"),
                "finishedOn": obj.get("finishedOn"),
                "processedOn": obj.get("processedOn"),
                "failedReason": obj.get("failedReason"),
                "parent": (
                    ParentKeys.from_dict(cast(dict, obj.get("parent")))
                    if obj.get("parent") is not None
                    else None
                ),
                "delay": obj.get("delay"),
            }
        )
        return _obj
