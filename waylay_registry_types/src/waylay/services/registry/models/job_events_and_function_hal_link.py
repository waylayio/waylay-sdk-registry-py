# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from ..models.job_events_hal_link import JobEventsHALLink
from ..models.model import Model
from ..models.plug import Plug
from ..models.webscript import Webscript

from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

JOBEVENTSANDFUNCTIONHALLINK_ANY_OF_SCHEMAS = ["JobEventsHALLink", "Model", "Plug", "Webscript"]


class JobEventsAndFunctionHALLink(BaseModel):
    """HAL links to related actions.."""

    # data type: Plug
    anyof_schema_1_validator: Optional[Plug] = None
    # data type: Webscript
    anyof_schema_2_validator: Optional[Webscript] = None
    # data type: Model
    anyof_schema_3_validator: Optional[Model] = None
    # data type: JobEventsHALLink
    anyof_schema_4_validator: Optional[JobEventsHALLink] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[JobEventsHALLink, Model, Plug, Webscript]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = JOBEVENTSANDFUNCTIONHALLINK_ANY_OF_SCHEMAS

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        """Create a JobEventsAndFunctionHALLink model instance."""
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    @classmethod
    def actual_instance_must_validate_anyof(cls, v):
        """Validate the actual instance on deserialisation."""
        instance = JobEventsAndFunctionHALLink.model_construct()
        error_messages = []
        # validate data type: Plug
        if not isinstance(v, Plug):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Plug`")
        else:
            return v

        # validate data type: Webscript
        if not isinstance(v, Webscript):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Webscript`")
        else:
            return v

        # validate data type: Model
        if not isinstance(v, Model):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Model`")
        else:
            return v

        # validate data type: JobEventsHALLink
        if not isinstance(v, JobEventsHALLink):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JobEventsHALLink`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in JobEventsAndFunctionHALLink with anyOf schemas: JobEventsHALLink, Model, Plug, Webscript. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Get a dict representation of an object."""
        return cls.from_json(json.dumps(obj, default=str))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Get the object represented by the JSON string."""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[Plug] = None
        try:
            instance.actual_instance = Plug.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[Webscript] = None
        try:
            instance.actual_instance = Webscript.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[Model] = None
        try:
            instance.actual_instance = Model.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[JobEventsHALLink] = None
        try:
            instance.actual_instance = JobEventsHALLink.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into JobEventsAndFunctionHALLink with anyOf schemas: JobEventsHALLink, Model, Plug, Webscript. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Get the JSON representation of the actual instance."""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()  # type: ignore
        else:
            return json.dumps(self.actual_instance, default=str)

    def to_dict(self) -> Optional[Dict]:
        """Get the dict representation of the actual instance."""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()  # type: ignore
        else:
            return json.dumps(self.actual_instance, default=str)  # type: ignore

    def to_str(self) -> str:
        """Get the string representation of the actual instance."""
        return pprint.pformat(self.model_dump())
