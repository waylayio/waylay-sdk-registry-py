# coding: utf-8
"""Waylay Function Registry query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from pydantic import (
    BaseModel,
    Field,
    StrictStr,
    ConfigDict,
    SerializationInfo,
    model_serializer,
)
from typing import Dict, List, Optional, Union, Any, Callable
from typing_extensions import (
    Self,  # >=3.11
)

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictStr

from typing import Any, List, Optional, Union

from ..models.function_type import FunctionType
from ..models.job_state_result import JobStateResult
from ..models.job_type import JobType
from ..models.job_type_schema import JobTypeSchema


def _events_query_alias_for(field_name: str) -> str:
    if field_name == "type":
        return "type"
    if field_name == "id":
        return "id"
    if field_name == "children":
        return "children"
    return field_name


class EventsQuery(BaseModel):
    """Model for `events` query parameters."""

    type: Annotated[Optional[JobType], Field(description="The type of the job.")] = None
    id: Annotated[Optional[StrictStr], Field(description="The id of the job.")] = None
    children: Annotated[
        Optional[StrictBool],
        Field(
            description="If set to <code>true</code>, the event stream will include events of the job's dependants. E.g., when subscribing to a verify job with `children=true`, you will also receive the events of the underlying build and deploy jobs. Defaults to <code>false</code>."
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_events_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the EventsQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the EventsQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a EventsQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: Union[str, bytes, bytearray]) -> Self:
        """Create a EventsQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _get_query_alias_for(field_name: str) -> str:
    return field_name


class GetQuery(BaseModel):
    """Model for `get` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the GetQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the GetQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a GetQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: Union[str, bytes, bytearray]) -> Self:
        """Create a GetQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "limit":
        return "limit"
    if field_name == "type":
        return "type"
    if field_name == "state":
        return "state"
    if field_name == "function_type":
        return "functionType"
    if field_name == "created_before":
        return "createdBefore"
    if field_name == "created_after":
        return "createdAfter"
    return field_name


class ListQuery(BaseModel):
    """Model for `list` query parameters."""

    limit: Annotated[
        Optional[
            Union[
                Annotated[float, Field(strict=True, ge=0)],
                Annotated[int, Field(strict=True, ge=0)],
            ]
        ],
        Field(
            description="The maximum number of items to be return from this query. Has a deployment-defined default and maximum value."
        ),
    ] = None
    type: Annotated[
        Optional[List[JobTypeSchema]], Field(description="Filter on job type")
    ] = None
    state: Annotated[
        Optional[List[JobStateResult]], Field(description="Filter on job state")
    ] = None
    function_type: Annotated[
        Optional[List[FunctionType]], Field(description="Filter on function type")
    ] = None
    created_before: Annotated[
        Optional[Any],
        Field(
            description="Filter on jobs that created before the given timestamp or age"
        ),
    ] = None
    created_after: Annotated[
        Optional[Any],
        Field(
            description="Filter on jobs that created after the given timestamp or age"
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the ListQuery instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the ListQuery instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a ListQuery instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: Union[str, bytes, bytearray]) -> Self:
        """Create a ListQuery instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)
