# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict, SerializationInfo, model_serializer, StrictStr
from pydantic_core import from_json
from typing import Callable, Union
from typing import cast
from typing_extensions import (
    Self,  # >=3.11
)

from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from ..models.failure_reason import FailureReason
from ..models.legacy_configuration_response_object import (
    LegacyConfigurationResponseObject,
)
from ..models.legacy_plug_response_metadata import LegacyPlugResponseMetadata
from ..models.media_type import MediaType
from ..models.status import Status


class LegacyPlugResponse(BaseModel):
    """LegacyPlugResponse."""

    name: StrictStr
    version: Annotated[str, Field(strict=True)] = Field(
        description="A semantic version with _exactly_ a `major`, `minor` and `patch` specifier. No `pre-release` or `build` identifiers are allowed. See https://semver.org"
    )
    author: StrictStr | None = None
    category: StrictStr | None = None
    icon_url: StrictStr | None = Field(default=None, alias="iconURL")
    documentation_url: StrictStr | None = Field(default=None, alias="documentationURL")
    is_deprecated: StrictBool = Field(alias="isDeprecated")
    description: StrictStr | None = None
    states: List[StrictStr] | None = None
    raw_data: List[Dict[str, Any]] | None = Field(default=None, alias="rawData")
    media_type: MediaType = Field(alias="mediaType")
    configuration: List[LegacyConfigurationResponseObject] | None = None
    commands: List[StrictStr]
    status: Status
    failure_reason: FailureReason | None = Field(default=None, alias="failureReason")
    metadata: LegacyPlugResponseMetadata

    @field_validator("version")
    @classmethod
    def version_validate_regular_expression(cls, value):
        """Validate the regular expression."""
        if not re.match(r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$", value):
            raise ValueError(
                r"must validate the regular expression /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the LegacyPlugResponse instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the LegacyPlugResponse instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a LegacyPlugResponse instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a LegacyPlugResponse instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)
