# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations

import re

from pydantic import (
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing_extensions import (
    Annotated,  # >=3.11
)
from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.create_function_query_v2_copy import CreateFunctionQueryV2Copy
from ..models.deprecate_previous_policy import DeprecatePreviousPolicy
from ..models.semantic_version_range import SemanticVersionRange


class CreateFunctionQueryV2(WaylayBaseModel):
    """CreateFunctionQueryV2."""

    deploy: StrictBool | None = Field(
        default=True,
        description="Indicates that a function should be _deployed_ when its assets are valid.  * If `true` (default), jobs to build and deploy the function will be initiated after it is checked that the assets are valid. Invalid assets lead to a validation error, and the function and its assets are not created or updated. * If `false`, the uploaded assets are stored and the function is created/updated in `registered` state. Asset validation errors are only returned as warning, and stored as `failureReason` on the function entity. Use an _asset update_ or _rebuild_ to initiate a build and deploy at a later stage.",
    )
    author: StrictStr | None = Field(
        default=None,
        description="Optionally changes the author metadata when updating a function.",
    )
    comment: StrictStr | None = Field(
        default=None,
        description="An optional user-specified comment corresponding to the operation.",
    )
    scale_to_zero: StrictBool | None = Field(
        default=False,
        description="If set to <code>true</code>, after successful deployment, the deployed function will be scaled to zero. This saves computing resources when the function is not to be used immediately.",
        alias="scaleToZero",
    )
    deprecate_previous: DeprecatePreviousPolicy | None = Field(
        default=None, alias="deprecatePrevious"
    )
    dry_run: StrictBool | None = Field(
        default=None,
        description="If set to <code>true</code>, validates the deployment conditions, but does not change anything.",
        alias="dryRun",
    )
    var_async: StrictBool | None = Field(
        default=True,
        description="Unless this is set to <code>false</code>, the server will start the required job actions asynchronously and return a <code>202</code> <em>Accepted</em> response. If <code>false</code> the request will block until the job actions are completed, or a timeout occurs.",
        alias="async",
    )
    version: SemanticVersionRange | None = None
    name: StrictStr | None = Field(
        default=None,
        description="If set, the value will be used as the function name instead of the one specified in the manifest.",
    )
    draft: StrictBool | None = Field(
        default=False,
        description="If set, the created function will be a draft function and its assets are still mutable. A build and deploy is initiated only in the case when all necessary assets are present and valid.",
    )
    runtime: Annotated[str, Field(strict=True)] | None = Field(
        default=None,
        description="A name reference with optional version range: `<name>[@<versionRange>]`.  References (a version range of) a named and versioned entity like _function_ or _runtime_.",
    )
    copy_from: CreateFunctionQueryV2Copy | None = Field(default=None, alias="copy")

    @field_validator("runtime")
    @classmethod
    def runtime_validate_regular_expression(cls, value):
        """Validate the regular expression."""
        if value is None:
            return value
        if not re.match(r"^[^@]*(@.*)?$", value):
            raise ValueError(r"must validate the regular expression /^[^@]*(@.*)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )
