# coding: utf-8
"""Waylay Function Registry models.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.

"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from pydantic import ConfigDict, SerializationInfo, model_serializer, StrictStr
from pydantic_core import from_json
from typing import Callable, Union
from typing import cast
from typing_extensions import (
    Self,  # >=3.11
)

from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from ..models.rebuild_policy import RebuildPolicy


class RebuildQueryV2(BaseModel):
    """RebuildQueryV2."""

    comment: StrictStr | None = Field(
        default=None,
        description="An optional user-specified comment corresponding to the operation.",
    )
    dry_run: StrictBool | None = Field(
        default=None,
        description="If set to <code>true</code>, checks whether rebuild jobs are needed, but do not start any jobs.",
        alias="dryRun",
    )
    var_async: StrictBool | None = Field(
        default=True,
        description="Unless this is set to <code>false</code>, the server will start the required job actions asynchronously and return a <code>202</code> <em>Accepted</em> response. If <code>false</code> the request will block until the job actions are completed, or a timeout occurs.",
        alias="async",
    )
    upgrade: RebuildPolicy | None = None
    force_version: Annotated[str, Field(strict=True)] | None = Field(
        default=None,
        description="A semantic version with _exactly_ a `major`, `minor` and `patch` specifier. No `pre-release` or `build` identifiers are allowed. See https://semver.org",
        alias="forceVersion",
    )
    ignore_checks: StrictBool | None = Field(
        default=None,
        description="If set to true, checks that normally prevent a rebuild are overriden. These checks include: * function state in `pending`, `running`, `failed` or `undeployed` * backoff period due to recent failures * usage of deprecated dependencies * running jobs on entity * the `dryRun` option",
        alias="ignoreChecks",
    )
    scale_to_zero: StrictBool | None = Field(
        default=None,
        description="Indicates whether the function needs to be scaled down after successful (re-)deployment. If not set, the function is scaled to zero only if it was not active before this command.",
        alias="scaleToZero",
    )
    skip_rebuild: StrictBool | None = Field(
        default=None,
        description="If set, the function will not be rebuild. Always uses the current runtime version when re-deploying/re-verifying the function.",
        alias="skipRebuild",
    )

    @field_validator("force_version")
    @classmethod
    def force_version_validate_regular_expression(cls, value):
        """Validate the regular expression."""
        if value is None:
            return value
        if not re.match(r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$", value):
            raise ValueError(
                r"must validate the regular expression /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        extra="ignore",
    )

    @model_serializer(mode="wrap")
    def serializer(
        self, handler: Callable, info: SerializationInfo
    ) -> Dict[StrictStr, Any]:
        """The default serializer of the model.

        * Excludes `None` fields that were not set at model initialization.
        """
        model_dict = handler(self, info)
        return {
            k: v
            for k, v in model_dict.items()
            if v is not None or k in self.model_fields_set
        }

    def to_dict(self) -> dict[str, Any]:
        """Convert the RebuildQueryV2 instance to dict."""
        return self.model_dump(by_alias=True, exclude_unset=True, exclude_none=True)

    def to_json(self) -> str:
        """Convert the RebuildQueryV2 instance to a JSON-encoded string."""
        return self.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_none=True
        )

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create a RebuildQueryV2 instance from a dict."""
        return cls.model_validate(obj)

    @classmethod
    def from_json(cls, json_data: str | bytes | bytearray) -> Self:
        """Create a RebuildQueryV2 instance from a JSON-encoded string."""
        return cls.model_validate_json(json_data)
