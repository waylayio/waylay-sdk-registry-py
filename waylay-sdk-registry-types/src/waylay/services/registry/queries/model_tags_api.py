# coding: utf-8
"""Waylay Function Registry query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from pydantic import (
    ConfigDict,
    Field,
)
from typing_extensions import (
    Annotated,  # >=3.11
)

from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.tagging_scope_option import TaggingScopeOption


def _add_all_query_alias_for(field_name: str) -> str:
    return field_name


class AddAllQuery(WaylayBaseModel):
    """Model for `add_all` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_add_all_query_alias_for,
        populate_by_name=True,
    )


def _add_query_alias_for(field_name: str) -> str:
    return field_name


class AddQuery(WaylayBaseModel):
    """Model for `add` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_add_query_alias_for,
        populate_by_name=True,
    )


def _clear_all_query_alias_for(field_name: str) -> str:
    if field_name == "scope":
        return "scope"
    return field_name


class ClearAllQuery(WaylayBaseModel):
    """Model for `clear_all` query parameters."""

    scope: Annotated[
        TaggingScopeOption | None,
        Field(
            description="Tagging operations on a _named_ function can either operate on - `any` versions: operate on tags that are are associated on _any_ version (union) - `all` versions: operate on tags that are are associated with _all_ versions (intersection)"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_clear_all_query_alias_for,
        populate_by_name=True,
    )


def _clear_query_alias_for(field_name: str) -> str:
    return field_name


class ClearQuery(WaylayBaseModel):
    """Model for `clear` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_clear_query_alias_for,
        populate_by_name=True,
    )


def _find_all_query_alias_for(field_name: str) -> str:
    if field_name == "scope":
        return "scope"
    return field_name


class FindAllQuery(WaylayBaseModel):
    """Model for `find_all` query parameters."""

    scope: Annotated[
        TaggingScopeOption | None,
        Field(
            description="Tagging operations on a _named_ function can either operate on - `any` versions: operate on tags that are are associated on _any_ version (union) - `all` versions: operate on tags that are are associated with _all_ versions (intersection)"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_find_all_query_alias_for,
        populate_by_name=True,
    )


def _find_query_alias_for(field_name: str) -> str:
    return field_name


class FindQuery(WaylayBaseModel):
    """Model for `find` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_find_query_alias_for,
        populate_by_name=True,
    )


def _list_all_query_alias_for(field_name: str) -> str:
    if field_name == "scope":
        return "scope"
    return field_name


class ListAllQuery(WaylayBaseModel):
    """Model for `list_all` query parameters."""

    scope: Annotated[
        TaggingScopeOption | None,
        Field(
            description="Tagging operations on a _named_ function can either operate on - `any` versions: operate on tags that are are associated on _any_ version (union) - `all` versions: operate on tags that are are associated with _all_ versions (intersection)"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_all_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _put_all_query_alias_for(field_name: str) -> str:
    return field_name


class PutAllQuery(WaylayBaseModel):
    """Model for `put_all` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_put_all_query_alias_for,
        populate_by_name=True,
    )


def _put_query_alias_for(field_name: str) -> str:
    return field_name


class PutQuery(WaylayBaseModel):
    """Model for `put` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_put_query_alias_for,
        populate_by_name=True,
    )


def _remove_all_query_alias_for(field_name: str) -> str:
    return field_name


class RemoveAllQuery(WaylayBaseModel):
    """Model for `remove_all` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_remove_all_query_alias_for,
        populate_by_name=True,
    )


def _remove_query_alias_for(field_name: str) -> str:
    return field_name


class RemoveQuery(WaylayBaseModel):
    """Model for `remove` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_remove_query_alias_for,
        populate_by_name=True,
    )


def _replace_all_query_alias_for(field_name: str) -> str:
    if field_name == "scope":
        return "scope"
    return field_name


class ReplaceAllQuery(WaylayBaseModel):
    """Model for `replace_all` query parameters."""

    scope: Annotated[
        TaggingScopeOption | None,
        Field(
            description="Tagging operations on a _named_ function can either operate on - `any` versions: operate on tags that are are associated on _any_ version (union) - `all` versions: operate on tags that are are associated with _all_ versions (intersection)"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_all_query_alias_for,
        populate_by_name=True,
    )


def _replace_query_alias_for(field_name: str) -> str:
    return field_name


class ReplaceQuery(WaylayBaseModel):
    """Model for `replace` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_query_alias_for,
        populate_by_name=True,
    )
