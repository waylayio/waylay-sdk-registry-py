# coding: utf-8
"""Waylay Function Registry query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from typing import Any, List

from pydantic import (
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
)
from typing_extensions import (
    Annotated,  # >=3.11
)

from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.archive_format_filter import ArchiveFormatFilter
from ..models.function_type_filter import FunctionTypeFilter
from ..models.latest_version_level import LatestVersionLevel
from ..models.show_embedding import ShowEmbedding


def _example_archive_query_alias_for(field_name: str) -> str:
    if field_name == "ls":
        return "ls"
    if field_name == "show_tags":
        return "showTags"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    return field_name


class ExampleArchiveQuery(WaylayBaseModel):
    """Model for `example_archive` query parameters."""

    ls: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, the result will be a listing of the files in the asset, annotated with metadata and validation report from the asset conditions of the functions runtime."
        ),
    ] = None
    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_example_archive_query_alias_for,
        populate_by_name=True,
    )


def _get_example_asset_query_alias_for(field_name: str) -> str:
    if field_name == "ls":
        return "ls"
    if field_name == "show_tags":
        return "showTags"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    return field_name


class GetExampleAssetQuery(WaylayBaseModel):
    """Model for `get_example_asset` query parameters."""

    ls: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, the result will be a listing of the files in the asset, annotated with metadata and validation report from the asset conditions of the functions runtime."
        ),
    ] = None
    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_example_asset_query_alias_for,
        populate_by_name=True,
    )


def _get_latest_query_alias_for(field_name: str) -> str:
    if field_name == "show_tags":
        return "showTags"
    if field_name == "version":
        return "version"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    if field_name == "tags":
        return "tags"
    if field_name == "function_type":
        return "functionType"
    if field_name == "archive_format":
        return "archiveFormat"
    return field_name


class GetLatestQuery(WaylayBaseModel):
    """Model for `get_latest` query parameters."""

    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None
    version: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>version</code> of a runtime. Supports [version ranges](https://devhints.io/semver)."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None
    tags: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>tags</code> of a runtime __version__. Filter values with a `-` postfix exclude the tag."
        ),
    ] = None
    function_type: Annotated[
        List[FunctionTypeFilter] | None,
        Field(
            description="If set, filters on the <code>functionType</code> of a runtime. Uses an exact match."
        ),
    ] = None
    archive_format: Annotated[
        List[ArchiveFormatFilter] | None,
        Field(
            description="If set, filters on the <code>archiveFormat</code> of a runtime. Uses an exact match."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_latest_query_alias_for,
        populate_by_name=True,
    )


def _get_query_alias_for(field_name: str) -> str:
    if field_name == "show_tags":
        return "showTags"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    return field_name


class GetQuery(WaylayBaseModel):
    """Model for `get` query parameters."""

    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "show_tags":
        return "showTags"
    if field_name == "version":
        return "version"
    if field_name == "latest":
        return "latest"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    if field_name == "tags":
        return "tags"
    if field_name == "name":
        return "name"
    if field_name == "function_type":
        return "functionType"
    if field_name == "archive_format":
        return "archiveFormat"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None
    version: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>version</code> of a runtime. Supports [version ranges](https://devhints.io/semver)."
        ),
    ] = None
    latest: Annotated[
        LatestVersionLevel | None,
        Field(
            description="If set, filters on the level of latest versions that will be included in the query. * `major`: include at most one latest version per name and major release. * `minor`: include at most one latest version per name and minor release. * `patch`: include each matching patch version. * `true`: include the latest matching version. * `false`: include any matching version (same as `patch`).  This filter is applied after all other selection criteria."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None
    tags: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>tags</code> of a runtime __version__. Filter values with a `-` postfix exclude the tag."
        ),
    ] = None
    name: Annotated[
        StrictStr | None,
        Field(
            description="If set, filters on the <code>name</code> of a runtime. Supports <code>*</code> and <code>?</code> wildcards and is case-insensitive."
        ),
    ] = None
    function_type: Annotated[
        List[FunctionTypeFilter] | None,
        Field(
            description="If set, filters on the <code>functionType</code> of a runtime. Uses an exact match."
        ),
    ] = None
    archive_format: Annotated[
        List[ArchiveFormatFilter] | None,
        Field(
            description="If set, filters on the <code>archiveFormat</code> of a runtime. Uses an exact match."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _list_versions_query_alias_for(field_name: str) -> str:
    if field_name == "version":
        return "version"
    if field_name == "latest":
        return "latest"
    if field_name == "include_deprecated":
        return "includeDeprecated"
    if field_name == "tags":
        return "tags"
    if field_name == "function_type":
        return "functionType"
    if field_name == "archive_format":
        return "archiveFormat"
    if field_name == "show_tags":
        return "showTags"
    return field_name


class ListVersionsQuery(WaylayBaseModel):
    """Model for `list_versions` query parameters."""

    version: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>version</code> of a runtime. Supports [version ranges](https://devhints.io/semver)."
        ),
    ] = None
    latest: Annotated[
        LatestVersionLevel | None,
        Field(
            description="If set, filters on the level of latest versions that will be included in the query. * `major`: include at most one latest version per name and major release. * `minor`: include at most one latest version per name and minor release. * `patch`: include each matching patch version. * `true`: include the latest matching version. * `false`: include any matching version (same as `patch`).  This filter is applied after all other selection criteria."
        ),
    ] = None
    include_deprecated: Annotated[
        StrictBool | None,
        Field(
            description="If set to `true`, deprecated runtimes will be included in the query."
        ),
    ] = None
    tags: Annotated[
        Any | None,
        Field(
            description="If set, filters on the <code>tags</code> of a runtime __version__. Filter values with a `-` postfix exclude the tag."
        ),
    ] = None
    function_type: Annotated[
        List[FunctionTypeFilter] | None,
        Field(
            description="If set, filters on the <code>functionType</code> of a runtime. Uses an exact match."
        ),
    ] = None
    archive_format: Annotated[
        List[ArchiveFormatFilter] | None,
        Field(
            description="If set, filters on the <code>archiveFormat</code> of a runtime. Uses an exact match."
        ),
    ] = None
    show_tags: Annotated[
        ShowEmbedding | None,
        Field(
            description="Sets the representation of related tags in the response. - `embed`: as full summary representation (in `_embedded`). - `none`: omitted."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_versions_query_alias_for,
        populate_by_name=True,
    )


def _tag_query_alias_for(field_name: str) -> str:
    return field_name


class TagQuery(WaylayBaseModel):
    """Model for `tag` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_tag_query_alias_for,
        populate_by_name=True,
    )


def _tags_query_alias_for(field_name: str) -> str:
    if field_name == "name":
        return "name"
    if field_name == "color":
        return "color"
    return field_name


class TagsQuery(WaylayBaseModel):
    """Model for `tags` query parameters."""

    name: Annotated[
        StrictStr | None,
        Field(
            description="If set, filters on the <code>name</code> of a tag. Supports <code>*</code> and <code>?</code> wildcards and is case-insensitive."
        ),
    ] = None
    color: Annotated[
        StrictStr | None,
        Field(
            description="If set, filters on the <code>color</code> of a tag. Uses an exact match."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_tags_query_alias_for,
        populate_by_name=True,
    )
