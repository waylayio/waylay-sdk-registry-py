# coding: utf-8
"""Waylay Function Registry query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Function Registry'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from typing import Any, List

from pydantic import (
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
)
from typing_extensions import (
    Annotated,  # >=3.11
)
from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.function_type import FunctionType
from ..models.job_state_result import JobStateResult
from ..models.job_type import JobType
from ..models.job_type_schema import JobTypeSchema


def _events_query_alias_for(field_name: str) -> str:
    if field_name == "type":
        return "type"
    if field_name == "id":
        return "id"
    if field_name == "children":
        return "children"
    return field_name


class EventsQuery(WaylayBaseModel):
    """Model for `events` query parameters."""

    type: Annotated[JobType | None, Field(description="The type of the job.")] = None
    id: Annotated[StrictStr | None, Field(description="The id of the job.")] = None
    children: Annotated[
        StrictBool | None,
        Field(
            description="If set to <code>true</code>, the event stream will include events of the job's dependants. E.g., when subscribing to a verify job with `children=true`, you will also receive the events of the underlying build and deploy jobs. Defaults to <code>false</code>."
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_events_query_alias_for,
        populate_by_name=True,
    )


def _get_query_alias_for(field_name: str) -> str:
    return field_name


class GetQuery(WaylayBaseModel):
    """Model for `get` query parameters."""

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "limit":
        return "limit"
    if field_name == "type":
        return "type"
    if field_name == "state":
        return "state"
    if field_name == "function_type":
        return "functionType"
    if field_name == "created_before":
        return "createdBefore"
    if field_name == "created_after":
        return "createdAfter"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    limit: Annotated[
        Annotated[float, Field(strict=True, ge=0)]
        | Annotated[int, Field(strict=True, ge=0)]
        | None,
        Field(
            description="The maximum number of items to be return from this query. Has a deployment-defined default and maximum value."
        ),
    ] = None
    type: Annotated[
        List[JobTypeSchema] | None, Field(description="Filter on job type")
    ] = None
    state: Annotated[
        List[JobStateResult] | None, Field(description="Filter on job state")
    ] = None
    function_type: Annotated[
        List[FunctionType] | None, Field(description="Filter on function type")
    ] = None
    created_before: Annotated[
        Any | None,
        Field(
            description="Filter on jobs that created before the given timestamp or age"
        ),
    ] = None
    created_after: Annotated[
        Any | None,
        Field(
            description="Filter on jobs that created after the given timestamp or age"
        ),
    ] = None

    model_config = ConfigDict(
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )
